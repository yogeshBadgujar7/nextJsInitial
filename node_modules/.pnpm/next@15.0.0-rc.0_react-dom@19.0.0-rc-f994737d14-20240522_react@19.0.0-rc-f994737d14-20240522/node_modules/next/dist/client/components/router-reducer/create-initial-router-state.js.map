{"version":3,"sources":["../../../../src/client/components/router-reducer/create-initial-router-state.ts"],"sourcesContent":["import type { ReactNode } from 'react'\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  CacheNodeSeedData,\n  FlightData,\n} from '../../../server/app-render/types'\n\nimport { createHrefFromUrl } from './create-href-from-url'\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head'\nimport { extractPathFromFlightRouterState } from './compute-changed-path'\nimport { createPrefetchCacheEntryForInitialLoad } from './prefetch-cache-utils'\nimport { PrefetchKind, type PrefetchCacheEntry } from './router-reducer-types'\nimport { addRefreshMarkerToActiveParallelSegments } from './refetch-inactive-parallel-segments'\n\nexport interface InitialRouterStateParameters {\n  buildId: string\n  initialTree: FlightRouterState\n  initialCanonicalUrl: string\n  initialSeedData: CacheNodeSeedData\n  initialParallelRoutes: CacheNode['parallelRoutes']\n  location: Location | null\n  initialHead: ReactNode\n  couldBeIntercepted?: boolean\n}\n\nexport function createInitialRouterState({\n  buildId,\n  initialTree,\n  initialSeedData,\n  initialCanonicalUrl,\n  initialParallelRoutes,\n  location,\n  initialHead,\n  couldBeIntercepted,\n}: InitialRouterStateParameters) {\n  const isServer = !location\n  const rsc = initialSeedData[2]\n\n  const cache: CacheNode = {\n    lazyData: null,\n    rsc: rsc,\n    prefetchRsc: null,\n    head: null,\n    prefetchHead: null,\n    // The cache gets seeded during the first render. `initialParallelRoutes` ensures the cache from the first render is there during the second render.\n    parallelRoutes: isServer ? new Map() : initialParallelRoutes,\n    lazyDataResolved: false,\n    loading: initialSeedData[3],\n  }\n\n  const canonicalUrl =\n    // location.href is read as the initial value for canonicalUrl in the browser\n    // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.\n    location\n      ? // window.location does not have the same type as URL but has all the fields createHrefFromUrl needs.\n        createHrefFromUrl(location)\n      : initialCanonicalUrl\n\n  addRefreshMarkerToActiveParallelSegments(initialTree, canonicalUrl)\n\n  const prefetchCache = new Map<string, PrefetchCacheEntry>()\n\n  // When the cache hasn't been seeded yet we fill the cache with the head.\n  if (initialParallelRoutes === null || initialParallelRoutes.size === 0) {\n    fillLazyItemsTillLeafWithHead(\n      cache,\n      undefined,\n      initialTree,\n      initialSeedData,\n      initialHead\n    )\n  }\n\n  const initialState = {\n    buildId,\n    tree: initialTree,\n    cache,\n    prefetchCache,\n    pushRef: {\n      pendingPush: false,\n      mpaNavigation: false,\n      // First render needs to preserve the previous window.history.state\n      // to avoid it being overwritten on navigation back/forward with MPA Navigation.\n      preserveCustomHistoryState: true,\n    },\n    focusAndScrollRef: {\n      apply: false,\n      onlyHashChange: false,\n      hashFragment: null,\n      segmentPaths: [],\n    },\n    canonicalUrl,\n    nextUrl:\n      // the || operator is intentional, the pathname can be an empty string\n      (extractPathFromFlightRouterState(initialTree) || location?.pathname) ??\n      null,\n  }\n\n  if (location) {\n    // Seed the prefetch cache with this page's data.\n    // This is to prevent needlessly re-prefetching a page that is already reusable,\n    // and will avoid triggering a loading state/data fetch stall when navigating back to the page.\n    const url = new URL(\n      `${location.pathname}${location.search}`,\n      location.origin\n    )\n\n    const initialFlightData: FlightData = [['', initialTree, null, null]]\n    createPrefetchCacheEntryForInitialLoad({\n      url,\n      kind: PrefetchKind.AUTO,\n      data: [initialFlightData, undefined, false, couldBeIntercepted],\n      tree: initialState.tree,\n      prefetchCache: initialState.prefetchCache,\n      nextUrl: initialState.nextUrl,\n    })\n  }\n\n  return initialState\n}\n"],"names":["createInitialRouterState","buildId","initialTree","initialSeedData","initialCanonicalUrl","initialParallelRoutes","location","initialHead","couldBeIntercepted","isServer","rsc","cache","lazyData","prefetchRsc","head","prefetchHead","parallelRoutes","Map","lazyDataResolved","loading","canonicalUrl","createHrefFromUrl","addRefreshMarkerToActiveParallelSegments","prefetchCache","size","fillLazyItemsTillLeafWithHead","undefined","extractPathFromFlightRouterState","initialState","tree","pushRef","pendingPush","mpaNavigation","preserveCustomHistoryState","focusAndScrollRef","apply","onlyHashChange","hashFragment","segmentPaths","nextUrl","pathname","url","URL","search","origin","initialFlightData","createPrefetchCacheEntryForInitialLoad","kind","PrefetchKind","AUTO","data"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA0BgBA;;;eAAAA;;;mCAlBkB;+CACY;oCACG;oCACM;oCACD;iDACG;AAalD,SAASA,yBAAyB,KASV;IATU,IAAA,EACvCC,OAAO,EACPC,WAAW,EACXC,eAAe,EACfC,mBAAmB,EACnBC,qBAAqB,EACrBC,QAAQ,EACRC,WAAW,EACXC,kBAAkB,EACW,GATU;IAUvC,MAAMC,WAAW,CAACH;IAClB,MAAMI,MAAMP,eAAe,CAAC,EAAE;IAE9B,MAAMQ,QAAmB;QACvBC,UAAU;QACVF,KAAKA;QACLG,aAAa;QACbC,MAAM;QACNC,cAAc;QACd,oJAAoJ;QACpJC,gBAAgBP,WAAW,IAAIQ,QAAQZ;QACvCa,kBAAkB;QAClBC,SAAShB,eAAe,CAAC,EAAE;IAC7B;IAEA,MAAMiB,eACJ,6EAA6E;IAC7E,kJAAkJ;IAClJd,WAEIe,IAAAA,oCAAiB,EAACf,YAClBF;IAENkB,IAAAA,yEAAwC,EAACpB,aAAakB;IAEtD,MAAMG,gBAAgB,IAAIN;IAE1B,yEAAyE;IACzE,IAAIZ,0BAA0B,QAAQA,sBAAsBmB,IAAI,KAAK,GAAG;QACtEC,IAAAA,4DAA6B,EAC3Bd,OACAe,WACAxB,aACAC,iBACAI;IAEJ;QAsBI,sEAAsE;IACrEoB;IArBL,MAAMC,eAAe;QACnB3B;QACA4B,MAAM3B;QACNS;QACAY;QACAO,SAAS;YACPC,aAAa;YACbC,eAAe;YACf,mEAAmE;YACnE,gFAAgF;YAChFC,4BAA4B;QAC9B;QACAC,mBAAmB;YACjBC,OAAO;YACPC,gBAAgB;YAChBC,cAAc;YACdC,cAAc,EAAE;QAClB;QACAlB;QACAmB,SAEE,CAACZ,OAAAA,IAAAA,oDAAgC,EAACzB,iBAAgBI,4BAAAA,SAAUkC,QAAQ,aAAnEb,OACD;IACJ;IAEA,IAAIrB,UAAU;QACZ,iDAAiD;QACjD,gFAAgF;QAChF,+FAA+F;QAC/F,MAAMmC,MAAM,IAAIC,IACd,AAAC,KAAEpC,SAASkC,QAAQ,GAAGlC,SAASqC,MAAM,EACtCrC,SAASsC,MAAM;QAGjB,MAAMC,oBAAgC;YAAC;gBAAC;gBAAI3C;gBAAa;gBAAM;aAAK;SAAC;QACrE4C,IAAAA,0DAAsC,EAAC;YACrCL;YACAM,MAAMC,gCAAY,CAACC,IAAI;YACvBC,MAAM;gBAACL;gBAAmBnB;gBAAW;gBAAOlB;aAAmB;YAC/DqB,MAAMD,aAAaC,IAAI;YACvBN,eAAeK,aAAaL,aAAa;YACzCgB,SAASX,aAAaW,OAAO;QAC/B;IACF;IAEA,OAAOX;AACT"}