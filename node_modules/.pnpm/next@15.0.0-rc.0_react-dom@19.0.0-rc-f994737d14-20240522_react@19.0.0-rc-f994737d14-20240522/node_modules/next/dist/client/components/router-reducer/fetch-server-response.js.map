{"version":3,"sources":["../../../../src/client/components/router-reducer/fetch-server-response.ts"],"sourcesContent":["'use client'\n\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\n// import { createFromFetch } from 'react-server-dom-webpack/client'\nconst { createFromFetch } = (\n  !!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')\n) as typeof import('react-server-dom-webpack/client')\n\nimport type {\n  FlightRouterState,\n  FlightData,\n  NextFlightResponse,\n} from '../../../server/app-render/types'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_URL,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../app-router-headers'\nimport { urlToUrlWithoutFlightMarker } from '../app-router'\nimport { callServer } from '../../app-call-server'\nimport { PrefetchKind } from './router-reducer-types'\nimport { hexHash } from '../../../shared/lib/hash'\n\nexport type FetchServerResponseResult = [\n  flightData: FlightData,\n  canonicalUrlOverride: URL | undefined,\n  postponed?: boolean,\n  intercepted?: boolean,\n]\n\nfunction doMpaNavigation(url: string): FetchServerResponseResult {\n  return [urlToUrlWithoutFlightMarker(url).toString(), undefined, false, false]\n}\n\n/**\n * Fetch the flight data for the provided url. Takes in the current router state to decide what to render server-side.\n */\nexport async function fetchServerResponse(\n  url: URL,\n  flightRouterState: FlightRouterState,\n  nextUrl: string | null,\n  currentBuildId: string,\n  prefetchKind?: PrefetchKind\n): Promise<FetchServerResponseResult> {\n  const headers: {\n    [RSC_HEADER]: '1'\n    [NEXT_ROUTER_STATE_TREE]: string\n    [NEXT_URL]?: string\n    [NEXT_ROUTER_PREFETCH_HEADER]?: '1'\n  } = {\n    // Enable flight response\n    [RSC_HEADER]: '1',\n    // Provide the current router state\n    [NEXT_ROUTER_STATE_TREE]: encodeURIComponent(\n      JSON.stringify(flightRouterState)\n    ),\n  }\n\n  /**\n   * Three cases:\n   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully\n   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above\n   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully\n   */\n  if (prefetchKind === PrefetchKind.AUTO) {\n    headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n  }\n\n  if (nextUrl) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  const uniqueCacheQuery = hexHash(\n    [\n      headers[NEXT_ROUTER_PREFETCH_HEADER] || '0',\n      headers[NEXT_ROUTER_STATE_TREE],\n      headers[NEXT_URL],\n    ].join(',')\n  )\n\n  try {\n    let fetchUrl = new URL(url)\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (fetchUrl.pathname.endsWith('/')) {\n          fetchUrl.pathname += 'index.txt'\n        } else {\n          fetchUrl.pathname += '.txt'\n        }\n      }\n    }\n\n    // Add unique cache query to avoid caching conflicts on CDN which don't respect to Vary header\n    fetchUrl.searchParams.set(NEXT_RSC_UNION_QUERY, uniqueCacheQuery)\n\n    const res = await fetch(fetchUrl, {\n      // Backwards compat for older browsers. `same-origin` is the default in modern browsers.\n      credentials: 'same-origin',\n      headers,\n    })\n\n    const responseUrl = urlToUrlWithoutFlightMarker(res.url)\n    const canonicalUrl = res.redirected ? responseUrl : undefined\n\n    const contentType = res.headers.get('content-type') || ''\n    const postponed = !!res.headers.get(NEXT_DID_POSTPONE_HEADER)\n    const interception = !!res.headers.get('vary')?.includes(NEXT_URL)\n    let isFlightResponse = contentType === RSC_CONTENT_TYPE_HEADER\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (!isFlightResponse) {\n          isFlightResponse = contentType.startsWith('text/plain')\n        }\n      }\n    }\n\n    // If fetch returns something different than flight response handle it like a mpa navigation\n    // If the fetch was not 200, we also handle it like a mpa navigation\n    if (!isFlightResponse || !res.ok) {\n      // in case the original URL came with a hash, preserve it before redirecting to the new URL\n      if (url.hash) {\n        responseUrl.hash = url.hash\n      }\n\n      return doMpaNavigation(responseUrl.toString())\n    }\n\n    // Handle the `fetch` readable stream that can be unwrapped by `React.use`.\n    const [buildId, flightData]: NextFlightResponse = await createFromFetch(\n      Promise.resolve(res),\n      {\n        callServer,\n      }\n    )\n\n    if (currentBuildId !== buildId) {\n      return doMpaNavigation(res.url)\n    }\n\n    return [flightData, canonicalUrl, postponed, interception]\n  } catch (err) {\n    console.error(\n      `Failed to fetch RSC payload for ${url}. Falling back to browser navigation.`,\n      err\n    )\n    // If fetch fails handle it like a mpa navigation\n    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.\n    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.\n    return [url.toString(), undefined, false, false]\n  }\n}\n"],"names":["fetchServerResponse","createFromFetch","process","env","NEXT_RUNTIME","require","doMpaNavigation","url","urlToUrlWithoutFlightMarker","toString","undefined","flightRouterState","nextUrl","currentBuildId","prefetchKind","headers","RSC_HEADER","NEXT_ROUTER_STATE_TREE","encodeURIComponent","JSON","stringify","PrefetchKind","AUTO","NEXT_ROUTER_PREFETCH_HEADER","NEXT_URL","uniqueCacheQuery","hexHash","join","res","fetchUrl","URL","NODE_ENV","__NEXT_CONFIG_OUTPUT","pathname","endsWith","searchParams","set","NEXT_RSC_UNION_QUERY","fetch","credentials","responseUrl","canonicalUrl","redirected","contentType","get","postponed","NEXT_DID_POSTPONE_HEADER","interception","includes","isFlightResponse","RSC_CONTENT_TYPE_HEADER","startsWith","ok","hash","buildId","flightData","Promise","resolve","callServer","err","console","error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}