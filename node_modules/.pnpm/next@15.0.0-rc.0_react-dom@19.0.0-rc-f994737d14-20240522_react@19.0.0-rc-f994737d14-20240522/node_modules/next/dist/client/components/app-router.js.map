{"version":3,"sources":["../../../src/client/components/app-router.tsx"],"sourcesContent":["'use client'\n\nimport type { ReactNode } from 'react'\nimport React, {\n  use,\n  useEffect,\n  useMemo,\n  useCallback,\n  startTransition,\n  useInsertionEffect,\n  useDeferredValue,\n} from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  GlobalLayoutRouterContext,\n  MissingSlotContext,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  CacheNode,\n  AppRouterInstance,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type { ErrorComponent } from './error-boundary'\nimport {\n  ACTION_FAST_REFRESH,\n  ACTION_NAVIGATE,\n  ACTION_PREFETCH,\n  ACTION_REFRESH,\n  ACTION_RESTORE,\n  ACTION_SERVER_ACTION,\n  ACTION_SERVER_PATCH,\n  PrefetchKind,\n} from './router-reducer/router-reducer-types'\nimport type {\n  AppRouterState,\n  ReducerActions,\n  RouterChangeByServerResponse,\n  RouterNavigate,\n  ServerActionDispatcher,\n} from './router-reducer/router-reducer-types'\nimport { createHrefFromUrl } from './router-reducer/create-href-from-url'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport {\n  useReducerWithReduxDevtools,\n  useUnwrapState,\n  type ReduxDevtoolsSyncFn,\n} from './use-reducer-with-devtools'\nimport { ErrorBoundary } from './error-boundary'\nimport { createInitialRouterState } from './router-reducer/create-initial-router-state'\nimport type { InitialRouterStateParameters } from './router-reducer/create-initial-router-state'\nimport { isBot } from '../../shared/lib/router/utils/is-bot'\nimport { addBasePath } from '../add-base-path'\nimport { AppRouterAnnouncer } from './app-router-announcer'\nimport { RedirectBoundary } from './redirect-boundary'\nimport { findHeadInCache } from './router-reducer/reducers/find-head-in-cache'\nimport { unresolvedThenable } from './unresolved-thenable'\nimport { NEXT_RSC_UNION_QUERY } from './app-router-headers'\nimport { removeBasePath } from '../remove-base-path'\nimport { hasBasePath } from '../has-base-path'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport type { Params } from '../../shared/lib/router/utils/route-matcher'\nimport type { FlightRouterState } from '../../server/app-render/types'\nconst isServer = typeof window === 'undefined'\n\n// Ensure the initialParallelRoutes are not combined because of double-rendering in the browser with Strict Mode.\nlet initialParallelRoutes: CacheNode['parallelRoutes'] = isServer\n  ? null!\n  : new Map()\n\nlet globalServerActionDispatcher = null as ServerActionDispatcher | null\n\nexport function getServerActionDispatcher() {\n  return globalServerActionDispatcher\n}\n\nconst globalMutable: {\n  pendingMpaPath?: string\n} = {}\n\nexport function urlToUrlWithoutFlightMarker(url: string): URL {\n  const urlWithoutFlightParameters = new URL(url, location.origin)\n  urlWithoutFlightParameters.searchParams.delete(NEXT_RSC_UNION_QUERY)\n  if (process.env.NODE_ENV === 'production') {\n    if (\n      process.env.__NEXT_CONFIG_OUTPUT === 'export' &&\n      urlWithoutFlightParameters.pathname.endsWith('.txt')\n    ) {\n      const { pathname } = urlWithoutFlightParameters\n      const length = pathname.endsWith('/index.txt') ? 10 : 4\n      // Slice off `/index.txt` or `.txt` from the end of the pathname\n      urlWithoutFlightParameters.pathname = pathname.slice(0, -length)\n    }\n  }\n  return urlWithoutFlightParameters\n}\n\n// this function performs a depth-first search of the tree to find the selected\n// params\nfunction getSelectedParams(\n  currentTree: FlightRouterState,\n  params: Params = {}\n): Params {\n  const parallelRoutes = currentTree[1]\n\n  for (const parallelRoute of Object.values(parallelRoutes)) {\n    const segment = parallelRoute[0]\n    const isDynamicParameter = Array.isArray(segment)\n    const segmentValue = isDynamicParameter ? segment[1] : segment\n    if (!segmentValue || segmentValue.startsWith(PAGE_SEGMENT_KEY)) continue\n\n    // Ensure catchAll and optional catchall are turned into an array\n    const isCatchAll =\n      isDynamicParameter && (segment[2] === 'c' || segment[2] === 'oc')\n\n    if (isCatchAll) {\n      params[segment[0]] = segment[1].split('/')\n    } else if (isDynamicParameter) {\n      params[segment[0]] = segment[1]\n    }\n\n    params = getSelectedParams(parallelRoute, params)\n  }\n\n  return params\n}\n\ntype AppRouterProps = Omit<\n  Omit<InitialRouterStateParameters, 'isServer' | 'location'>,\n  'initialParallelRoutes'\n> & {\n  buildId: string\n  initialHead: ReactNode\n  assetPrefix: string\n  missingSlots: Set<string>\n}\n\nfunction isExternalURL(url: URL) {\n  return url.origin !== window.location.origin\n}\n\nfunction HistoryUpdater({\n  appRouterState,\n  sync,\n}: {\n  appRouterState: AppRouterState\n  sync: ReduxDevtoolsSyncFn\n}) {\n  useInsertionEffect(() => {\n    const { tree, pushRef, canonicalUrl } = appRouterState\n    const historyState = {\n      ...(pushRef.preserveCustomHistoryState ? window.history.state : {}),\n      // Identifier is shortened intentionally.\n      // __NA is used to identify if the history entry can be handled by the app-router.\n      // __N is used to identify if the history entry can be handled by the old router.\n      __NA: true,\n      __PRIVATE_NEXTJS_INTERNALS_TREE: tree,\n    }\n    if (\n      pushRef.pendingPush &&\n      // Skip pushing an additional history entry if the canonicalUrl is the same as the current url.\n      // This mirrors the browser behavior for normal navigation.\n      createHrefFromUrl(new URL(window.location.href)) !== canonicalUrl\n    ) {\n      // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.\n      pushRef.pendingPush = false\n      window.history.pushState(historyState, '', canonicalUrl)\n    } else {\n      window.history.replaceState(historyState, '', canonicalUrl)\n    }\n\n    sync(appRouterState)\n  }, [appRouterState, sync])\n  return null\n}\n\nexport function createEmptyCacheNode(): CacheNode {\n  return {\n    lazyData: null,\n    rsc: null,\n    prefetchRsc: null,\n    head: null,\n    prefetchHead: null,\n    parallelRoutes: new Map(),\n    lazyDataResolved: false,\n    loading: null,\n  }\n}\n\nfunction useServerActionDispatcher(dispatch: React.Dispatch<ReducerActions>) {\n  const serverActionDispatcher: ServerActionDispatcher = useCallback(\n    (actionPayload) => {\n      startTransition(() => {\n        dispatch({\n          ...actionPayload,\n          type: ACTION_SERVER_ACTION,\n        })\n      })\n    },\n    [dispatch]\n  )\n  globalServerActionDispatcher = serverActionDispatcher\n}\n\n/**\n * Server response that only patches the cache and tree.\n */\nfunction useChangeByServerResponse(\n  dispatch: React.Dispatch<ReducerActions>\n): RouterChangeByServerResponse {\n  return useCallback(\n    ({ previousTree, serverResponse }) => {\n      startTransition(() => {\n        dispatch({\n          type: ACTION_SERVER_PATCH,\n          previousTree,\n          serverResponse,\n        })\n      })\n    },\n    [dispatch]\n  )\n}\n\nfunction useNavigate(dispatch: React.Dispatch<ReducerActions>): RouterNavigate {\n  return useCallback(\n    (href, navigateType, shouldScroll) => {\n      const url = new URL(addBasePath(href), location.href)\n\n      return dispatch({\n        type: ACTION_NAVIGATE,\n        url,\n        isExternalUrl: isExternalURL(url),\n        locationSearch: location.search,\n        shouldScroll: shouldScroll ?? true,\n        navigateType,\n      })\n    },\n    [dispatch]\n  )\n}\n\nfunction copyNextJsInternalHistoryState(data: any) {\n  if (data == null) data = {}\n  const currentState = window.history.state\n  const __NA = currentState?.__NA\n  if (__NA) {\n    data.__NA = __NA\n  }\n  const __PRIVATE_NEXTJS_INTERNALS_TREE =\n    currentState?.__PRIVATE_NEXTJS_INTERNALS_TREE\n  if (__PRIVATE_NEXTJS_INTERNALS_TREE) {\n    data.__PRIVATE_NEXTJS_INTERNALS_TREE = __PRIVATE_NEXTJS_INTERNALS_TREE\n  }\n\n  return data\n}\n\nfunction Head({\n  headCacheNode,\n}: {\n  headCacheNode: CacheNode | null\n}): React.ReactNode {\n  // If this segment has a `prefetchHead`, it's the statically prefetched data.\n  // We should use that on initial render instead of `head`. Then we'll switch\n  // to `head` when the dynamic response streams in.\n  const head = headCacheNode !== null ? headCacheNode.head : null\n  const prefetchHead =\n    headCacheNode !== null ? headCacheNode.prefetchHead : null\n\n  // If no prefetch data is available, then we go straight to rendering `head`.\n  const resolvedPrefetchRsc = prefetchHead !== null ? prefetchHead : head\n\n  // We use `useDeferredValue` to handle switching between the prefetched and\n  // final values. The second argument is returned on initial render, then it\n  // re-renders with the first argument.\n  //\n  // @ts-expect-error The second argument to `useDeferredValue` is only\n  // available in the experimental builds. When its disabled, it will always\n  // return `head`.\n  return useDeferredValue(head, resolvedPrefetchRsc)\n}\n\n/**\n * The global router that wraps the application components.\n */\nfunction Router({\n  buildId,\n  initialHead,\n  initialTree,\n  initialCanonicalUrl,\n  initialSeedData,\n  couldBeIntercepted,\n  assetPrefix,\n  missingSlots,\n}: AppRouterProps) {\n  const initialState = useMemo(\n    () =>\n      createInitialRouterState({\n        buildId,\n        initialSeedData,\n        initialCanonicalUrl,\n        initialTree,\n        initialParallelRoutes,\n        location: !isServer ? window.location : null,\n        initialHead,\n        couldBeIntercepted,\n      }),\n    [\n      buildId,\n      initialSeedData,\n      initialCanonicalUrl,\n      initialTree,\n      initialHead,\n      couldBeIntercepted,\n    ]\n  )\n  const [reducerState, dispatch, sync] =\n    useReducerWithReduxDevtools(initialState)\n\n  useEffect(() => {\n    // Ensure initialParallelRoutes is cleaned up from memory once it's used.\n    initialParallelRoutes = null!\n  }, [])\n\n  const { canonicalUrl } = useUnwrapState(reducerState)\n  // Add memoized pathname/query for useSearchParams and usePathname.\n  const { searchParams, pathname } = useMemo(() => {\n    const url = new URL(\n      canonicalUrl,\n      typeof window === 'undefined' ? 'http://n' : window.location.href\n    )\n\n    return {\n      // This is turned into a readonly class in `useSearchParams`\n      searchParams: url.searchParams,\n      pathname: hasBasePath(url.pathname)\n        ? removeBasePath(url.pathname)\n        : url.pathname,\n    }\n  }, [canonicalUrl])\n\n  const changeByServerResponse = useChangeByServerResponse(dispatch)\n  const navigate = useNavigate(dispatch)\n  useServerActionDispatcher(dispatch)\n\n  /**\n   * The app router that is exposed through `useRouter`. It's only concerned with dispatching actions to the reducer, does not hold state.\n   */\n  const appRouter = useMemo<AppRouterInstance>(() => {\n    const routerInstance: AppRouterInstance = {\n      back: () => window.history.back(),\n      forward: () => window.history.forward(),\n      prefetch: (href, options) => {\n        // Don't prefetch for bots as they don't navigate.\n        // Don't prefetch during development (improves compilation performance)\n        if (\n          isBot(window.navigator.userAgent) ||\n          process.env.NODE_ENV === 'development'\n        ) {\n          return\n        }\n        const url = new URL(addBasePath(href), window.location.href)\n        // External urls can't be prefetched in the same way.\n        if (isExternalURL(url)) {\n          return\n        }\n        startTransition(() => {\n          dispatch({\n            type: ACTION_PREFETCH,\n            url,\n            kind: options?.kind ?? PrefetchKind.FULL,\n          })\n        })\n      },\n      replace: (href, options = {}) => {\n        startTransition(() => {\n          navigate(href, 'replace', options.scroll ?? true)\n        })\n      },\n      push: (href, options = {}) => {\n        startTransition(() => {\n          navigate(href, 'push', options.scroll ?? true)\n        })\n      },\n      refresh: () => {\n        startTransition(() => {\n          dispatch({\n            type: ACTION_REFRESH,\n            origin: window.location.origin,\n          })\n        })\n      },\n      fastRefresh: () => {\n        if (process.env.NODE_ENV !== 'development') {\n          throw new Error(\n            'fastRefresh can only be used in development mode. Please use refresh instead.'\n          )\n        } else {\n          startTransition(() => {\n            dispatch({\n              type: ACTION_FAST_REFRESH,\n              origin: window.location.origin,\n            })\n          })\n        }\n      },\n    }\n\n    return routerInstance\n  }, [dispatch, navigate])\n\n  useEffect(() => {\n    // Exists for debugging purposes. Don't use in application code.\n    if (window.next) {\n      window.next.router = appRouter\n    }\n  }, [appRouter])\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { cache, prefetchCache, tree } = useUnwrapState(reducerState)\n\n    // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      // Add `window.nd` for debugging purposes.\n      // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.\n      // @ts-ignore this is for debugging\n      window.nd = {\n        router: appRouter,\n        cache,\n        prefetchCache,\n        tree,\n      }\n    }, [appRouter, cache, prefetchCache, tree])\n  }\n\n  useEffect(() => {\n    // If the app is restored from bfcache, it's possible that\n    // pushRef.mpaNavigation is true, which would mean that any re-render of this component\n    // would trigger the mpa navigation logic again from the lines below.\n    // This will restore the router to the initial state in the event that the app is restored from bfcache.\n    function handlePageShow(event: PageTransitionEvent) {\n      if (\n        !event.persisted ||\n        !window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n      ) {\n        return\n      }\n\n      // Clear the pendingMpaPath value so that a subsequent MPA navigation to the same URL can be triggered.\n      // This is necessary because if the browser restored from bfcache, the pendingMpaPath would still be set to the value\n      // of the last MPA navigation.\n      globalMutable.pendingMpaPath = undefined\n\n      dispatch({\n        type: ACTION_RESTORE,\n        url: new URL(window.location.href),\n        tree: window.history.state.__PRIVATE_NEXTJS_INTERNALS_TREE,\n      })\n    }\n\n    window.addEventListener('pageshow', handlePageShow)\n\n    return () => {\n      window.removeEventListener('pageshow', handlePageShow)\n    }\n  }, [dispatch])\n\n  // When mpaNavigation flag is set do a hard navigation to the new url.\n  // Infinitely suspend because we don't actually want to rerender any child\n  // components with the new URL and any entangled state updates shouldn't\n  // commit either (eg: useTransition isPending should stay true until the page\n  // unloads).\n  //\n  // This is a side effect in render. Don't try this at home, kids. It's\n  // probably safe because we know this is a singleton component and it's never\n  // in <Offscreen>. At least I hope so. (It will run twice in dev strict mode,\n  // but that's... fine?)\n  const { pushRef } = useUnwrapState(reducerState)\n  if (pushRef.mpaNavigation) {\n    // if there's a re-render, we don't want to trigger another redirect if one is already in flight to the same URL\n    if (globalMutable.pendingMpaPath !== canonicalUrl) {\n      const location = window.location\n      if (pushRef.pendingPush) {\n        location.assign(canonicalUrl)\n      } else {\n        location.replace(canonicalUrl)\n      }\n\n      globalMutable.pendingMpaPath = canonicalUrl\n    }\n    // TODO-APP: Should we listen to navigateerror here to catch failed\n    // navigations somehow? And should we call window.stop() if a SPA navigation\n    // should interrupt an MPA one?\n    use(unresolvedThenable)\n  }\n\n  useEffect(() => {\n    const originalPushState = window.history.pushState.bind(window.history)\n    const originalReplaceState = window.history.replaceState.bind(\n      window.history\n    )\n\n    // Ensure the canonical URL in the Next.js Router is updated when the URL is changed so that `usePathname` and `useSearchParams` hold the pushed values.\n    const applyUrlFromHistoryPushReplace = (\n      url: string | URL | null | undefined\n    ) => {\n      const href = window.location.href\n      const tree: FlightRouterState | undefined =\n        window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n\n      startTransition(() => {\n        dispatch({\n          type: ACTION_RESTORE,\n          url: new URL(url ?? href, href),\n          tree,\n        })\n      })\n    }\n\n    /**\n     * Patch pushState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.pushState = function pushState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalPushState(data, _unused, url)\n      }\n\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n\n      return originalPushState(data, _unused, url)\n    }\n\n    /**\n     * Patch replaceState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.replaceState = function replaceState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalReplaceState(data, _unused, url)\n      }\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n      return originalReplaceState(data, _unused, url)\n    }\n\n    /**\n     * Handle popstate event, this is used to handle back/forward in the browser.\n     * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.\n     * That case can happen when the old router injected the history entry.\n     */\n    const onPopState = ({ state }: PopStateEvent) => {\n      if (!state) {\n        // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.\n        return\n      }\n\n      // This case happens when the history entry was pushed by the `pages` router.\n      if (!state.__NA) {\n        window.location.reload()\n        return\n      }\n\n      // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously\n      // Without startTransition works if the cache is there for this path\n      startTransition(() => {\n        dispatch({\n          type: ACTION_RESTORE,\n          url: new URL(window.location.href),\n          tree: state.__PRIVATE_NEXTJS_INTERNALS_TREE,\n        })\n      })\n    }\n\n    // Register popstate event to call onPopstate.\n    window.addEventListener('popstate', onPopState)\n    return () => {\n      window.history.pushState = originalPushState\n      window.history.replaceState = originalReplaceState\n      window.removeEventListener('popstate', onPopState)\n    }\n  }, [dispatch])\n\n  const { cache, tree, nextUrl, focusAndScrollRef } =\n    useUnwrapState(reducerState)\n\n  const matchingHead = useMemo(() => {\n    return findHeadInCache(cache, tree[1])\n  }, [cache, tree])\n\n  // Add memoized pathParams for useParams.\n  const pathParams = useMemo(() => {\n    return getSelectedParams(tree)\n  }, [tree])\n\n  const layoutRouterContext = useMemo(() => {\n    return {\n      childNodes: cache.parallelRoutes,\n      tree,\n      // Root node always has `url`\n      // Provided in AppTreeContext to ensure it can be overwritten in layout-router\n      url: canonicalUrl,\n      loading: cache.loading,\n    }\n  }, [cache.parallelRoutes, tree, canonicalUrl, cache.loading])\n\n  const globalLayoutRouterContext = useMemo(() => {\n    return {\n      buildId,\n      changeByServerResponse,\n      tree,\n      focusAndScrollRef,\n      nextUrl,\n    }\n  }, [buildId, changeByServerResponse, tree, focusAndScrollRef, nextUrl])\n\n  let head\n  if (matchingHead !== null) {\n    // The head is wrapped in an extra component so we can use\n    // `useDeferredValue` to swap between the prefetched and final versions of\n    // the head. (This is what LayoutRouter does for segment data, too.)\n    //\n    // The `key` is used to remount the component whenever the head moves to\n    // a different segment.\n    const [headCacheNode, headKey] = matchingHead\n    head = <Head key={headKey} headCacheNode={headCacheNode} />\n  } else {\n    head = null\n  }\n\n  let content = (\n    <RedirectBoundary>\n      {head}\n      {cache.rsc}\n      <AppRouterAnnouncer tree={tree} />\n    </RedirectBoundary>\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      const DevRootNotFoundBoundary: typeof import('./dev-root-not-found-boundary').DevRootNotFoundBoundary =\n        require('./dev-root-not-found-boundary').DevRootNotFoundBoundary\n      content = (\n        <DevRootNotFoundBoundary>\n          <MissingSlotContext.Provider value={missingSlots}>\n            {content}\n          </MissingSlotContext.Provider>\n        </DevRootNotFoundBoundary>\n      )\n    }\n    const HotReloader: typeof import('./react-dev-overlay/app/hot-reloader-client').default =\n      require('./react-dev-overlay/app/hot-reloader-client').default\n\n    content = <HotReloader assetPrefix={assetPrefix}>{content}</HotReloader>\n  }\n\n  return (\n    <>\n      <HistoryUpdater\n        appRouterState={useUnwrapState(reducerState)}\n        sync={sync}\n      />\n      <PathParamsContext.Provider value={pathParams}>\n        <PathnameContext.Provider value={pathname}>\n          <SearchParamsContext.Provider value={searchParams}>\n            <GlobalLayoutRouterContext.Provider\n              value={globalLayoutRouterContext}\n            >\n              <AppRouterContext.Provider value={appRouter}>\n                <LayoutRouterContext.Provider value={layoutRouterContext}>\n                  {content}\n                </LayoutRouterContext.Provider>\n              </AppRouterContext.Provider>\n            </GlobalLayoutRouterContext.Provider>\n          </SearchParamsContext.Provider>\n        </PathnameContext.Provider>\n      </PathParamsContext.Provider>\n    </>\n  )\n}\n\nexport default function AppRouter(\n  props: AppRouterProps & { globalErrorComponent: ErrorComponent }\n) {\n  const { globalErrorComponent, ...rest } = props\n\n  return (\n    <ErrorBoundary errorComponent={globalErrorComponent}>\n      <Router {...rest} />\n    </ErrorBoundary>\n  )\n}\n"],"names":["createEmptyCacheNode","AppRouter","getServerActionDispatcher","urlToUrlWithoutFlightMarker","isServer","window","initialParallelRoutes","Map","globalServerActionDispatcher","globalMutable","url","urlWithoutFlightParameters","URL","location","origin","searchParams","delete","NEXT_RSC_UNION_QUERY","process","env","NODE_ENV","__NEXT_CONFIG_OUTPUT","pathname","endsWith","length","slice","getSelectedParams","currentTree","params","parallelRoutes","parallelRoute","Object","values","segment","isDynamicParameter","Array","isArray","segmentValue","startsWith","PAGE_SEGMENT_KEY","isCatchAll","split","isExternalURL","HistoryUpdater","appRouterState","sync","useInsertionEffect","tree","pushRef","canonicalUrl","historyState","preserveCustomHistoryState","history","state","__NA","__PRIVATE_NEXTJS_INTERNALS_TREE","pendingPush","createHrefFromUrl","href","pushState","replaceState","lazyData","rsc","prefetchRsc","head","prefetchHead","lazyDataResolved","loading","useServerActionDispatcher","dispatch","serverActionDispatcher","useCallback","actionPayload","startTransition","type","ACTION_SERVER_ACTION","useChangeByServerResponse","previousTree","serverResponse","ACTION_SERVER_PATCH","useNavigate","navigateType","shouldScroll","addBasePath","ACTION_NAVIGATE","isExternalUrl","locationSearch","search","copyNextJsInternalHistoryState","data","currentState","Head","headCacheNode","resolvedPrefetchRsc","useDeferredValue","Router","buildId","initialHead","initialTree","initialCanonicalUrl","initialSeedData","couldBeIntercepted","assetPrefix","missingSlots","initialState","useMemo","createInitialRouterState","reducerState","useReducerWithReduxDevtools","useEffect","useUnwrapState","hasBasePath","removeBasePath","changeByServerResponse","navigate","appRouter","routerInstance","back","forward","prefetch","options","isBot","navigator","userAgent","ACTION_PREFETCH","kind","PrefetchKind","FULL","replace","scroll","push","refresh","ACTION_REFRESH","fastRefresh","Error","ACTION_FAST_REFRESH","next","router","cache","prefetchCache","nd","handlePageShow","event","persisted","pendingMpaPath","undefined","ACTION_RESTORE","addEventListener","removeEventListener","mpaNavigation","assign","use","unresolvedThenable","originalPushState","bind","originalReplaceState","applyUrlFromHistoryPushReplace","_unused","_N","onPopState","reload","nextUrl","focusAndScrollRef","matchingHead","findHeadInCache","pathParams","layoutRouterContext","childNodes","globalLayoutRouterContext","headKey","content","RedirectBoundary","AppRouterAnnouncer","DevRootNotFoundBoundary","require","MissingSlotContext","Provider","value","HotReloader","default","PathParamsContext","PathnameContext","SearchParamsContext","GlobalLayoutRouterContext","AppRouterContext","LayoutRouterContext","props","globalErrorComponent","rest","ErrorBoundary","errorComponent"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}