{"version":3,"sources":["../../../../../../src/client/components/react-dev-overlay/internal/helpers/use-websocket.ts"],"sourcesContent":["import { useCallback, useContext, useEffect, useRef } from 'react'\nimport { GlobalLayoutRouterContext } from '../../../../../shared/lib/app-router-context.shared-runtime'\nimport { getSocketUrl } from './get-socket-url'\nimport type { TurbopackMsgToBrowser } from '../../../../../server/dev/hot-reloader-types'\n\nexport function useWebsocket(assetPrefix: string) {\n  const webSocketRef = useRef<WebSocket>()\n\n  useEffect(() => {\n    if (webSocketRef.current) {\n      return\n    }\n\n    const url = getSocketUrl(assetPrefix)\n\n    webSocketRef.current = new window.WebSocket(`${url}/_next/webpack-hmr`)\n  }, [assetPrefix])\n\n  return webSocketRef\n}\n\nexport function useSendMessage(webSocketRef: ReturnType<typeof useWebsocket>) {\n  const sendMessage = useCallback(\n    (data: string) => {\n      const socket = webSocketRef.current\n      if (!socket || socket.readyState !== socket.OPEN) {\n        return\n      }\n      return socket.send(data)\n    },\n    [webSocketRef]\n  )\n  return sendMessage\n}\n\nexport function useTurbopack(\n  sendMessage: ReturnType<typeof useSendMessage>,\n  onUpdateError: (err: unknown) => void\n) {\n  const turbopackState = useRef<{\n    init: boolean\n    queue: Array<TurbopackMsgToBrowser> | undefined\n    callback: ((msg: TurbopackMsgToBrowser) => void) | undefined\n  }>({\n    init: false,\n    // Until the dynamic import resolves, queue any turbopack messages which will be replayed.\n    queue: [],\n    callback: undefined,\n  })\n\n  const processTurbopackMessage = useCallback((msg: TurbopackMsgToBrowser) => {\n    const { callback, queue } = turbopackState.current\n    if (callback) {\n      callback(msg)\n    } else {\n      queue!.push(msg)\n    }\n  }, [])\n\n  useEffect(() => {\n    const { current: initCurrent } = turbopackState\n    // TODO(WEB-1589): only install if `process.turbopack` set.\n    if (initCurrent.init) {\n      return\n    }\n    initCurrent.init = true\n\n    import(\n      // @ts-expect-error requires \"moduleResolution\": \"node16\" in tsconfig.json and not .ts extension\n      '@vercel/turbopack-ecmascript-runtime/dev/client/hmr-client.ts'\n    ).then(({ connect }) => {\n      const { current } = turbopackState\n      connect({\n        addMessageListener(cb: (msg: TurbopackMsgToBrowser) => void) {\n          current.callback = cb\n\n          // Replay all Turbopack messages before we were able to establish the HMR client.\n          for (const msg of current.queue!) {\n            cb(msg)\n          }\n          current.queue = undefined\n        },\n        sendMessage,\n        onUpdateError,\n      })\n    })\n  }, [sendMessage, onUpdateError])\n\n  return processTurbopackMessage\n}\n\nexport function useWebsocketPing(\n  websocketRef: ReturnType<typeof useWebsocket>\n) {\n  const sendMessage = useSendMessage(websocketRef)\n  const { tree } = useContext(GlobalLayoutRouterContext)\n\n  useEffect(() => {\n    // Taken from on-demand-entries-client.js\n    const interval = setInterval(() => {\n      sendMessage(\n        JSON.stringify({\n          event: 'ping',\n          tree,\n          appDirRoute: true,\n        })\n      )\n    }, 2500)\n    return () => clearInterval(interval)\n  }, [tree, sendMessage])\n}\n"],"names":["useSendMessage","useTurbopack","useWebsocket","useWebsocketPing","assetPrefix","webSocketRef","useRef","useEffect","current","url","getSocketUrl","window","WebSocket","sendMessage","useCallback","data","socket","readyState","OPEN","send","onUpdateError","turbopackState","init","queue","callback","undefined","processTurbopackMessage","msg","push","initCurrent","then","connect","addMessageListener","cb","websocketRef","tree","useContext","GlobalLayoutRouterContext","interval","setInterval","JSON","stringify","event","appDirRoute","clearInterval"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;;;;;;;IAqBgBA,cAAc;eAAdA;;IAcAC,YAAY;eAAZA;;IA9BAC,YAAY;eAAZA;;IAsFAC,gBAAgB;eAAhBA;;;uBA3F2C;+CACjB;8BACb;AAGtB,SAASD,aAAaE,WAAmB;IAC9C,MAAMC,eAAeC,IAAAA,aAAM;IAE3BC,IAAAA,gBAAS,EAAC;QACR,IAAIF,aAAaG,OAAO,EAAE;YACxB;QACF;QAEA,MAAMC,MAAMC,IAAAA,0BAAY,EAACN;QAEzBC,aAAaG,OAAO,GAAG,IAAIG,OAAOC,SAAS,CAAC,AAAC,KAAEH,MAAI;IACrD,GAAG;QAACL;KAAY;IAEhB,OAAOC;AACT;AAEO,SAASL,eAAeK,YAA6C;IAC1E,MAAMQ,cAAcC,IAAAA,kBAAW,EAC7B,CAACC;QACC,MAAMC,SAASX,aAAaG,OAAO;QACnC,IAAI,CAACQ,UAAUA,OAAOC,UAAU,KAAKD,OAAOE,IAAI,EAAE;YAChD;QACF;QACA,OAAOF,OAAOG,IAAI,CAACJ;IACrB,GACA;QAACV;KAAa;IAEhB,OAAOQ;AACT;AAEO,SAASZ,aACdY,WAA8C,EAC9CO,aAAqC;IAErC,MAAMC,iBAAiBf,IAAAA,aAAM,EAI1B;QACDgB,MAAM;QACN,0FAA0F;QAC1FC,OAAO,EAAE;QACTC,UAAUC;IACZ;IAEA,MAAMC,0BAA0BZ,IAAAA,kBAAW,EAAC,CAACa;QAC3C,MAAM,EAAEH,QAAQ,EAAED,KAAK,EAAE,GAAGF,eAAeb,OAAO;QAClD,IAAIgB,UAAU;YACZA,SAASG;QACX,OAAO;YACLJ,MAAOK,IAAI,CAACD;QACd;IACF,GAAG,EAAE;IAELpB,IAAAA,gBAAS,EAAC;QACR,MAAM,EAAEC,SAASqB,WAAW,EAAE,GAAGR;QACjC,2DAA2D;QAC3D,IAAIQ,YAAYP,IAAI,EAAE;YACpB;QACF;QACAO,YAAYP,IAAI,GAAG;QAEnB,MAAM,CACJ,gGAAgG;QAChG,iEACAQ,IAAI,CAAC;gBAAC,EAAEC,OAAO,EAAE;YACjB,MAAM,EAAEvB,OAAO,EAAE,GAAGa;YACpBU,QAAQ;gBACNC,oBAAmBC,EAAwC;oBACzDzB,QAAQgB,QAAQ,GAAGS;oBAEnB,iFAAiF;oBACjF,KAAK,MAAMN,OAAOnB,QAAQe,KAAK,CAAG;wBAChCU,GAAGN;oBACL;oBACAnB,QAAQe,KAAK,GAAGE;gBAClB;gBACAZ;gBACAO;YACF;QACF;IACF,GAAG;QAACP;QAAaO;KAAc;IAE/B,OAAOM;AACT;AAEO,SAASvB,iBACd+B,YAA6C;IAE7C,MAAMrB,cAAcb,eAAekC;IACnC,MAAM,EAAEC,IAAI,EAAE,GAAGC,IAAAA,iBAAU,EAACC,wDAAyB;IAErD9B,IAAAA,gBAAS,EAAC;QACR,yCAAyC;QACzC,MAAM+B,WAAWC,YAAY;YAC3B1B,YACE2B,KAAKC,SAAS,CAAC;gBACbC,OAAO;gBACPP;gBACAQ,aAAa;YACf;QAEJ,GAAG;QACH,OAAO,IAAMC,cAAcN;IAC7B,GAAG;QAACH;QAAMtB;KAAY;AACxB"}