{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightData,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n} from './types'\nimport type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external'\nimport type { RequestStore } from '../../client/components/request-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../future/route-modules/app-page/module'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { Revalidate } from '../lib/revalidate'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\n\nimport React from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n  type RenderResultResponse,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  continueDynamicDataResume,\n} from '../stream-utils/node-web-streams-helper'\nimport { canSegmentBeOverridden } from '../../client/components/match-segments'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport { createMetadataComponents } from '../../lib/metadata/metadata'\nimport { RequestAsyncStorageWrapper } from '../async-storage/request-async-storage-wrapper'\nimport { StaticGenerationAsyncStorageWrapper } from '../async-storage/static-generation-async-storage-wrapper'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { addImplicitTags } from '../lib/patch-fetch'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createErrorHandler,\n  ErrorHandlerSource,\n  type ErrorHandler,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { validateURL } from './validate-url'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport {\n  getTracedMetadata,\n  makeGetServerInsertedHTML,\n} from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  createStaticRenderer,\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n} from './static/static-renderer'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n  flightRenderComplete,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { isInterceptionRouteAppPath } from '../future/helpers/interception-routes'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  usedDynamicAPIs,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\ntype AppRenderBaseContext = {\n  staticGenerationStore: StaticGenerationStore\n  requestStore: RequestStore\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n}\n\nexport type GenerateFlight = typeof generateFlight\n\nexport type AppRenderContext = AppRenderBaseContext & {\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  defaultRevalidate: Revalidate\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  flightDataRendererErrorHandler: ErrorHandler\n  serverComponentsErrorHandler: ErrorHandler\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  return ['', {}, loaderTree[2]]\n}\n\n/* This method is important for intercepted routes to function:\n * when a route is intercepted, e.g. /blog/[slug], it will be rendered\n * with the layout of the previous page, e.g. /profile/[id]. The problem is\n * that the loader tree needs to know the dynamic param in order to render (id and slug in the example).\n * Normally they are read from the path but since we are intercepting the route, the path would not contain id,\n * so we need to read it from the router state.\n */\nfunction findDynamicParamFromRouterState(\n  flightRouterState: FlightRouterState | undefined,\n  segment: string\n): {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null {\n  if (!flightRouterState) {\n    return null\n  }\n\n  const treeSegment = flightRouterState[0]\n\n  if (canSegmentBeOverridden(segment, treeSegment)) {\n    if (!Array.isArray(treeSegment) || Array.isArray(segment)) {\n      return null\n    }\n\n    return {\n      param: treeSegment[0],\n      value: treeSegment[1],\n      treeSegment: treeSegment,\n      type: treeSegment[2],\n    }\n  }\n\n  for (const parallelRouterState of Object.values(flightRouterState[1])) {\n    const maybeDynamicParam = findDynamicParamFromRouterState(\n      parallelRouterState,\n      segment\n    )\n    if (maybeDynamicParam) {\n      return maybeDynamicParam\n    }\n  }\n\n  return null\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string,\n  flightRouterState: FlightRouterState | undefined\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    // this is a special marker that will be present for interception routes\n    if (value === '__NEXT_EMPTY_PARAM__') {\n      value = undefined\n    }\n\n    if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n\n      return findDynamicParamFromRouterState(flightRouterState, segment)\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\n// Handle Flight render request. This is only used when client-side navigating. E.g. when you `router.push('/dashboard')` or `router.reload()`.\nasync function generateFlight(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    asNotFound?: boolean\n  }\n): Promise<RenderResult> {\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n  let flightData: FlightData | null = null\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      renderToReadableStream,\n      createDynamicallyTrackedSearchParams,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    staticGenerationStore: { urlPathname },\n    query,\n    requestId,\n    flightRouterState,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const [MetadataTree, MetadataOutlet] = createMetadataComponents({\n      tree: loaderTree,\n      pathname: urlPathname,\n      trailingSlash: ctx.renderOpts.trailingSlash,\n      query,\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createDynamicallyTrackedSearchParams,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          // Adding requestId as react key to make metadata remount for each render\n          <MetadataTree key={requestId} />\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        asNotFound: ctx.isNotFoundPath || options?.asNotFound,\n        metadataOutlet: <MetadataOutlet />,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  const buildIdFlightDataPair = [ctx.renderOpts.buildId, flightData]\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = renderToReadableStream(\n    options\n      ? [options.actionResult, buildIdFlightDataPair]\n      : buildIdFlightDataPair,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError: ctx.flightDataRendererErrorHandler,\n      nonce: ctx.nonce,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream)\n}\n\ntype RenderToStreamResult = {\n  stream: RenderResultResponse\n  err?: unknown\n}\n\ntype RenderToStreamOptions = {\n  /**\n   * This option is used to indicate that the page should be rendered as\n   * if it was not found. When it's enabled, instead of rendering the\n   * page component, it renders the not-found segment.\n   *\n   */\n  asNotFound: boolean\n  tree: LoaderTree\n  formState: any\n}\n\n/**\n * Creates a resolver that eagerly generates a flight payload that is then\n * resolved when the resolver is called.\n */\nfunction createFlightDataResolver(ctx: AppRenderContext) {\n  // Generate the flight data and as soon as it can, convert it into a string.\n  const promise = generateFlight(ctx)\n    .then(async (result) => ({\n      flightData: await result.toUnchunkedString(true),\n    }))\n    // Otherwise if it errored, return the error.\n    .catch((err) => ({ err }))\n\n  return async () => {\n    // Resolve the promise to get the flight data or error.\n    const result = await promise\n\n    // If the flight data failed to render due to an error, re-throw the error\n    // here.\n    if ('err' in result) {\n      throw result.err\n    }\n\n    // Otherwise, return the flight data.\n    return result.flightData\n  }\n}\n\ntype ReactServerAppProps = {\n  tree: LoaderTree\n  ctx: AppRenderContext\n  asNotFound: boolean\n}\n// This is the root component that runs in the RSC context\nasync function ReactServerApp({ tree, ctx, asNotFound }: ReactServerAppProps) {\n  // Create full component tree from root to leaf.\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  const missingSlots = new Set<string>()\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      AppRouter,\n      GlobalError,\n      createDynamicallyTrackedSearchParams,\n    },\n    staticGenerationStore: { urlPathname },\n  } = ctx\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const [MetadataTree, MetadataOutlet] = createMetadataComponents({\n    tree,\n    errorType: asNotFound ? 'not-found' : undefined,\n    pathname: urlPathname,\n    trailingSlash: ctx.renderOpts.trailingSlash,\n    query,\n    getDynamicParamFromSegment: getDynamicParamFromSegment,\n    appUsingSizeAdjustment: appUsingSizeAdjustment,\n    createDynamicallyTrackedSearchParams,\n  })\n\n  const { seedData, styles } = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    asNotFound: asNotFound,\n    metadataOutlet: <MetadataOutlet />,\n    missingSlots,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  return (\n    <>\n      {styles}\n      <AppRouter\n        buildId={ctx.renderOpts.buildId}\n        assetPrefix={ctx.assetPrefix}\n        initialCanonicalUrl={urlPathname}\n        // This is the router state tree.\n        initialTree={initialTree}\n        // This is the tree of React nodes that are seeded into the cache\n        initialSeedData={seedData}\n        couldBeIntercepted={couldBeIntercepted}\n        initialHead={\n          <>\n            {typeof ctx.res.statusCode === 'number' &&\n              ctx.res.statusCode > 400 && (\n                <meta name=\"robots\" content=\"noindex\" />\n              )}\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={ctx.requestId} />\n          </>\n        }\n        globalErrorComponent={GlobalError}\n        // This is used to provide debug information (when in development mode)\n        // about which slots were not filled by page components while creating the component tree.\n        missingSlots={missingSlots}\n      />\n    </>\n  )\n}\n\ntype ReactServerErrorProps = {\n  tree: LoaderTree\n  ctx: AppRenderContext\n  errorType: 'not-found' | 'redirect' | undefined\n}\n// This is the root component that runs in the RSC context\nasync function ReactServerError({\n  tree,\n  ctx,\n  errorType,\n}: ReactServerErrorProps) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      AppRouter,\n      GlobalError,\n      createDynamicallyTrackedSearchParams,\n    },\n    staticGenerationStore: { urlPathname },\n    requestId,\n    res,\n  } = ctx\n\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    pathname: urlPathname,\n    trailingSlash: ctx.renderOpts.trailingSlash,\n    errorType,\n    query,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createDynamicallyTrackedSearchParams,\n  })\n\n  const head = (\n    <>\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {typeof res.statusCode === 'number' && res.statusCode >= 400 && (\n        <meta name=\"robots\" content=\"noindex\" />\n      )}\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    {},\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    null,\n  ]\n  return (\n    <AppRouter\n      buildId={ctx.renderOpts.buildId}\n      assetPrefix={ctx.assetPrefix}\n      initialCanonicalUrl={urlPathname}\n      initialTree={initialTree}\n      initialHead={head}\n      globalErrorComponent={GlobalError}\n      initialSeedData={initialSeedData}\n      missingSlots={new Set()}\n    />\n  )\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction ReactServerEntrypoint<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): T {\n  preinitScripts()\n  const response = useFlightStream(\n    reactServerStream,\n    clientReferenceManifest,\n    nonce\n  )\n  return React.use(response)\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  baseCtx: AppRenderBaseContext,\n  requestEndedState: { ended?: boolean }\n) {\n  const isNotFoundPath = pagePath === '/404'\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    buildManifest,\n    subresourceIntegrityManifest,\n    serverActionsManifest,\n    ComponentMod,\n    dev,\n    nextFontManifest,\n    supportsDynamicHTML,\n    serverActions,\n    appDirDevErrorLogger,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = instrumented.loadChunk\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({\n    serverActionsManifest,\n    pageName: renderOpts.page,\n  })\n\n  setReferenceManifestsSingleton({\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  const digestErrorsMap: Map<string, Error> = new Map()\n  const allCapturedErrors: Error[] = []\n  const isNextExport = !!renderOpts.nextExport\n  const { staticGenerationStore, requestStore } = baseCtx\n  const { isStaticGeneration } = staticGenerationStore\n\n  /**\n   * Sets the headers on the response object. If we're generating static HTML,\n   * we store the headers in the metadata object as well so that they can be\n   * persisted.\n   */\n  const setHeader = isStaticGeneration\n    ? (name: string, value: string | string[]) => {\n        res.setHeader(name, value)\n\n        metadata.headers ??= {}\n        metadata.headers[name] = res.getHeader(name)\n\n        return res\n      }\n    : res.setHeader.bind(res)\n\n  const isRoutePPREnabled = renderOpts.experimental.isRoutePPREnabled === true\n\n  // When static generation fails during PPR, we log the errors separately. We\n  // intentionally silence the error logger in this case to avoid double\n  // logging.\n  const silenceStaticGenerationErrors = isRoutePPREnabled && isStaticGeneration\n\n  const serverComponentsErrorHandler = createErrorHandler({\n    source: ErrorHandlerSource.serverComponents,\n    dev,\n    isNextExport,\n    errorLogger: appDirDevErrorLogger,\n    digestErrorsMap,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n  const flightDataRendererErrorHandler = createErrorHandler({\n    source: ErrorHandlerSource.flightData,\n    dev,\n    isNextExport,\n    errorLogger: appDirDevErrorLogger,\n    digestErrorsMap,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n  const htmlRendererErrorHandler = createErrorHandler({\n    source: ErrorHandlerSource.html,\n    dev,\n    isNextExport,\n    errorLogger: appDirDevErrorLogger,\n    digestErrorsMap,\n    allCapturedErrors,\n    silenceLogger: silenceStaticGenerationErrors,\n  })\n\n  ComponentMod.patchFetch()\n\n  if (renderOpts.experimental.after) {\n    ComponentMod.patchCacheScopeSupportIntoReact()\n  }\n\n  /**\n   * Rules of Static & Dynamic HTML:\n   *\n   *    1.) We must generate static HTML unless the caller explicitly opts\n   *        in to dynamic HTML support.\n   *\n   *    2.) If dynamic HTML support is requested, we must honor that request\n   *        or throw an error. It is the sole responsibility of the caller to\n   *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n   *\n   * These rules help ensure that other existing features like request caching,\n   * coalescing, and ISR continue working as intended.\n   */\n  const generateStaticHTML = supportsDynamicHTML !== true\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  staticGenerationStore.fetchMetrics = []\n  metadata.fetchMetrics = staticGenerationStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const isRSCRequest = req.headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const isPrefetchRSCRequest =\n    isRSCRequest &&\n    req.headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request\n   * is not a client-side navigation request or if the request is a prefetch\n   * request (except when it's a prefetch request for an interception route\n   * which is always dynamic).\n   */\n  const shouldProvideFlightRouterState =\n    isRSCRequest &&\n    (!isPrefetchRSCRequest ||\n      !isRoutePPREnabled ||\n      // Interception routes currently depend on the flight router state to\n      // extract dynamic params.\n      isInterceptionRouteAppPath(pagePath))\n\n  const parsedFlightRouterState = parseAndValidateFlightRouterState(\n    req.headers[NEXT_ROUTER_STATE_TREE.toLowerCase()]\n  )\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath,\n    // `FlightRouterState` is unconditionally provided here because this method uses it\n    // to extract dynamic params as a fallback if they're not present in the path.\n    parsedFlightRouterState\n  )\n\n  // Get the nonce from the incoming request if it has one.\n  const csp =\n    req.headers['content-security-policy'] ||\n    req.headers['content-security-policy-report-only']\n  let nonce: string | undefined\n  if (csp && typeof csp === 'string') {\n    nonce = getScriptNonceFromHeader(csp)\n  }\n\n  const ctx: AppRenderContext = {\n    ...baseCtx,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRSCRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState: shouldProvideFlightRouterState\n      ? parsedFlightRouterState\n      : undefined,\n    requestId,\n    defaultRevalidate: false,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    flightDataRendererErrorHandler,\n    serverComponentsErrorHandler,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  if (isRSCRequest && !isStaticGeneration) {\n    return generateFlight(ctx)\n  }\n\n  // Create the resolver that can get the flight payload when it's ready or\n  // throw the error if it occurred. If we are not generating static HTML, we\n  // don't need to generate the flight payload because it's a dynamic request\n  // which means we're either getting the flight payload only or just the\n  // regular HTML.\n  const flightDataResolver = isStaticGeneration\n    ? createFlightDataResolver(ctx)\n    : null\n\n  const validateRootLayout = dev\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  // On each render, create a new `ServerInsertedHTML` context to capture\n  // injected nodes from user code (`useServerInsertedHTML`).\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  getTracer().getRootSpanAttributes()?.set('next.route', pagePath)\n\n  const renderToStream = getTracer().wrap(\n    AppRenderSpan.getBodyResult,\n    {\n      spanName: `render route (app) ${pagePath}`,\n      attributes: {\n        'next.route': pagePath,\n      },\n    },\n    async ({\n      asNotFound,\n      tree,\n      formState,\n    }: RenderToStreamOptions): Promise<RenderToStreamResult> => {\n      const tracingMetadata = getTracedMetadata(\n        getTracer().getTracePropagationData(),\n        renderOpts.experimental.clientTraceMetadata\n      )\n\n      const polyfills: JSX.IntrinsicElements['script'][] =\n        buildManifest.polyfillFiles\n          .filter(\n            (polyfill) =>\n              polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n          )\n          .map((polyfill) => ({\n            src: `${assetPrefix}/_next/${polyfill}${getAssetQueryString(\n              ctx,\n              false\n            )}`,\n            integrity: subresourceIntegrityManifest?.[polyfill],\n            crossOrigin: renderOpts.crossOrigin,\n            noModule: true,\n            nonce,\n          }))\n\n      const [preinitScripts, bootstrapScript] = getRequiredScripts(\n        buildManifest,\n        assetPrefix,\n        renderOpts.crossOrigin,\n        subresourceIntegrityManifest,\n        getAssetQueryString(ctx, true),\n        nonce\n      )\n\n      // We kick off the Flight Request (render) here. It is ok to initiate the render in an arbitrary\n      // place however it is critical that we only construct the Flight Response inside the SSR\n      // render so that directives like preloads are correctly piped through\n      const serverStream = ComponentMod.renderToReadableStream(\n        <ReactServerApp tree={tree} ctx={ctx} asNotFound={asNotFound} />,\n        clientReferenceManifest.clientModules,\n        {\n          onError: serverComponentsErrorHandler,\n          nonce,\n        }\n      )\n\n      // We are going to consume this render both for SSR and for inlining the flight data\n      let [renderStream, dataStream] = serverStream.tee()\n\n      const children = (\n        <HeadManagerContext.Provider\n          value={{\n            appDir: true,\n            nonce,\n          }}\n        >\n          <ServerInsertedHTMLProvider>\n            <ReactServerEntrypoint\n              reactServerStream={renderStream}\n              preinitScripts={preinitScripts}\n              clientReferenceManifest={clientReferenceManifest}\n              nonce={nonce}\n            />\n          </ServerInsertedHTMLProvider>\n        </HeadManagerContext.Provider>\n      )\n\n      const isResume = !!renderOpts.postponed\n\n      const onHeaders =\n        // During prerenders, we want to capture the headers created so we can\n        // persist them to the metadata.\n        staticGenerationStore.prerenderState ||\n        // During static generation and during resumes we don't\n        // ask React to emit headers. For Resume this is just not supported\n        // For static generation we know there will be an entire HTML document\n        // output and so moving from tag to header for preloading can only\n        // server to alter preloading priorities in unwanted ways\n        (!isStaticGeneration && !isResume)\n          ? (headers: Headers) => {\n              headers.forEach((value, key) => {\n                setHeader(key, value)\n              })\n            }\n          : undefined\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      const renderer = createStaticRenderer({\n        isRoutePPREnabled,\n        isStaticGeneration,\n        // If provided, the postpone state should be parsed as JSON so it can be\n        // provided to React.\n        postponed:\n          typeof renderOpts.postponed === 'string'\n            ? JSON.parse(renderOpts.postponed)\n            : null,\n        streamOptions: {\n          onError: htmlRendererErrorHandler,\n          onHeaders,\n          maxHeadersLength: 600,\n          nonce,\n          bootstrapScripts: [bootstrapScript],\n          formState,\n        },\n      })\n\n      try {\n        let { stream, postponed, resumed } = await renderer.render(children)\n\n        const prerenderState = staticGenerationStore.prerenderState\n        if (prerenderState) {\n          /**\n           * When prerendering there are three outcomes to consider\n           *\n           *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n           *                      We will need to resume this result when requests are handled and we don't include\n           *                      any server inserted HTML or inlined flight data in the static HTML\n           *\n           *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n           *                      resume this render when requests are handled but we will generate new inlined\n           *                      flight data since it is dynamic and differences may end up reconciling on the client\n           *\n           *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n           *                      all server inserted HTML and flight data\n           */\n\n          // First we check if we have any dynamic holes in our HTML prerender\n          if (usedDynamicAPIs(prerenderState)) {\n            if (postponed != null) {\n              // This is the Dynamic HTML case.\n              metadata.postponed = JSON.stringify(\n                getDynamicHTMLPostponedState(postponed)\n              )\n            } else {\n              // This is the Dynamic Data case\n              metadata.postponed = JSON.stringify(\n                getDynamicDataPostponedState()\n              )\n            }\n            // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n            // server inserted html in the static response because the html that is part of the prerender may depend on it\n            // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n            // require the same set so we unify the code path here\n            return {\n              stream: await continueDynamicPrerender(stream, {\n                getServerInsertedHTML,\n              }),\n            }\n          } else {\n            // We may still be rendering the RSC stream even though the HTML is finished.\n            // We wait for the RSC stream to complete and check again if dynamic was used\n            const [original, flightSpy] = dataStream.tee()\n            dataStream = original\n\n            await flightRenderComplete(flightSpy)\n\n            if (usedDynamicAPIs(prerenderState)) {\n              // This is the same logic above just repeated after ensuring the RSC stream itself has completed\n              if (postponed != null) {\n                // This is the Dynamic HTML case.\n                metadata.postponed = JSON.stringify(\n                  getDynamicHTMLPostponedState(postponed)\n                )\n              } else {\n                // This is the Dynamic Data case\n                metadata.postponed = JSON.stringify(\n                  getDynamicDataPostponedState()\n                )\n              }\n              // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n              // server inserted html in the static response because the html that is part of the prerender may depend on it\n              // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n              // require the same set so we unify the code path here\n              return {\n                stream: await continueDynamicPrerender(stream, {\n                  getServerInsertedHTML,\n                }),\n              }\n            } else {\n              // This is the Static case\n              // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n              let renderedHTMLStream = stream\n\n              if (staticGenerationStore.forceDynamic) {\n                throw new StaticGenBailoutError(\n                  'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n                )\n              }\n\n              if (postponed != null) {\n                // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n                // so we can set all the postponed boundaries to client render mode before we store the HTML response\n                const resumeRenderer = createStaticRenderer({\n                  isRoutePPREnabled,\n                  isStaticGeneration: false,\n                  postponed: getDynamicHTMLPostponedState(postponed),\n                  streamOptions: {\n                    signal: createPostponedAbortSignal(\n                      'static prerender resume'\n                    ),\n                    onError: htmlRendererErrorHandler,\n                    nonce,\n                  },\n                })\n\n                // We don't actually want to render anything so we just pass a stream\n                // that never resolves. The resume call is going to abort immediately anyway\n                const foreverStream = new ReadableStream<Uint8Array>()\n\n                const resumeChildren = (\n                  <HeadManagerContext.Provider\n                    value={{\n                      appDir: true,\n                      nonce,\n                    }}\n                  >\n                    <ServerInsertedHTMLProvider>\n                      <ReactServerEntrypoint\n                        reactServerStream={foreverStream}\n                        preinitScripts={() => {}}\n                        clientReferenceManifest={clientReferenceManifest}\n                        nonce={nonce}\n                      />\n                    </ServerInsertedHTMLProvider>\n                  </HeadManagerContext.Provider>\n                )\n\n                const { stream: resumeStream } =\n                  await resumeRenderer.render(resumeChildren)\n                // First we write everything from the prerender, then we write everything from the aborted resume render\n                renderedHTMLStream = chainStreams(stream, resumeStream)\n              }\n\n              return {\n                stream: await continueStaticPrerender(renderedHTMLStream, {\n                  inlinedDataStream: createInlinedDataReadableStream(\n                    dataStream,\n                    nonce,\n                    formState\n                  ),\n                  getServerInsertedHTML,\n                }),\n              }\n            }\n          }\n        } else if (renderOpts.postponed) {\n          // This is a continuation of either an Incomplete or Dynamic Data Prerender.\n          const inlinedDataStream = createInlinedDataReadableStream(\n            dataStream,\n            nonce,\n            formState\n          )\n          if (resumed) {\n            // We have new HTML to stream and we also need to include server inserted HTML\n            return {\n              stream: await continueDynamicHTMLResume(stream, {\n                inlinedDataStream,\n                getServerInsertedHTML,\n              }),\n            }\n          } else {\n            // We are continuing a Dynamic Data Prerender and simply need to append new inlined flight data\n            return {\n              stream: await continueDynamicDataResume(stream, {\n                inlinedDataStream,\n              }),\n            }\n          }\n        } else {\n          // This may be a static render or a dynamic render\n          // @TODO factor this further to make the render types more clearly defined and remove\n          // the deluge of optional params that passed to configure the various behaviors\n          return {\n            stream: await continueFizzStream(stream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                dataStream,\n                nonce,\n                formState\n              ),\n              isStaticGeneration: isStaticGeneration || generateStaticHTML,\n              getServerInsertedHTML,\n              serverInsertedHTMLToHead: true,\n              validateRootLayout,\n            }),\n          }\n        }\n      } catch (err) {\n        if (\n          isStaticGenBailoutError(err) ||\n          (typeof err === 'object' &&\n            err !== null &&\n            'message' in err &&\n            typeof err.message === 'string' &&\n            err.message.includes(\n              'https://nextjs.org/docs/advanced-features/static-html-export'\n            ))\n        ) {\n          // Ensure that \"next dev\" prints the red error overlay\n          throw err\n        }\n\n        // If this is a static generation error, we need to throw it so that it\n        // can be handled by the caller if we're in static generation mode.\n        if (isStaticGeneration && isDynamicServerError(err)) {\n          throw err\n        }\n\n        // If a bailout made it to this point, it means it wasn't wrapped inside\n        // a suspense boundary.\n        const shouldBailoutToCSR = isBailoutToCSRError(err)\n        if (shouldBailoutToCSR) {\n          const stack = getStackWithoutErrorMessage(err)\n          error(\n            `${err.reason} should be wrapped in a suspense boundary at page \"${pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n          )\n\n          throw err\n        }\n\n        if (isNotFoundError(err)) {\n          res.statusCode = 404\n        }\n        let hasRedirectError = false\n        if (isRedirectError(err)) {\n          hasRedirectError = true\n          res.statusCode = getRedirectStatusCodeFromError(err)\n          if (err.mutableCookies) {\n            const headers = new Headers()\n\n            // If there were mutable cookies set, we need to set them on the\n            // response.\n            if (appendMutableCookies(headers, err.mutableCookies)) {\n              setHeader('set-cookie', Array.from(headers.values()))\n            }\n          }\n          const redirectUrl = addPathPrefix(\n            getURLFromRedirectError(err),\n            renderOpts.basePath\n          )\n          setHeader('Location', redirectUrl)\n        }\n\n        const is404 = res.statusCode === 404\n        if (!is404 && !hasRedirectError && !shouldBailoutToCSR) {\n          res.statusCode = 500\n        }\n\n        const errorType = is404\n          ? 'not-found'\n          : hasRedirectError\n            ? 'redirect'\n            : undefined\n\n        const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n          buildManifest,\n          assetPrefix,\n          renderOpts.crossOrigin,\n          subresourceIntegrityManifest,\n          getAssetQueryString(ctx, false),\n          nonce\n        )\n\n        const errorServerStream = ComponentMod.renderToReadableStream(\n          <ReactServerError tree={tree} ctx={ctx} errorType={errorType} />,\n          clientReferenceManifest.clientModules,\n          {\n            onError: serverComponentsErrorHandler,\n            nonce,\n          }\n        )\n\n        try {\n          const fizzStream = await renderToInitialFizzStream({\n            ReactDOMServer: require('react-dom/server.edge'),\n            element: (\n              <ReactServerEntrypoint\n                reactServerStream={errorServerStream}\n                preinitScripts={errorPreinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                nonce={nonce}\n              />\n            ),\n            streamOptions: {\n              nonce,\n              // Include hydration scripts in the HTML\n              bootstrapScripts: [errorBootstrapScript],\n              formState,\n            },\n          })\n\n          return {\n            // Returning the error that was thrown so it can be used to handle\n            // the response in the caller.\n            err,\n            stream: await continueFizzStream(fizzStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                // This is intentionally using the readable datastream from the\n                // main render rather than the flight data from the error page\n                // render\n                dataStream,\n                nonce,\n                formState\n              ),\n              isStaticGeneration,\n              getServerInsertedHTML: makeGetServerInsertedHTML({\n                polyfills,\n                renderServerInsertedHTML,\n                serverCapturedErrors: [],\n                basePath: renderOpts.basePath,\n                tracingMetadata: tracingMetadata,\n              }),\n              serverInsertedHTMLToHead: true,\n              validateRootLayout,\n            }),\n          }\n        } catch (finalErr: any) {\n          if (\n            process.env.NODE_ENV === 'development' &&\n            isNotFoundError(finalErr)\n          ) {\n            const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n              require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n            bailOnNotFound()\n          }\n          throw finalErr\n        }\n      }\n    }\n  )\n\n  // For action requests, we handle them differently with a special render result.\n  const actionRequestResult = await handleAction({\n    req,\n    res,\n    ComponentMod,\n    serverModuleMap,\n    generateFlight,\n    staticGenerationStore,\n    requestStore,\n    serverActions,\n    ctx,\n  })\n\n  let formState: null | any = null\n  if (actionRequestResult) {\n    if (actionRequestResult.type === 'not-found') {\n      const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n      const response = await renderToStream({\n        asNotFound: true,\n        tree: notFoundLoaderTree,\n        formState,\n      })\n\n      return new RenderResult(response.stream, { metadata })\n    } else if (actionRequestResult.type === 'done') {\n      if (actionRequestResult.result) {\n        actionRequestResult.result.assignMetadata(metadata)\n        return actionRequestResult.result\n      } else if (actionRequestResult.formState) {\n        formState = actionRequestResult.formState\n      }\n    }\n  }\n\n  const options: RenderResultOptions = {\n    metadata,\n  }\n\n  let response = await renderToStream({\n    asNotFound: isNotFoundPath,\n    tree: loaderTree,\n    formState,\n  })\n\n  // If we have pending revalidates, wait until they are all resolved.\n  if (staticGenerationStore.pendingRevalidates) {\n    options.waitUntil = Promise.all([\n      staticGenerationStore.incrementalCache?.revalidateTag(\n        staticGenerationStore.revalidatedTags || []\n      ),\n      ...Object.values(staticGenerationStore.pendingRevalidates || {}),\n    ])\n  }\n\n  addImplicitTags(staticGenerationStore)\n\n  if (staticGenerationStore.tags) {\n    metadata.fetchTags = staticGenerationStore.tags.join(',')\n  }\n\n  // Create the new render result for the response.\n  const result = new RenderResult(response.stream, options)\n\n  // If we aren't performing static generation, we can return the result now.\n  if (!isStaticGeneration) {\n    return result\n  }\n\n  // If this is static generation, we should read this in now rather than\n  // sending it back to be sent to the client.\n  response.stream = await result.toUnchunkedString(true)\n\n  const buildFailingError =\n    digestErrorsMap.size > 0 ? digestErrorsMap.values().next().value : null\n\n  // If we're debugging partial prerendering, print all the dynamic API accesses\n  // that occurred during the render.\n  if (\n    staticGenerationStore.prerenderState &&\n    usedDynamicAPIs(staticGenerationStore.prerenderState) &&\n    staticGenerationStore.prerenderState?.isDebugSkeleton\n  ) {\n    warn('The following dynamic usage was detected:')\n    for (const access of formatDynamicAPIAccesses(\n      staticGenerationStore.prerenderState\n    )) {\n      warn(access)\n    }\n  }\n\n  if (!flightDataResolver) {\n    throw new Error(\n      'Invariant: Flight data resolver is missing when generating static HTML'\n    )\n  }\n\n  // If we encountered any unexpected errors during build we fail the\n  // prerendering phase and the build.\n  if (buildFailingError) {\n    throw buildFailingError\n  }\n\n  // Wait for and collect the flight payload data if we don't have it\n  // already\n  const flightData = await flightDataResolver()\n  if (flightData) {\n    metadata.flightData = flightData\n  }\n\n  // If force static is specifically set to false, we should not revalidate\n  // the page.\n  if (staticGenerationStore.forceStatic === false) {\n    staticGenerationStore.revalidate = 0\n  }\n\n  // Copy the revalidation value onto the render result metadata.\n  metadata.revalidate =\n    staticGenerationStore.revalidate ?? ctx.defaultRevalidate\n\n  // provide bailout info for debugging\n  if (metadata.revalidate === 0) {\n    metadata.staticBailoutInfo = {\n      description: staticGenerationStore.dynamicUsageDescription,\n      stack: staticGenerationStore.dynamicUsageStack,\n    }\n  }\n\n  return new RenderResult(response.stream, options)\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  renderOpts\n) => {\n  // TODO: this includes query string, should it?\n  const pathname = validateURL(req.url)\n\n  return RequestAsyncStorageWrapper.wrap(\n    renderOpts.ComponentMod.requestAsyncStorage,\n    { req, res, renderOpts },\n    (requestStore) =>\n      StaticGenerationAsyncStorageWrapper.wrap(\n        renderOpts.ComponentMod.staticGenerationAsyncStorage,\n        {\n          urlPathname: pathname,\n          renderOpts,\n          requestEndedState: { ended: false },\n        },\n        (staticGenerationStore) =>\n          renderToHTMLOrFlightImpl(\n            req,\n            res,\n            pagePath,\n            query,\n            renderOpts,\n            {\n              requestStore,\n              staticGenerationStore,\n              componentMod: renderOpts.ComponentMod,\n              renderOpts,\n            },\n            staticGenerationStore.requestEndedState || {}\n          )\n      )\n  )\n}\n"],"names":["React","RenderResult","chainStreams","renderToInitialFizzStream","continueFizzStream","continueDynamicPrerender","continueStaticPrerender","continueDynamicHTMLResume","continueDynamicDataResume","canSegmentBeOverridden","stripInternalQueries","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_STATE_TREE","NEXT_URL","RSC_HEADER","createMetadataComponents","RequestAsyncStorageWrapper","StaticGenerationAsyncStorageWrapper","isNotFoundError","getURLFromRedirectError","isRedirectError","getRedirectStatusCodeFromError","addImplicitTags","AppRenderSpan","NextNodeServerSpan","getTracer","FlightRenderResult","createErrorHandler","ErrorHandlerSource","getShortDynamicParamType","dynamicParamTypes","getSegmentParam","getScriptNonceFromHeader","parseAndValidateFlightRouterState","validateURL","createFlightRouterStateFromLoaderTree","handleAction","isBailoutToCSRError","warn","error","appendMutableCookies","createServerInsertedHTML","getRequiredScripts","addPathPrefix","getTracedMetadata","makeGetServerInsertedHTML","walkTreeWithFlightRouterState","createComponentTree","getAssetQueryString","setReferenceManifestsSingleton","createStaticRenderer","getDynamicDataPostponedState","getDynamicHTMLPostponedState","isDynamicServerError","useFlightStream","createInlinedDataReadableStream","flightRenderComplete","StaticGenBailoutError","isStaticGenBailoutError","isInterceptionRouteAppPath","getStackWithoutErrorMessage","usedDynamicAPIs","createPostponedAbortSignal","formatDynamicAPIAccesses","getClientComponentLoaderMetrics","wrapClientComponentLoader","createServerModuleMap","isNodeNextRequest","parseParameter","createNotFoundLoaderTree","loaderTree","findDynamicParamFromRouterState","flightRouterState","segment","treeSegment","Array","isArray","param","value","type","parallelRouterState","Object","values","maybeDynamicParam","makeGetDynamicParamFromSegment","params","pagePath","getDynamicParamFromSegment","segmentParam","key","undefined","map","i","encodeURIComponent","isCatchall","isOptionalCatchall","dynamicParamType","split","slice","flatMap","pathSegment","join","generateFlight","ctx","options","flightData","componentMod","tree","renderToReadableStream","createDynamicallyTrackedSearchParams","appUsingSizeAdjustment","staticGenerationStore","urlPathname","query","requestId","skipFlight","MetadataTree","MetadataOutlet","pathname","trailingSlash","renderOpts","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","asNotFound","isNotFoundPath","metadataOutlet","path","buildIdFlightDataPair","buildId","flightReadableStream","actionResult","clientReferenceManifest","clientModules","onError","flightDataRendererErrorHandler","nonce","createFlightDataResolver","promise","then","result","toUnchunkedString","catch","err","ReactServerApp","missingSlots","AppRouter","GlobalError","initialTree","errorType","seedData","styles","firstItem","varyHeader","res","getHeader","couldBeIntercepted","includes","assetPrefix","initialCanonicalUrl","initialSeedData","initialHead","statusCode","meta","name","content","globalErrorComponent","ReactServerError","head","process","env","NODE_ENV","html","id","body","ReactServerEntrypoint","reactServerStream","preinitScripts","response","use","renderToHTMLOrFlightImpl","req","baseCtx","requestEndedState","requestTimestamp","Date","now","buildManifest","subresourceIntegrityManifest","serverActionsManifest","ComponentMod","dev","nextFontManifest","supportsDynamicHTML","serverActions","appDirDevErrorLogger","enableTainting","__next_app__","instrumented","globalThis","__next_require__","require","__next_chunk_load__","loadChunk","NEXT_RUNTIME","originalRequest","on","ended","metrics","reset","startSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","pageName","page","digestErrorsMap","Map","allCapturedErrors","isNextExport","nextExport","requestStore","isStaticGeneration","setHeader","headers","bind","isRoutePPREnabled","experimental","silenceStaticGenerationErrors","serverComponentsErrorHandler","source","serverComponents","errorLogger","silenceLogger","htmlRendererErrorHandler","patchFetch","after","patchCacheScopeSupportIntoReact","generateStaticHTML","taintObjectReference","fetchMetrics","isRSCRequest","toLowerCase","isPrefetchRSCRequest","shouldProvideFlightRouterState","parsedFlightRouterState","crypto","randomUUID","nanoid","csp","isPrefetch","defaultRevalidate","flightDataResolver","validateRootLayout","HeadManagerContext","ServerInsertedHTMLProvider","renderServerInsertedHTML","getRootSpanAttributes","set","renderToStream","wrap","getBodyResult","spanName","formState","tracingMetadata","getTracePropagationData","clientTraceMetadata","polyfills","polyfillFiles","filter","polyfill","endsWith","src","integrity","crossOrigin","noModule","bootstrapScript","serverStream","renderStream","dataStream","tee","children","Provider","appDir","isResume","postponed","onHeaders","prerenderState","forEach","getServerInsertedHTML","serverCapturedErrors","basePath","renderer","JSON","parse","streamOptions","maxHeadersLength","bootstrapScripts","stream","resumed","render","stringify","original","flightSpy","renderedHTMLStream","forceDynamic","resumeRenderer","signal","foreverStream","ReadableStream","resumeChildren","resumeStream","inlinedDataStream","serverInsertedHTMLToHead","message","shouldBailoutToCSR","stack","reason","hasRedirectError","mutableCookies","Headers","from","redirectUrl","is404","errorPreinitScripts","errorBootstrapScript","errorServerStream","fizzStream","ReactDOMServer","element","finalErr","bailOnNotFound","actionRequestResult","notFoundLoaderTree","assignMetadata","pendingRevalidates","waitUntil","Promise","all","incrementalCache","revalidateTag","revalidatedTags","tags","fetchTags","buildFailingError","size","next","isDebugSkeleton","access","Error","forceStatic","revalidate","staticBailoutInfo","description","dynamicUsageDescription","dynamicUsageStack","renderToHTMLOrFlight","url","requestAsyncStorage","staticGenerationAsyncStorage"],"rangeMappingsmappings":"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"}