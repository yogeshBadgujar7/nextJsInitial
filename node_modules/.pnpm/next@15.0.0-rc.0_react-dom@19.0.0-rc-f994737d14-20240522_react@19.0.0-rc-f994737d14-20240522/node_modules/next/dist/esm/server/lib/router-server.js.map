{"version":3,"sources":["../../../src/server/lib/router-server.ts"],"sourcesContent":["// this must come first as it includes require hooks\nimport type { WorkerRequestHandler, WorkerUpgradeHandler } from './types'\nimport type { DevBundler } from './router-utils/setup-dev-bundler'\nimport type { NextUrlWithParsedQuery } from '../request-meta'\nimport type { NextServer } from '../next'\n\n// This is required before other imports to ensure the require hook is setup.\nimport '../node-environment'\nimport '../require-hook'\n\nimport url from 'url'\nimport path from 'path'\nimport loadConfig from '../config'\nimport { serveStatic } from '../serve-static'\nimport setupDebug from 'next/dist/compiled/debug'\nimport { DecodeError } from '../../shared/lib/utils'\nimport { findPagesDir } from '../../lib/find-pages-dir'\nimport { setupFsCheck } from './router-utils/filesystem'\nimport { proxyRequest } from './router-utils/proxy-request'\nimport { isAbortError, pipeToNodeResponse } from '../pipe-readable'\nimport { getResolveRoutes } from './router-utils/resolve-routes'\nimport { getRequestMeta } from '../request-meta'\nimport { pathHasPrefix } from '../../shared/lib/router/utils/path-has-prefix'\nimport { removePathPrefix } from '../../shared/lib/router/utils/remove-path-prefix'\nimport setupCompression from 'next/dist/compiled/compression'\nimport { NoFallbackError } from '../base-server'\nimport { signalFromNodeResponse } from '../web/spec-extension/adapters/next-request'\nimport { isPostpone } from './router-utils/is-postpone'\nimport { parseUrl as parseUrlUtil } from '../../shared/lib/router/utils/parse-url'\n\nimport {\n  PHASE_PRODUCTION_SERVER,\n  PHASE_DEVELOPMENT_SERVER,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../../shared/lib/constants'\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\nimport { DevBundlerService } from './dev-bundler-service'\nimport { type Span, trace } from '../../trace'\nimport { ensureLeadingSlash } from '../../shared/lib/page-path/ensure-leading-slash'\nimport { getNextPathnameInfo } from '../../shared/lib/router/utils/get-next-pathname-info'\nimport { getHostname } from '../../shared/lib/get-hostname'\nimport { detectDomainLocale } from '../../shared/lib/i18n/detect-domain-locale'\nimport { MockedResponse } from './mock-request'\n\nconst debug = setupDebug('next:router-server:main')\nconst isNextFont = (pathname: string | null) =>\n  pathname && /\\/media\\/[^/]+\\.(woff|woff2|eot|ttf|otf)$/.test(pathname)\n\nexport type RenderServer = Pick<\n  typeof import('./render-server'),\n  | 'initialize'\n  | 'deleteCache'\n  | 'clearModuleContext'\n  | 'deleteAppClientCache'\n  | 'propagateServerField'\n>\n\nexport interface LazyRenderServerInstance {\n  instance?: RenderServer\n}\n\nconst requestHandlers: Record<string, WorkerRequestHandler> = {}\n\nexport async function initialize(opts: {\n  dir: string\n  port: number\n  dev: boolean\n  server?: import('http').Server\n  minimalMode?: boolean\n  hostname?: string\n  isNodeDebugging: boolean\n  keepAliveTimeout?: number\n  customServer?: boolean\n  experimentalHttpsServer?: boolean\n  startServerSpan?: Span\n  quiet?: boolean\n}): Promise<[WorkerRequestHandler, WorkerUpgradeHandler, NextServer]> {\n  if (!process.env.NODE_ENV) {\n    // @ts-ignore not readonly\n    process.env.NODE_ENV = opts.dev ? 'development' : 'production'\n  }\n\n  const config = await loadConfig(\n    opts.dev ? PHASE_DEVELOPMENT_SERVER : PHASE_PRODUCTION_SERVER,\n    opts.dir,\n    { silent: false }\n  )\n\n  let compress: ReturnType<typeof setupCompression> | undefined\n\n  if (config?.compress !== false) {\n    compress = setupCompression()\n  }\n\n  const fsChecker = await setupFsCheck({\n    dev: opts.dev,\n    dir: opts.dir,\n    config,\n    minimalMode: opts.minimalMode,\n  })\n\n  const renderServer: LazyRenderServerInstance = {}\n\n  let developmentBundler: DevBundler | undefined\n\n  let devBundlerService: DevBundlerService | undefined\n\n  if (opts.dev) {\n    const { Telemetry } =\n      require('../../telemetry/storage') as typeof import('../../telemetry/storage')\n\n    const telemetry = new Telemetry({\n      distDir: path.join(opts.dir, config.distDir),\n    })\n    const { pagesDir, appDir } = findPagesDir(opts.dir)\n\n    const { setupDevBundler } =\n      require('./router-utils/setup-dev-bundler') as typeof import('./router-utils/setup-dev-bundler')\n\n    const setupDevBundlerSpan = opts.startServerSpan\n      ? opts.startServerSpan.traceChild('setup-dev-bundler')\n      : trace('setup-dev-bundler')\n    developmentBundler = await setupDevBundlerSpan.traceAsyncFn(() =>\n      setupDevBundler({\n        // Passed here but the initialization of this object happens below, doing the initialization before the setupDev call breaks.\n        renderServer,\n        appDir,\n        pagesDir,\n        telemetry,\n        fsChecker,\n        dir: opts.dir,\n        nextConfig: config,\n        isCustomServer: opts.customServer,\n        turbo: !!process.env.TURBOPACK,\n        port: opts.port,\n      })\n    )\n\n    devBundlerService = new DevBundlerService(\n      developmentBundler,\n      // The request handler is assigned below, this allows us to create a lazy\n      // reference to it.\n      (req, res) => {\n        return requestHandlers[opts.dir](req, res)\n      }\n    )\n  }\n\n  renderServer.instance =\n    require('./render-server') as typeof import('./render-server')\n\n  const requestHandlerImpl: WorkerRequestHandler = async (req, res) => {\n    if (\n      !opts.minimalMode &&\n      config.i18n &&\n      config.i18n.localeDetection !== false\n    ) {\n      const urlParts = (req.url || '').split('?', 1)\n      let urlNoQuery = urlParts[0] || ''\n\n      if (config.basePath) {\n        urlNoQuery = removePathPrefix(urlNoQuery, config.basePath)\n      }\n\n      const pathnameInfo = getNextPathnameInfo(urlNoQuery, {\n        nextConfig: config,\n      })\n\n      const domainLocale = detectDomainLocale(\n        config.i18n.domains,\n        getHostname({ hostname: urlNoQuery }, req.headers)\n      )\n\n      const defaultLocale =\n        domainLocale?.defaultLocale || config.i18n.defaultLocale\n\n      const { getLocaleRedirect } =\n        require('../../shared/lib/i18n/get-locale-redirect') as typeof import('../../shared/lib/i18n/get-locale-redirect')\n\n      const parsedUrl = parseUrlUtil((req.url || '')?.replace(/^\\/+/, '/'))\n\n      const redirect = getLocaleRedirect({\n        defaultLocale,\n        domainLocale,\n        headers: req.headers,\n        nextConfig: config,\n        pathLocale: pathnameInfo.locale,\n        urlParsed: {\n          ...parsedUrl,\n          pathname: pathnameInfo.locale\n            ? `/${pathnameInfo.locale}${urlNoQuery}`\n            : urlNoQuery,\n        },\n      })\n\n      if (redirect) {\n        res.setHeader('Location', redirect)\n        res.statusCode = RedirectStatusCode.TemporaryRedirect\n        res.end(redirect)\n        return\n      }\n    }\n\n    if (compress) {\n      // @ts-expect-error not express req/res\n      compress(req, res, () => {})\n    }\n    req.on('error', (_err) => {\n      // TODO: log socket errors?\n    })\n    res.on('error', (_err) => {\n      // TODO: log socket errors?\n    })\n\n    const invokedOutputs = new Set<string>()\n\n    async function invokeRender(\n      parsedUrl: NextUrlWithParsedQuery,\n      invokePath: string,\n      handleIndex: number,\n      additionalInvokeHeaders: Record<string, string> = {}\n    ) {\n      // invokeRender expects /api routes to not be locale prefixed\n      // so normalize here before continuing\n      if (\n        config.i18n &&\n        removePathPrefix(invokePath, config.basePath).startsWith(\n          `/${parsedUrl.query.__nextLocale}/api`\n        )\n      ) {\n        invokePath = fsChecker.handleLocale(\n          removePathPrefix(invokePath, config.basePath)\n        ).pathname\n      }\n\n      if (\n        req.headers['x-nextjs-data'] &&\n        fsChecker.getMiddlewareMatchers()?.length &&\n        removePathPrefix(invokePath, config.basePath) === '/404'\n      ) {\n        res.setHeader('x-nextjs-matched-path', parsedUrl.pathname || '')\n        res.statusCode = 404\n        res.setHeader('content-type', 'application/json')\n        res.end('{}')\n        return null\n      }\n\n      if (!handlers) {\n        throw new Error('Failed to initialize render server')\n      }\n\n      const invokeHeaders: typeof req.headers = {\n        ...req.headers,\n        'x-middleware-invoke': '',\n        'x-invoke-path': invokePath,\n        'x-invoke-query': encodeURIComponent(JSON.stringify(parsedUrl.query)),\n        ...(additionalInvokeHeaders || {}),\n      }\n      Object.assign(req.headers, invokeHeaders)\n\n      debug('invokeRender', req.url, invokeHeaders)\n\n      try {\n        const initResult =\n          await renderServer?.instance?.initialize(renderServerOpts)\n        try {\n          await initResult?.requestHandler(req, res)\n        } catch (err) {\n          if (err instanceof NoFallbackError) {\n            // eslint-disable-next-line\n            await handleRequest(handleIndex + 1)\n            return\n          }\n          throw err\n        }\n        return\n      } catch (e) {\n        // If the client aborts before we can receive a response object (when\n        // the headers are flushed), then we can early exit without further\n        // processing.\n        if (isAbortError(e)) {\n          return\n        }\n        throw e\n      }\n    }\n\n    const handleRequest = async (handleIndex: number) => {\n      if (handleIndex > 5) {\n        throw new Error(`Attempted to handle request too many times ${req.url}`)\n      }\n\n      // handle hot-reloader first\n      if (developmentBundler) {\n        const origUrl = req.url || '/'\n\n        if (config.basePath && pathHasPrefix(origUrl, config.basePath)) {\n          req.url = removePathPrefix(origUrl, config.basePath)\n        }\n        const parsedUrl = url.parse(req.url || '/')\n\n        const hotReloaderResult = await developmentBundler.hotReloader.run(\n          req,\n          res,\n          parsedUrl\n        )\n\n        if (hotReloaderResult.finished) {\n          return hotReloaderResult\n        }\n        req.url = origUrl\n      }\n\n      const {\n        finished,\n        parsedUrl,\n        statusCode,\n        resHeaders,\n        bodyStream,\n        matchedOutput,\n      } = await resolveRoutes({\n        req,\n        res,\n        isUpgradeReq: false,\n        signal: signalFromNodeResponse(res),\n        invokedOutputs,\n      })\n\n      if (res.closed || res.finished) {\n        return\n      }\n\n      if (developmentBundler && matchedOutput?.type === 'devVirtualFsItem') {\n        const origUrl = req.url || '/'\n\n        if (config.basePath && pathHasPrefix(origUrl, config.basePath)) {\n          req.url = removePathPrefix(origUrl, config.basePath)\n        }\n\n        if (resHeaders) {\n          for (const key of Object.keys(resHeaders)) {\n            res.setHeader(key, resHeaders[key])\n          }\n        }\n        const result = await developmentBundler.requestHandler(req, res)\n\n        if (result.finished) {\n          return\n        }\n        // TODO: throw invariant if we resolved to this but it wasn't handled?\n        req.url = origUrl\n      }\n\n      debug('requestHandler!', req.url, {\n        matchedOutput,\n        statusCode,\n        resHeaders,\n        bodyStream: !!bodyStream,\n        parsedUrl: {\n          pathname: parsedUrl.pathname,\n          query: parsedUrl.query,\n        },\n        finished,\n      })\n\n      // apply any response headers from routing\n      for (const key of Object.keys(resHeaders || {})) {\n        res.setHeader(key, resHeaders[key])\n      }\n\n      // handle redirect\n      if (!bodyStream && statusCode && statusCode > 300 && statusCode < 400) {\n        const destination = url.format(parsedUrl)\n        res.statusCode = statusCode\n        res.setHeader('location', destination)\n\n        if (statusCode === RedirectStatusCode.PermanentRedirect) {\n          res.setHeader('Refresh', `0;url=${destination}`)\n        }\n        return res.end(destination)\n      }\n\n      // handle middleware body response\n      if (bodyStream) {\n        res.statusCode = statusCode || 200\n        return await pipeToNodeResponse(bodyStream, res)\n      }\n\n      if (finished && parsedUrl.protocol) {\n        return await proxyRequest(\n          req,\n          res,\n          parsedUrl,\n          undefined,\n          getRequestMeta(req, 'clonableBody')?.cloneBodyStream(),\n          config.experimental.proxyTimeout\n        )\n      }\n\n      if (matchedOutput?.fsPath && matchedOutput.itemPath) {\n        if (\n          opts.dev &&\n          (fsChecker.appFiles.has(matchedOutput.itemPath) ||\n            fsChecker.pageFiles.has(matchedOutput.itemPath))\n        ) {\n          res.statusCode = 500\n          await invokeRender(parsedUrl, '/_error', handleIndex, {\n            'x-invoke-status': '500',\n            'x-invoke-error': JSON.stringify({\n              message: `A conflicting public file and page file was found for path ${matchedOutput.itemPath} https://nextjs.org/docs/messages/conflicting-public-file-page`,\n            }),\n          })\n          return\n        }\n\n        if (\n          !res.getHeader('cache-control') &&\n          matchedOutput.type === 'nextStaticFolder'\n        ) {\n          if (opts.dev && !isNextFont(parsedUrl.pathname)) {\n            res.setHeader('Cache-Control', 'no-store, must-revalidate')\n          } else {\n            res.setHeader(\n              'Cache-Control',\n              'public, max-age=31536000, immutable'\n            )\n          }\n        }\n        if (!(req.method === 'GET' || req.method === 'HEAD')) {\n          res.setHeader('Allow', ['GET', 'HEAD'])\n          res.statusCode = 405\n          return await invokeRender(\n            url.parse('/405', true),\n            '/405',\n            handleIndex,\n            {\n              'x-invoke-status': '405',\n            }\n          )\n        }\n\n        try {\n          return await serveStatic(req, res, matchedOutput.itemPath, {\n            root: matchedOutput.itemsRoot,\n            // Ensures that etags are not generated for static files when disabled.\n            etag: config.generateEtags,\n          })\n        } catch (err: any) {\n          /**\n           * Hardcoded every possible error status code that could be thrown by \"serveStatic\" method\n           * This is done by searching \"this.error\" inside \"send\" module's source code:\n           * https://github.com/pillarjs/send/blob/master/index.js\n           * https://github.com/pillarjs/send/blob/develop/index.js\n           */\n          const POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC = new Set([\n            // send module will throw 500 when header is already sent or fs.stat error happens\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L392\n            // Note: we will use Next.js built-in 500 page to handle 500 errors\n            // 500,\n\n            // send module will throw 404 when file is missing\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L421\n            // Note: we will use Next.js built-in 404 page to handle 404 errors\n            // 404,\n\n            // send module will throw 403 when redirecting to a directory without enabling directory listing\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L484\n            // Note: Next.js throws a different error (without status code) for directory listing\n            // 403,\n\n            // send module will throw 400 when fails to normalize the path\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L520\n            400,\n\n            // send module will throw 412 with conditional GET request\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L632\n            412,\n\n            // send module will throw 416 when range is not satisfiable\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L669\n            416,\n          ])\n\n          let validErrorStatus = POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC.has(\n            err.statusCode\n          )\n\n          // normalize non-allowed status codes\n          if (!validErrorStatus) {\n            ;(err as any).statusCode = 400\n          }\n\n          if (typeof err.statusCode === 'number') {\n            const invokePath = `/${err.statusCode}`\n            const invokeStatus = `${err.statusCode}`\n            res.statusCode = err.statusCode\n            return await invokeRender(\n              url.parse(invokePath, true),\n              invokePath,\n              handleIndex,\n              {\n                'x-invoke-status': invokeStatus,\n              }\n            )\n          }\n          throw err\n        }\n      }\n\n      if (matchedOutput) {\n        invokedOutputs.add(matchedOutput.itemPath)\n\n        return await invokeRender(\n          parsedUrl,\n          parsedUrl.pathname || '/',\n          handleIndex,\n          {\n            'x-invoke-output': matchedOutput.itemPath,\n          }\n        )\n      }\n\n      // 404 case\n      res.setHeader(\n        'Cache-Control',\n        'no-cache, no-store, max-age=0, must-revalidate'\n      )\n\n      // Short-circuit favicon.ico serving so that the 404 page doesn't get built as favicon is requested by the browser when loading any route.\n      if (opts.dev && !matchedOutput && parsedUrl.pathname === '/favicon.ico') {\n        res.statusCode = 404\n        res.end('')\n        return null\n      }\n\n      const appNotFound = opts.dev\n        ? developmentBundler?.serverFields.hasAppNotFound\n        : await fsChecker.getItem(UNDERSCORE_NOT_FOUND_ROUTE)\n\n      res.statusCode = 404\n\n      if (appNotFound) {\n        return await invokeRender(\n          parsedUrl,\n          UNDERSCORE_NOT_FOUND_ROUTE,\n          handleIndex,\n          {\n            'x-invoke-status': '404',\n          }\n        )\n      }\n\n      await invokeRender(parsedUrl, '/404', handleIndex, {\n        'x-invoke-status': '404',\n      })\n    }\n\n    try {\n      await handleRequest(0)\n    } catch (err) {\n      try {\n        let invokePath = '/500'\n        let invokeStatus = '500'\n\n        if (err instanceof DecodeError) {\n          invokePath = '/400'\n          invokeStatus = '400'\n        } else {\n          console.error(err)\n        }\n        res.statusCode = Number(invokeStatus)\n        return await invokeRender(url.parse(invokePath, true), invokePath, 0, {\n          'x-invoke-status': invokeStatus,\n        })\n      } catch (err2) {\n        console.error(err2)\n      }\n      res.statusCode = 500\n      res.end('Internal Server Error')\n    }\n  }\n\n  let requestHandler: WorkerRequestHandler = requestHandlerImpl\n  if (config.experimental.testProxy) {\n    // Intercept fetch and other testmode apis.\n    const {\n      wrapRequestHandlerWorker,\n      interceptTestApis,\n    } = require('next/dist/experimental/testmode/server')\n    requestHandler = wrapRequestHandlerWorker(requestHandler)\n    interceptTestApis()\n  }\n  requestHandlers[opts.dir] = requestHandler\n\n  const renderServerOpts: Parameters<RenderServer['initialize']>[0] = {\n    port: opts.port,\n    dir: opts.dir,\n    hostname: opts.hostname,\n    minimalMode: opts.minimalMode,\n    dev: !!opts.dev,\n    server: opts.server,\n    isNodeDebugging: !!opts.isNodeDebugging,\n    serverFields: developmentBundler?.serverFields || {},\n    experimentalTestProxy: !!config.experimental.testProxy,\n    experimentalHttpsServer: !!opts.experimentalHttpsServer,\n    bundlerService: devBundlerService,\n    startServerSpan: opts.startServerSpan,\n    quiet: opts.quiet,\n  }\n  renderServerOpts.serverFields.routerServerHandler = requestHandlerImpl\n\n  // pre-initialize workers\n  const handlers = await renderServer.instance.initialize(renderServerOpts)\n\n  const logError = async (\n    type: 'uncaughtException' | 'unhandledRejection',\n    err: Error | undefined\n  ) => {\n    if (isPostpone(err)) {\n      // React postpones that are unhandled might end up logged here but they're\n      // not really errors. They're just part of rendering.\n      return\n    }\n    await developmentBundler?.logErrorWithOriginalStack(err, type)\n  }\n\n  process.on('uncaughtException', logError.bind(null, 'uncaughtException'))\n  process.on('unhandledRejection', logError.bind(null, 'unhandledRejection'))\n\n  const resolveRoutes = getResolveRoutes(\n    fsChecker,\n    config,\n    opts,\n    renderServer.instance,\n    renderServerOpts,\n    developmentBundler?.ensureMiddleware\n  )\n\n  const upgradeHandler: WorkerUpgradeHandler = async (req, socket, head) => {\n    try {\n      req.on('error', (_err) => {\n        // TODO: log socket errors?\n        // console.error(_err);\n      })\n      socket.on('error', (_err) => {\n        // TODO: log socket errors?\n        // console.error(_err);\n      })\n\n      if (opts.dev && developmentBundler && req.url) {\n        const { basePath, assetPrefix } = config\n\n        const isHMRRequest = req.url.startsWith(\n          ensureLeadingSlash(`${assetPrefix || basePath}/_next/webpack-hmr`)\n        )\n\n        // only handle HMR requests if the basePath in the request\n        // matches the basePath for the handler responding to the request\n        if (isHMRRequest) {\n          return developmentBundler.hotReloader.onHMR(req, socket, head)\n        }\n      }\n\n      const res = new MockedResponse({\n        resWriter: () => {\n          throw new Error(\n            'Invariant: did not expect response writer to be written to for upgrade request'\n          )\n        },\n      })\n      const { matchedOutput, parsedUrl } = await resolveRoutes({\n        req,\n        res,\n        isUpgradeReq: true,\n        signal: signalFromNodeResponse(socket),\n      })\n\n      // TODO: allow upgrade requests to pages/app paths?\n      // this was not previously supported\n      if (matchedOutput) {\n        return socket.end()\n      }\n\n      if (parsedUrl.protocol) {\n        return await proxyRequest(req, socket, parsedUrl, head)\n      }\n\n      // If there's no matched output, we don't handle the request as user's\n      // custom WS server may be listening on the same path.\n    } catch (err) {\n      console.error('Error handling upgrade request', err)\n      socket.end()\n    }\n  }\n\n  return [requestHandler, upgradeHandler, handlers.app]\n}\n"],"names":["url","path","loadConfig","serveStatic","setupDebug","DecodeError","findPagesDir","setupFsCheck","proxyRequest","isAbortError","pipeToNodeResponse","getResolveRoutes","getRequestMeta","pathHasPrefix","removePathPrefix","setupCompression","NoFallbackError","signalFromNodeResponse","isPostpone","parseUrl","parseUrlUtil","PHASE_PRODUCTION_SERVER","PHASE_DEVELOPMENT_SERVER","UNDERSCORE_NOT_FOUND_ROUTE","RedirectStatusCode","DevBundlerService","trace","ensureLeadingSlash","getNextPathnameInfo","getHostname","detectDomainLocale","MockedResponse","debug","isNextFont","pathname","test","requestHandlers","initialize","opts","process","env","NODE_ENV","dev","config","dir","silent","compress","fsChecker","minimalMode","renderServer","developmentBundler","devBundlerService","Telemetry","require","telemetry","distDir","join","pagesDir","appDir","setupDevBundler","setupDevBundlerSpan","startServerSpan","traceChild","traceAsyncFn","nextConfig","isCustomServer","customServer","turbo","TURBOPACK","port","req","res","instance","requestHandlerImpl","i18n","localeDetection","urlParts","split","urlNoQuery","basePath","pathnameInfo","domainLocale","domains","hostname","headers","defaultLocale","getLocaleRedirect","parsedUrl","replace","redirect","pathLocale","locale","urlParsed","setHeader","statusCode","TemporaryRedirect","end","on","_err","invokedOutputs","Set","invokeRender","invokePath","handleIndex","additionalInvokeHeaders","startsWith","query","__nextLocale","handleLocale","getMiddlewareMatchers","length","handlers","Error","invokeHeaders","encodeURIComponent","JSON","stringify","Object","assign","initResult","renderServerOpts","requestHandler","err","handleRequest","e","origUrl","parse","hotReloaderResult","hotReloader","run","finished","resHeaders","bodyStream","matchedOutput","resolveRoutes","isUpgradeReq","signal","closed","type","key","keys","result","destination","format","PermanentRedirect","protocol","undefined","cloneBodyStream","experimental","proxyTimeout","fsPath","itemPath","appFiles","has","pageFiles","message","getHeader","method","root","itemsRoot","etag","generateEtags","POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC","validErrorStatus","invokeStatus","add","appNotFound","serverFields","hasAppNotFound","getItem","console","error","Number","err2","testProxy","wrapRequestHandlerWorker","interceptTestApis","server","isNodeDebugging","experimentalTestProxy","experimentalHttpsServer","bundlerService","quiet","routerServerHandler","logError","logErrorWithOriginalStack","bind","ensureMiddleware","upgradeHandler","socket","head","assetPrefix","isHMRRequest","onHMR","resWriter","app"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}