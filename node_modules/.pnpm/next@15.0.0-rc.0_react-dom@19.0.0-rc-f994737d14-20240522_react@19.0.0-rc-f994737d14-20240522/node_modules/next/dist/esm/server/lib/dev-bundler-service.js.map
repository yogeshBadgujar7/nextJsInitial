{"version":3,"sources":["../../../src/server/lib/dev-bundler-service.ts"],"sourcesContent":["import type { IncomingMessage } from 'http'\nimport type { DevBundler } from './router-utils/setup-dev-bundler'\nimport type { WorkerRequestHandler } from './types'\n\nimport { createRequestResponseMocks } from './mock-request'\n\n/**\n * The DevBundlerService provides an interface to perform tasks with the\n * bundler while in development.\n */\nexport class DevBundlerService {\n  constructor(\n    private readonly bundler: DevBundler,\n    private readonly handler: WorkerRequestHandler\n  ) {}\n\n  public ensurePage: typeof this.bundler.hotReloader.ensurePage = async (\n    definition\n  ) => {\n    // TODO: remove after ensure is pulled out of server\n    return await this.bundler.hotReloader.ensurePage(definition)\n  }\n\n  public logErrorWithOriginalStack: typeof this.bundler.logErrorWithOriginalStack =\n    async (...args) => {\n      return await this.bundler.logErrorWithOriginalStack(...args)\n    }\n\n  public async getFallbackErrorComponents(url?: string) {\n    await this.bundler.hotReloader.buildFallbackError()\n    // Build the error page to ensure the fallback is built too.\n    // TODO: See if this can be moved into hotReloader or removed.\n    await this.bundler.hotReloader.ensurePage({\n      page: '/_error',\n      clientOnly: false,\n      definition: undefined,\n      url,\n    })\n  }\n\n  public async getCompilationError(page: string) {\n    const errors = await this.bundler.hotReloader.getCompilationErrors(page)\n    if (!errors) return\n\n    // Return the very first error we found.\n    return errors[0]\n  }\n\n  public async revalidate({\n    urlPath,\n    revalidateHeaders,\n    opts: revalidateOpts,\n  }: {\n    urlPath: string\n    revalidateHeaders: IncomingMessage['headers']\n    opts: any\n  }) {\n    const mocked = createRequestResponseMocks({\n      url: urlPath,\n      headers: revalidateHeaders,\n    })\n\n    await this.handler(mocked.req, mocked.res)\n    await mocked.res.hasStreamed\n\n    if (\n      mocked.res.getHeader('x-nextjs-cache') !== 'REVALIDATED' &&\n      !(mocked.res.statusCode === 404 && revalidateOpts.unstable_onlyGenerated)\n    ) {\n      throw new Error(`Invalid response ${mocked.res.statusCode}`)\n    }\n\n    return {}\n  }\n}\n"],"names":["createRequestResponseMocks","DevBundlerService","constructor","bundler","handler","ensurePage","definition","hotReloader","logErrorWithOriginalStack","args","getFallbackErrorComponents","url","buildFallbackError","page","clientOnly","undefined","getCompilationError","errors","getCompilationErrors","revalidate","urlPath","revalidateHeaders","opts","revalidateOpts","mocked","headers","req","res","hasStreamed","getHeader","statusCode","unstable_onlyGenerated","Error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAIA,SAASA,0BAA0B,QAAQ,iBAAgB;AAE3D;;;CAGC,GACD,OAAO,MAAMC;IACXC,YACE,AAAiBC,OAAmB,EACpC,AAAiBC,OAA6B,CAC9C;aAFiBD,UAAAA;aACAC,UAAAA;aAGZC,aAAyD,OAC9DC;YAEA,oDAAoD;YACpD,OAAO,MAAM,IAAI,CAACH,OAAO,CAACI,WAAW,CAACF,UAAU,CAACC;QACnD;aAEOE,4BACL,OAAO,GAAGC;YACR,OAAO,MAAM,IAAI,CAACN,OAAO,CAACK,yBAAyB,IAAIC;QACzD;IAZC;IAcH,MAAaC,2BAA2BC,GAAY,EAAE;QACpD,MAAM,IAAI,CAACR,OAAO,CAACI,WAAW,CAACK,kBAAkB;QACjD,4DAA4D;QAC5D,8DAA8D;QAC9D,MAAM,IAAI,CAACT,OAAO,CAACI,WAAW,CAACF,UAAU,CAAC;YACxCQ,MAAM;YACNC,YAAY;YACZR,YAAYS;YACZJ;QACF;IACF;IAEA,MAAaK,oBAAoBH,IAAY,EAAE;QAC7C,MAAMI,SAAS,MAAM,IAAI,CAACd,OAAO,CAACI,WAAW,CAACW,oBAAoB,CAACL;QACnE,IAAI,CAACI,QAAQ;QAEb,wCAAwC;QACxC,OAAOA,MAAM,CAAC,EAAE;IAClB;IAEA,MAAaE,WAAW,EACtBC,OAAO,EACPC,iBAAiB,EACjBC,MAAMC,cAAc,EAKrB,EAAE;QACD,MAAMC,SAASxB,2BAA2B;YACxCW,KAAKS;YACLK,SAASJ;QACX;QAEA,MAAM,IAAI,CAACjB,OAAO,CAACoB,OAAOE,GAAG,EAAEF,OAAOG,GAAG;QACzC,MAAMH,OAAOG,GAAG,CAACC,WAAW;QAE5B,IACEJ,OAAOG,GAAG,CAACE,SAAS,CAAC,sBAAsB,iBAC3C,CAAEL,CAAAA,OAAOG,GAAG,CAACG,UAAU,KAAK,OAAOP,eAAeQ,sBAAsB,AAAD,GACvE;YACA,MAAM,IAAIC,MAAM,CAAC,iBAAiB,EAAER,OAAOG,GAAG,CAACG,UAAU,CAAC,CAAC;QAC7D;QAEA,OAAO,CAAC;IACV;AACF"}