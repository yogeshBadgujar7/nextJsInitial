{"version":3,"sources":["../../../../src/server/lib/router-utils/setup-dev-bundler.ts"],"sourcesContent":["import type { NextConfigComplete } from '../../config-shared'\nimport type { FilesystemDynamicRoute } from './filesystem'\nimport type { UnwrapPromise } from '../../../lib/coalesced-function'\nimport type { MiddlewareMatcher } from '../../../build/analysis/get-page-static-info'\nimport type { MiddlewareRouteMatch } from '../../../shared/lib/router/utils/middleware-route-matcher'\nimport type { PropagateToWorkersField } from './types'\nimport type { NextJsHotReloaderInterface } from '../../dev/hot-reloader-types'\n\nimport { createDefineEnv, type Project } from '../../../build/swc'\nimport fs from 'fs'\nimport url from 'url'\nimport path from 'path'\nimport qs from 'querystring'\nimport Watchpack from 'next/dist/compiled/watchpack'\nimport { loadEnvConfig } from '@next/env'\nimport isError, { type NextError } from '../../../lib/is-error'\nimport findUp from 'next/dist/compiled/find-up'\nimport { buildCustomRoute } from './filesystem'\nimport * as Log from '../../../build/output/log'\nimport HotReloaderWebpack from '../../dev/hot-reloader-webpack'\nimport { setGlobal } from '../../../trace/shared'\nimport type { Telemetry } from '../../../telemetry/storage'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport loadJsConfig from '../../../build/load-jsconfig'\nimport { createValidFileMatcher } from '../find-page-file'\nimport { eventCliSession } from '../../../telemetry/events'\nimport { getDefineEnv } from '../../../build/webpack/plugins/define-env-plugin'\nimport { logAppDirError } from '../../dev/log-app-dir-error'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\nimport {\n  getStaticInfoIncludingLayouts,\n  sortByPageExts,\n} from '../../../build/entries'\nimport { verifyTypeScriptSetup } from '../../../lib/verify-typescript-setup'\nimport { verifyPartytownSetup } from '../../../lib/verify-partytown-setup'\nimport { getRouteRegex } from '../../../shared/lib/router/utils/route-regex'\nimport { normalizeAppPath } from '../../../shared/lib/router/utils/app-paths'\nimport { buildDataRoute } from './build-data-route'\nimport { getRouteMatcher } from '../../../shared/lib/router/utils/route-matcher'\nimport { normalizePathSep } from '../../../shared/lib/page-path/normalize-path-sep'\nimport { createClientRouterFilter } from '../../../lib/create-client-router-filter'\nimport { absolutePathToPage } from '../../../shared/lib/page-path/absolute-path-to-page'\nimport { generateInterceptionRoutesRewrites } from '../../../lib/generate-interception-routes-rewrites'\n\nimport {\n  CLIENT_STATIC_FILES_PATH,\n  COMPILER_NAMES,\n  DEV_CLIENT_PAGES_MANIFEST,\n  DEV_MIDDLEWARE_MANIFEST,\n  PHASE_DEVELOPMENT_SERVER,\n} from '../../../shared/lib/constants'\n\nimport { getMiddlewareRouteMatcher } from '../../../shared/lib/router/utils/middleware-route-matcher'\n\nimport {\n  isMiddlewareFile,\n  NestedMiddlewareError,\n  isInstrumentationHookFile,\n  getPossibleMiddlewareFilenames,\n  getPossibleInstrumentationHookFilenames,\n} from '../../../build/utils'\nimport {\n  createOriginalStackFrame,\n  getSourceById,\n  parseStack,\n} from '../../../client/components/react-dev-overlay/server/middleware'\nimport {\n  batchedTraceSource,\n  createOriginalStackFrame as createOriginalTurboStackFrame,\n} from '../../../client/components/react-dev-overlay/server/middleware-turbopack'\nimport { devPageFiles } from '../../../build/webpack/plugins/next-types-plugin/shared'\nimport type { LazyRenderServerInstance } from '../router-server'\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from '../../dev/hot-reloader-types'\nimport { PAGE_TYPES } from '../../../lib/page-types'\nimport { createHotReloaderTurbopack } from '../../dev/hot-reloader-turbopack'\nimport { getErrorSource } from '../../../shared/lib/error-source'\nimport type { StackFrame } from 'next/dist/compiled/stacktrace-parser'\nimport { generateEncryptionKeyBase64 } from '../../app-render/encryption-utils'\nimport { ModuleBuildError } from '../../dev/turbopack-utils'\n\nexport type SetupOpts = {\n  renderServer: LazyRenderServerInstance\n  dir: string\n  turbo?: boolean\n  appDir?: string\n  pagesDir?: string\n  telemetry: Telemetry\n  isCustomServer?: boolean\n  fsChecker: UnwrapPromise<\n    ReturnType<typeof import('./filesystem').setupFsCheck>\n  >\n  nextConfig: NextConfigComplete\n  port: number\n}\n\nexport type ServerFields = {\n  actualMiddlewareFile?: string | undefined\n  actualInstrumentationHookFile?: string | undefined\n  appPathRoutes?: Record<string, string | string[]>\n  middleware?:\n    | {\n        page: string\n        match: MiddlewareRouteMatch\n        matchers?: MiddlewareMatcher[]\n      }\n    | undefined\n  hasAppNotFound?: boolean\n  interceptionRoutes?: ReturnType<\n    typeof import('./filesystem').buildCustomRoute\n  >[]\n}\n\nasync function verifyTypeScript(opts: SetupOpts) {\n  let usingTypeScript = false\n  const verifyResult = await verifyTypeScriptSetup({\n    dir: opts.dir,\n    distDir: opts.nextConfig.distDir,\n    intentDirs: [opts.pagesDir, opts.appDir].filter(Boolean) as string[],\n    typeCheckPreflight: false,\n    tsconfigPath: opts.nextConfig.typescript.tsconfigPath,\n    disableStaticImages: opts.nextConfig.images.disableStaticImages,\n    hasAppDir: !!opts.appDir,\n    hasPagesDir: !!opts.pagesDir,\n  })\n\n  if (verifyResult.version) {\n    usingTypeScript = true\n  }\n  return usingTypeScript\n}\n\nexport async function propagateServerField(\n  opts: SetupOpts,\n  field: PropagateToWorkersField,\n  args: any\n) {\n  await opts.renderServer?.instance?.propagateServerField(opts.dir, field, args)\n}\n\nasync function startWatcher(opts: SetupOpts) {\n  const { nextConfig, appDir, pagesDir, dir } = opts\n  const { useFileSystemPublicRoutes } = nextConfig\n  const usingTypeScript = await verifyTypeScript(opts)\n\n  const distDir = path.join(opts.dir, opts.nextConfig.distDir)\n\n  setGlobal('distDir', distDir)\n  setGlobal('phase', PHASE_DEVELOPMENT_SERVER)\n\n  const validFileMatcher = createValidFileMatcher(\n    nextConfig.pageExtensions,\n    appDir\n  )\n\n  const serverFields: ServerFields = {}\n\n  const hotReloader: NextJsHotReloaderInterface = opts.turbo\n    ? await createHotReloaderTurbopack(opts, serverFields, distDir)\n    : new HotReloaderWebpack(opts.dir, {\n        appDir,\n        pagesDir,\n        distDir: distDir,\n        config: opts.nextConfig,\n        buildId: 'development',\n        encryptionKey: await generateEncryptionKeyBase64(),\n        telemetry: opts.telemetry,\n        rewrites: opts.fsChecker.rewrites,\n        previewProps: opts.fsChecker.prerenderManifest.preview,\n      })\n\n  await hotReloader.start()\n\n  if (opts.nextConfig.experimental.nextScriptWorkers) {\n    await verifyPartytownSetup(\n      opts.dir,\n      path.join(distDir, CLIENT_STATIC_FILES_PATH)\n    )\n  }\n\n  opts.fsChecker.ensureCallback(async function ensure(item) {\n    if (item.type === 'appFile' || item.type === 'pageFile') {\n      await hotReloader.ensurePage({\n        clientOnly: false,\n        page: item.itemPath,\n        isApp: item.type === 'appFile',\n        definition: undefined,\n      })\n    }\n  })\n\n  let resolved = false\n  let prevSortedRoutes: string[] = []\n\n  await new Promise<void>(async (resolve, reject) => {\n    if (pagesDir) {\n      // Watchpack doesn't emit an event for an empty directory\n      fs.readdir(pagesDir, (_, files) => {\n        if (files?.length) {\n          return\n        }\n\n        if (!resolved) {\n          resolve()\n          resolved = true\n        }\n      })\n    }\n\n    const pages = pagesDir ? [pagesDir] : []\n    const app = appDir ? [appDir] : []\n    const directories = [...pages, ...app]\n\n    const rootDir = pagesDir || appDir\n    const files = [\n      ...getPossibleMiddlewareFilenames(\n        path.join(rootDir!, '..'),\n        nextConfig.pageExtensions\n      ),\n      ...getPossibleInstrumentationHookFilenames(\n        path.join(rootDir!, '..'),\n        nextConfig.pageExtensions\n      ),\n    ]\n    let nestedMiddleware: string[] = []\n\n    const envFiles = [\n      '.env.development.local',\n      '.env.local',\n      '.env.development',\n      '.env',\n    ].map((file) => path.join(dir, file))\n\n    files.push(...envFiles)\n\n    // tsconfig/jsconfig paths hot-reloading\n    const tsconfigPaths = [\n      path.join(dir, 'tsconfig.json'),\n      path.join(dir, 'jsconfig.json'),\n    ] as const\n    files.push(...tsconfigPaths)\n\n    const wp = new Watchpack({\n      ignored: (pathname: string) => {\n        return (\n          !files.some((file) => file.startsWith(pathname)) &&\n          !directories.some(\n            (d) => pathname.startsWith(d) || d.startsWith(pathname)\n          )\n        )\n      },\n    })\n    const fileWatchTimes = new Map()\n    let enabledTypeScript = usingTypeScript\n    let previousClientRouterFilters: any\n    let previousConflictingPagePaths: Set<string> = new Set()\n\n    wp.on('aggregated', async () => {\n      let middlewareMatchers: MiddlewareMatcher[] | undefined\n      const routedPages: string[] = []\n      const knownFiles = wp.getTimeInfoEntries()\n      const appPaths: Record<string, string[]> = {}\n      const pageNameSet = new Set<string>()\n      const conflictingAppPagePaths = new Set<string>()\n      const appPageFilePaths = new Map<string, string>()\n      const pagesPageFilePaths = new Map<string, string>()\n\n      let envChange = false\n      let tsconfigChange = false\n      let conflictingPageChange = 0\n      let hasRootAppNotFound = false\n\n      const { appFiles, pageFiles } = opts.fsChecker\n\n      appFiles.clear()\n      pageFiles.clear()\n      devPageFiles.clear()\n\n      const sortedKnownFiles: string[] = [...knownFiles.keys()].sort(\n        sortByPageExts(nextConfig.pageExtensions)\n      )\n\n      for (const fileName of sortedKnownFiles) {\n        if (\n          !files.includes(fileName) &&\n          !directories.some((d) => fileName.startsWith(d))\n        ) {\n          continue\n        }\n        const meta = knownFiles.get(fileName)\n\n        const watchTime = fileWatchTimes.get(fileName)\n        // If the file is showing up for the first time or the meta.timestamp is changed since last time\n        const watchTimeChange =\n          watchTime === undefined ||\n          (watchTime && watchTime !== meta?.timestamp)\n        fileWatchTimes.set(fileName, meta?.timestamp)\n\n        if (envFiles.includes(fileName)) {\n          if (watchTimeChange) {\n            envChange = true\n          }\n          continue\n        }\n\n        if (tsconfigPaths.includes(fileName)) {\n          if (fileName.endsWith('tsconfig.json')) {\n            enabledTypeScript = true\n          }\n          if (watchTimeChange) {\n            tsconfigChange = true\n          }\n          continue\n        }\n\n        if (\n          meta?.accuracy === undefined ||\n          !validFileMatcher.isPageFile(fileName)\n        ) {\n          continue\n        }\n\n        const isAppPath = Boolean(\n          appDir &&\n            normalizePathSep(fileName).startsWith(\n              normalizePathSep(appDir) + '/'\n            )\n        )\n        const isPagePath = Boolean(\n          pagesDir &&\n            normalizePathSep(fileName).startsWith(\n              normalizePathSep(pagesDir) + '/'\n            )\n        )\n\n        const rootFile = absolutePathToPage(fileName, {\n          dir: dir,\n          extensions: nextConfig.pageExtensions,\n          keepIndex: false,\n          pagesType: PAGE_TYPES.ROOT,\n        })\n\n        if (isMiddlewareFile(rootFile)) {\n          const staticInfo = await getStaticInfoIncludingLayouts({\n            pageFilePath: fileName,\n            config: nextConfig,\n            appDir: appDir,\n            page: rootFile,\n            isDev: true,\n            isInsideAppDir: isAppPath,\n            pageExtensions: nextConfig.pageExtensions,\n          })\n          if (nextConfig.output === 'export') {\n            Log.error(\n              'Middleware cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export'\n            )\n            continue\n          }\n          serverFields.actualMiddlewareFile = rootFile\n          await propagateServerField(\n            opts,\n            'actualMiddlewareFile',\n            serverFields.actualMiddlewareFile\n          )\n          middlewareMatchers = staticInfo.middleware?.matchers || [\n            { regexp: '.*', originalSource: '/:path*' },\n          ]\n          continue\n        }\n        if (\n          isInstrumentationHookFile(rootFile) &&\n          nextConfig.experimental.instrumentationHook\n        ) {\n          serverFields.actualInstrumentationHookFile = rootFile\n          await propagateServerField(\n            opts,\n            'actualInstrumentationHookFile',\n            serverFields.actualInstrumentationHookFile\n          )\n          continue\n        }\n\n        if (fileName.endsWith('.ts') || fileName.endsWith('.tsx')) {\n          enabledTypeScript = true\n        }\n\n        if (!(isAppPath || isPagePath)) {\n          continue\n        }\n\n        // Collect all current filenames for the TS plugin to use\n        devPageFiles.add(fileName)\n\n        let pageName = absolutePathToPage(fileName, {\n          dir: isAppPath ? appDir! : pagesDir!,\n          extensions: nextConfig.pageExtensions,\n          keepIndex: isAppPath,\n          pagesType: isAppPath ? PAGE_TYPES.APP : PAGE_TYPES.PAGES,\n        })\n\n        if (\n          !isAppPath &&\n          pageName.startsWith('/api/') &&\n          nextConfig.output === 'export'\n        ) {\n          Log.error(\n            'API Routes cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export'\n          )\n          continue\n        }\n\n        if (isAppPath) {\n          const isRootNotFound = validFileMatcher.isRootNotFound(fileName)\n          hasRootAppNotFound = true\n\n          if (isRootNotFound) {\n            continue\n          }\n          if (!isRootNotFound && !validFileMatcher.isAppRouterPage(fileName)) {\n            continue\n          }\n          // Ignore files/directories starting with `_` in the app directory\n          if (normalizePathSep(pageName).includes('/_')) {\n            continue\n          }\n\n          const originalPageName = pageName\n          pageName = normalizeAppPath(pageName).replace(/%5F/g, '_')\n          if (!appPaths[pageName]) {\n            appPaths[pageName] = []\n          }\n          appPaths[pageName].push(originalPageName)\n\n          if (useFileSystemPublicRoutes) {\n            appFiles.add(pageName)\n          }\n\n          if (routedPages.includes(pageName)) {\n            continue\n          }\n        } else {\n          if (useFileSystemPublicRoutes) {\n            pageFiles.add(pageName)\n            // always add to nextDataRoutes for now but in future only add\n            // entries that actually use getStaticProps/getServerSideProps\n            opts.fsChecker.nextDataRoutes.add(pageName)\n          }\n        }\n        ;(isAppPath ? appPageFilePaths : pagesPageFilePaths).set(\n          pageName,\n          fileName\n        )\n\n        if (appDir && pageNameSet.has(pageName)) {\n          conflictingAppPagePaths.add(pageName)\n        } else {\n          pageNameSet.add(pageName)\n        }\n\n        /**\n         * If there is a middleware that is not declared in the root we will\n         * warn without adding it so it doesn't make its way into the system.\n         */\n        if (/[\\\\\\\\/]_middleware$/.test(pageName)) {\n          nestedMiddleware.push(pageName)\n          continue\n        }\n\n        routedPages.push(pageName)\n      }\n\n      const numConflicting = conflictingAppPagePaths.size\n      conflictingPageChange = numConflicting - previousConflictingPagePaths.size\n\n      if (conflictingPageChange !== 0) {\n        if (numConflicting > 0) {\n          let errorMessage = `Conflicting app and page file${\n            numConflicting === 1 ? ' was' : 's were'\n          } found, please remove the conflicting files to continue:\\n`\n\n          for (const p of conflictingAppPagePaths) {\n            const appPath = path.relative(dir, appPageFilePaths.get(p)!)\n            const pagesPath = path.relative(dir, pagesPageFilePaths.get(p)!)\n            errorMessage += `  \"${pagesPath}\" - \"${appPath}\"\\n`\n          }\n          hotReloader.setHmrServerError(new Error(errorMessage))\n        } else if (numConflicting === 0) {\n          hotReloader.clearHmrServerError()\n          await propagateServerField(opts, 'reloadMatchers', undefined)\n        }\n      }\n\n      previousConflictingPagePaths = conflictingAppPagePaths\n\n      let clientRouterFilters: any\n      if (nextConfig.experimental.clientRouterFilter) {\n        clientRouterFilters = createClientRouterFilter(\n          Object.keys(appPaths),\n          nextConfig.experimental.clientRouterFilterRedirects\n            ? ((nextConfig as any)._originalRedirects || []).filter(\n                (r: any) => !r.internal\n              )\n            : [],\n          nextConfig.experimental.clientRouterFilterAllowedRate\n        )\n\n        if (\n          !previousClientRouterFilters ||\n          JSON.stringify(previousClientRouterFilters) !==\n            JSON.stringify(clientRouterFilters)\n        ) {\n          envChange = true\n          previousClientRouterFilters = clientRouterFilters\n        }\n      }\n\n      if (!usingTypeScript && enabledTypeScript) {\n        // we tolerate the error here as this is best effort\n        // and the manual install command will be shown\n        await verifyTypeScript(opts)\n          .then(() => {\n            tsconfigChange = true\n          })\n          .catch(() => {})\n      }\n\n      if (envChange || tsconfigChange) {\n        if (envChange) {\n          // only log changes in router server\n          loadEnvConfig(dir, true, Log, true, (envFilePath) => {\n            Log.info(`Reload env: ${envFilePath}`)\n          })\n          await propagateServerField(opts, 'loadEnvConfig', [\n            { dev: true, forceReload: true, silent: true },\n          ])\n        }\n        let tsconfigResult:\n          | UnwrapPromise<ReturnType<typeof loadJsConfig>>\n          | undefined\n\n        if (tsconfigChange) {\n          try {\n            tsconfigResult = await loadJsConfig(dir, nextConfig)\n          } catch (_) {\n            /* do we want to log if there are syntax errors in tsconfig  while editing? */\n          }\n        }\n\n        if (hotReloader.turbopackProject) {\n          const hasRewrites =\n            opts.fsChecker.rewrites.afterFiles.length > 0 ||\n            opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n            opts.fsChecker.rewrites.fallback.length > 0\n\n          await hotReloader.turbopackProject.update({\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config: nextConfig,\n              dev: true,\n              distDir,\n              fetchCacheKeyPrefix:\n                opts.nextConfig.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // TODO: Implement\n              middlewareMatchers: undefined,\n            }),\n          })\n        }\n\n        hotReloader.activeWebpackConfigs?.forEach((config, idx) => {\n          const isClient = idx === 0\n          const isNodeServer = idx === 1\n          const isEdgeServer = idx === 2\n          const hasRewrites =\n            opts.fsChecker.rewrites.afterFiles.length > 0 ||\n            opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n            opts.fsChecker.rewrites.fallback.length > 0\n\n          if (tsconfigChange) {\n            config.resolve?.plugins?.forEach((plugin: any) => {\n              // look for the JsConfigPathsPlugin and update with\n              // the latest paths/baseUrl config\n              if (plugin && plugin.jsConfigPlugin && tsconfigResult) {\n                const { resolvedBaseUrl, jsConfig } = tsconfigResult\n                const currentResolvedBaseUrl = plugin.resolvedBaseUrl\n                const resolvedUrlIndex = config.resolve?.modules?.findIndex(\n                  (item) => item === currentResolvedBaseUrl\n                )\n\n                if (resolvedBaseUrl) {\n                  if (\n                    resolvedBaseUrl.baseUrl !== currentResolvedBaseUrl.baseUrl\n                  ) {\n                    // remove old baseUrl and add new one\n                    if (resolvedUrlIndex && resolvedUrlIndex > -1) {\n                      config.resolve?.modules?.splice(resolvedUrlIndex, 1)\n                    }\n\n                    // If the resolvedBaseUrl is implicit we only remove the previous value.\n                    // Only add the baseUrl if it's explicitly set in tsconfig/jsconfig\n                    if (!resolvedBaseUrl.isImplicit) {\n                      config.resolve?.modules?.push(resolvedBaseUrl.baseUrl)\n                    }\n                  }\n                }\n\n                if (jsConfig?.compilerOptions?.paths && resolvedBaseUrl) {\n                  Object.keys(plugin.paths).forEach((key) => {\n                    delete plugin.paths[key]\n                  })\n                  Object.assign(plugin.paths, jsConfig.compilerOptions.paths)\n                  plugin.resolvedBaseUrl = resolvedBaseUrl\n                }\n              }\n            })\n          }\n\n          if (envChange) {\n            config.plugins?.forEach((plugin: any) => {\n              // we look for the DefinePlugin definitions so we can\n              // update them on the active compilers\n              if (\n                plugin &&\n                typeof plugin.definitions === 'object' &&\n                plugin.definitions.__NEXT_DEFINE_ENV\n              ) {\n                const newDefine = getDefineEnv({\n                  isTurbopack: false,\n                  clientRouterFilters,\n                  config: nextConfig,\n                  dev: true,\n                  distDir,\n                  fetchCacheKeyPrefix:\n                    opts.nextConfig.experimental.fetchCacheKeyPrefix,\n                  hasRewrites,\n                  isClient,\n                  isEdgeServer,\n                  isNodeOrEdgeCompilation: isNodeServer || isEdgeServer,\n                  isNodeServer,\n                  middlewareMatchers: undefined,\n                })\n\n                Object.keys(plugin.definitions).forEach((key) => {\n                  if (!(key in newDefine)) {\n                    delete plugin.definitions[key]\n                  }\n                })\n                Object.assign(plugin.definitions, newDefine)\n              }\n            })\n          }\n        })\n        await hotReloader.invalidate({\n          reloadAfterInvalidation: envChange,\n        })\n      }\n\n      if (nestedMiddleware.length > 0) {\n        Log.error(\n          new NestedMiddlewareError(\n            nestedMiddleware,\n            dir,\n            (pagesDir || appDir)!\n          ).message\n        )\n        nestedMiddleware = []\n      }\n\n      // Make sure to sort parallel routes to make the result deterministic.\n      serverFields.appPathRoutes = Object.fromEntries(\n        Object.entries(appPaths).map(([k, v]) => [k, v.sort()])\n      )\n      await propagateServerField(\n        opts,\n        'appPathRoutes',\n        serverFields.appPathRoutes\n      )\n\n      // TODO: pass this to fsChecker/next-dev-server?\n      serverFields.middleware = middlewareMatchers\n        ? {\n            match: null as any,\n            page: '/',\n            matchers: middlewareMatchers,\n          }\n        : undefined\n\n      await propagateServerField(opts, 'middleware', serverFields.middleware)\n      serverFields.hasAppNotFound = hasRootAppNotFound\n\n      opts.fsChecker.middlewareMatcher = serverFields.middleware?.matchers\n        ? getMiddlewareRouteMatcher(serverFields.middleware?.matchers)\n        : undefined\n\n      const interceptionRoutes = generateInterceptionRoutesRewrites(\n        Object.keys(appPaths),\n        opts.nextConfig.basePath\n      ).map((item) =>\n        buildCustomRoute(\n          'before_files_rewrite',\n          item,\n          opts.nextConfig.basePath,\n          opts.nextConfig.experimental.caseSensitiveRoutes\n        )\n      )\n\n      opts.fsChecker.rewrites.beforeFiles.push(...interceptionRoutes)\n\n      const exportPathMap =\n        (typeof nextConfig.exportPathMap === 'function' &&\n          (await nextConfig.exportPathMap?.(\n            {},\n            {\n              dev: true,\n              dir: opts.dir,\n              outDir: null,\n              distDir: distDir,\n              buildId: 'development',\n            }\n          ))) ||\n        {}\n\n      const exportPathMapEntries = Object.entries(exportPathMap || {})\n\n      if (exportPathMapEntries.length > 0) {\n        opts.fsChecker.exportPathMapRoutes = exportPathMapEntries.map(\n          ([key, value]) =>\n            buildCustomRoute(\n              'before_files_rewrite',\n              {\n                source: key,\n                destination: `${value.page}${\n                  value.query ? '?' : ''\n                }${qs.stringify(value.query)}`,\n              },\n              opts.nextConfig.basePath,\n              opts.nextConfig.experimental.caseSensitiveRoutes\n            )\n        )\n      }\n\n      try {\n        // we serve a separate manifest with all pages for the client in\n        // dev mode so that we can match a page after a rewrite on the client\n        // before it has been built and is populated in the _buildManifest\n        const sortedRoutes = getSortedRoutes(routedPages)\n\n        opts.fsChecker.dynamicRoutes = sortedRoutes.map(\n          (page): FilesystemDynamicRoute => {\n            const regex = getRouteRegex(page)\n            return {\n              regex: regex.re.toString(),\n              match: getRouteMatcher(regex),\n              page,\n            }\n          }\n        )\n\n        const dataRoutes: typeof opts.fsChecker.dynamicRoutes = []\n\n        for (const page of sortedRoutes) {\n          const route = buildDataRoute(page, 'development')\n          const routeRegex = getRouteRegex(route.page)\n          dataRoutes.push({\n            ...route,\n            regex: routeRegex.re.toString(),\n            match: getRouteMatcher({\n              // TODO: fix this in the manifest itself, must also be fixed in\n              // upstream builder that relies on this\n              re: opts.nextConfig.i18n\n                ? new RegExp(\n                    route.dataRouteRegex.replace(\n                      `/development/`,\n                      `/development/(?<nextLocale>[^/]+?)/`\n                    )\n                  )\n                : new RegExp(route.dataRouteRegex),\n              groups: routeRegex.groups,\n            }),\n          })\n        }\n        opts.fsChecker.dynamicRoutes.unshift(...dataRoutes)\n\n        if (!prevSortedRoutes?.every((val, idx) => val === sortedRoutes[idx])) {\n          const addedRoutes = sortedRoutes.filter(\n            (route) => !prevSortedRoutes.includes(route)\n          )\n          const removedRoutes = prevSortedRoutes.filter(\n            (route) => !sortedRoutes.includes(route)\n          )\n\n          // emit the change so clients fetch the update\n          hotReloader.send({\n            action: HMR_ACTIONS_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE,\n            data: [\n              {\n                devPagesManifest: true,\n              },\n            ],\n          })\n\n          addedRoutes.forEach((route) => {\n            hotReloader.send({\n              action: HMR_ACTIONS_SENT_TO_BROWSER.ADDED_PAGE,\n              data: [route],\n            })\n          })\n\n          removedRoutes.forEach((route) => {\n            hotReloader.send({\n              action: HMR_ACTIONS_SENT_TO_BROWSER.REMOVED_PAGE,\n              data: [route],\n            })\n          })\n        }\n        prevSortedRoutes = sortedRoutes\n\n        if (!resolved) {\n          resolve()\n          resolved = true\n        }\n      } catch (e) {\n        if (!resolved) {\n          reject(e)\n          resolved = true\n        } else {\n          Log.warn('Failed to reload dynamic routes:', e)\n        }\n      } finally {\n        // Reload the matchers. The filesystem would have been written to,\n        // and the matchers need to re-scan it to update the router.\n        await propagateServerField(opts, 'reloadMatchers', undefined)\n      }\n    })\n\n    wp.watch({ directories: [dir], startTime: 0 })\n  })\n\n  const clientPagesManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${DEV_CLIENT_PAGES_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(clientPagesManifestPath)\n\n  const devMiddlewareManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${DEV_MIDDLEWARE_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(devMiddlewareManifestPath)\n\n  async function requestHandler(req: IncomingMessage, res: ServerResponse) {\n    const parsedUrl = url.parse(req.url || '/')\n\n    if (parsedUrl.pathname?.includes(clientPagesManifestPath)) {\n      res.statusCode = 200\n      res.setHeader('Content-Type', 'application/json; charset=utf-8')\n      res.end(\n        JSON.stringify({\n          pages: prevSortedRoutes.filter(\n            (route) => !opts.fsChecker.appFiles.has(route)\n          ),\n        })\n      )\n      return { finished: true }\n    }\n\n    if (parsedUrl.pathname?.includes(devMiddlewareManifestPath)) {\n      res.statusCode = 200\n      res.setHeader('Content-Type', 'application/json; charset=utf-8')\n      res.end(JSON.stringify(serverFields.middleware?.matchers || []))\n      return { finished: true }\n    }\n    return { finished: false }\n  }\n\n  async function logErrorWithOriginalStack(\n    err: unknown,\n    type?: 'unhandledRejection' | 'uncaughtException' | 'warning' | 'app-dir'\n  ) {\n    let usedOriginalStack = false\n\n    if (isError(err) && err.stack) {\n      try {\n        const frames = parseStack(err.stack!)\n        // Filter out internal edge related runtime stack\n        const frame = frames.find(\n          ({ file }) =>\n            !file?.startsWith('eval') &&\n            !file?.includes('web/adapter') &&\n            !file?.includes('web/globals') &&\n            !file?.includes('sandbox/context') &&\n            !file?.includes('<anonymous>')\n        )\n\n        let originalFrame, isEdgeCompiler\n        const frameFile = frame?.file\n        if (frame?.lineNumber && frameFile) {\n          if (hotReloader.turbopackProject) {\n            try {\n              originalFrame = await createOriginalTurboStackFrame(\n                hotReloader.turbopackProject,\n                {\n                  file: frameFile,\n                  methodName: frame.methodName,\n                  line: frame.lineNumber ?? 0,\n                  column: frame.column,\n                  isServer: true,\n                }\n              )\n            } catch {}\n          } else {\n            const moduleId = frameFile.replace(\n              /^(webpack-internal:\\/\\/\\/|file:\\/\\/)/,\n              ''\n            )\n            const modulePath = frameFile.replace(\n              /^(webpack-internal:\\/\\/\\/|file:\\/\\/)(\\(.*\\)\\/)?/,\n              ''\n            )\n\n            const src = getErrorSource(err as Error)\n            isEdgeCompiler = src === COMPILER_NAMES.edgeServer\n            const compilation = (\n              isEdgeCompiler\n                ? hotReloader.edgeServerStats?.compilation\n                : hotReloader.serverStats?.compilation\n            )!\n\n            const source = await getSourceById(\n              !!frame.file?.startsWith(path.sep) ||\n                !!frame.file?.startsWith('file:'),\n              moduleId,\n              compilation\n            )\n\n            try {\n              originalFrame = await createOriginalStackFrame({\n                source,\n                frame,\n                moduleId,\n                modulePath,\n                rootDirectory: opts.dir,\n                errorMessage: err.message,\n                compilation: isEdgeCompiler\n                  ? hotReloader.edgeServerStats?.compilation\n                  : hotReloader.serverStats?.compilation,\n              })\n            } catch {}\n          }\n\n          if (\n            originalFrame?.originalCodeFrame &&\n            originalFrame.originalStackFrame\n          ) {\n            const { originalCodeFrame, originalStackFrame } = originalFrame\n            const { file, lineNumber, column, methodName } = originalStackFrame\n\n            Log[type === 'warning' ? 'warn' : 'error'](\n              `${file} (${lineNumber}:${column}) @ ${methodName}`\n            )\n\n            let errorToLog\n            if (isEdgeCompiler) {\n              errorToLog = err.message\n            } else if (isError(err) && hotReloader.turbopackProject) {\n              const stack = await traceTurbopackErrorStack(\n                hotReloader.turbopackProject,\n                err,\n                frames\n              )\n\n              const error: NextError = new Error(err.message)\n              error.stack = stack\n              error.digest = err.digest\n              errorToLog = error\n            } else {\n              errorToLog = err\n            }\n\n            logError(errorToLog, type)\n            console[type === 'warning' ? 'warn' : 'error'](originalCodeFrame)\n            usedOriginalStack = true\n          }\n        }\n      } catch (_) {\n        // failed to load original stack using source maps\n        // this un-actionable by users so we don't show the\n        // internal error and only show the provided stack\n      }\n    }\n\n    if (!usedOriginalStack) {\n      logError(err, type)\n    }\n  }\n\n  return {\n    serverFields,\n    hotReloader,\n    requestHandler,\n    logErrorWithOriginalStack,\n\n    async ensureMiddleware(requestUrl?: string) {\n      if (!serverFields.actualMiddlewareFile) return\n      return hotReloader.ensurePage({\n        page: serverFields.actualMiddlewareFile,\n        clientOnly: false,\n        definition: undefined,\n        url: requestUrl,\n      })\n    },\n  }\n}\n\nfunction logError(\n  err: unknown,\n  type?: 'unhandledRejection' | 'uncaughtException' | 'warning' | 'app-dir'\n) {\n  if (err instanceof ModuleBuildError) {\n    Log.error(err.message)\n  } else if (type === 'warning') {\n    Log.warn(err)\n  } else if (type === 'app-dir') {\n    logAppDirError(err)\n  } else if (type) {\n    Log.error(`${type}:`, err)\n  } else {\n    Log.error(err)\n  }\n}\n\nexport async function setupDevBundler(opts: SetupOpts) {\n  const isSrcDir = path\n    .relative(opts.dir, opts.pagesDir || opts.appDir || '')\n    .startsWith('src')\n\n  const result = await startWatcher(opts)\n\n  opts.telemetry.record(\n    eventCliSession(\n      path.join(opts.dir, opts.nextConfig.distDir),\n      opts.nextConfig,\n      {\n        webpackVersion: 5,\n        isSrcDir,\n        turboFlag: !!opts.turbo,\n        cliCommand: 'dev',\n        appDir: !!opts.appDir,\n        pagesDir: !!opts.pagesDir,\n        isCustomServer: !!opts.isCustomServer,\n        hasNowJson: !!(await findUp('now.json', { cwd: opts.dir })),\n      }\n    )\n  )\n  return result\n}\n\nexport type DevBundler = Awaited<ReturnType<typeof setupDevBundler>>\n\n// Returns a trace rewritten through Turbopack's sourcemaps\nasync function traceTurbopackErrorStack(\n  project: Project,\n  error: Error,\n  frames: StackFrame[]\n): Promise<string> {\n  let originalFrames = await Promise.all(\n    frames.map(async (f) => {\n      try {\n        const traced = await batchedTraceSource(project, {\n          file: f.file!,\n          methodName: f.methodName,\n          line: f.lineNumber ?? 0,\n          column: f.column,\n          isServer: true,\n        })\n\n        return traced?.frame ?? f\n      } catch {\n        return f\n      }\n    })\n  )\n\n  return (\n    error.name +\n    ': ' +\n    error.message +\n    '\\n' +\n    originalFrames\n      .map((f) => {\n        if (f == null) {\n          return null\n        }\n\n        let line = '    at'\n        if (f.methodName != null) {\n          line += ' ' + f.methodName\n        }\n\n        if (f.file != null) {\n          const file =\n            f.file.startsWith('/') ||\n            // Built-in \"filenames\" like `<anonymous>` shouldn't be made relative\n            f.file.startsWith('<') ||\n            f.file.startsWith('node:')\n              ? f.file\n              : `./${f.file}`\n\n          line += ` (${file}`\n          if (f.lineNumber != null) {\n            line += ':' + f.lineNumber\n\n            if (f.column != null) {\n              line += ':' + f.column\n            }\n          }\n          line += ')'\n        }\n\n        return line\n      })\n      .filter(Boolean)\n      .join('\\n')\n  )\n}\n"],"names":["createDefineEnv","fs","url","path","qs","Watchpack","loadEnvConfig","isError","findUp","buildCustomRoute","Log","HotReloaderWebpack","setGlobal","loadJsConfig","createValidFileMatcher","eventCliSession","getDefineEnv","logAppDirError","getSortedRoutes","getStaticInfoIncludingLayouts","sortByPageExts","verifyTypeScriptSetup","verifyPartytownSetup","getRouteRegex","normalizeAppPath","buildDataRoute","getRouteMatcher","normalizePathSep","createClientRouterFilter","absolutePathToPage","generateInterceptionRoutesRewrites","CLIENT_STATIC_FILES_PATH","COMPILER_NAMES","DEV_CLIENT_PAGES_MANIFEST","DEV_MIDDLEWARE_MANIFEST","PHASE_DEVELOPMENT_SERVER","getMiddlewareRouteMatcher","isMiddlewareFile","NestedMiddlewareError","isInstrumentationHookFile","getPossibleMiddlewareFilenames","getPossibleInstrumentationHookFilenames","createOriginalStackFrame","getSourceById","parseStack","batchedTraceSource","createOriginalTurboStackFrame","devPageFiles","HMR_ACTIONS_SENT_TO_BROWSER","PAGE_TYPES","createHotReloaderTurbopack","getErrorSource","generateEncryptionKeyBase64","ModuleBuildError","verifyTypeScript","opts","usingTypeScript","verifyResult","dir","distDir","nextConfig","intentDirs","pagesDir","appDir","filter","Boolean","typeCheckPreflight","tsconfigPath","typescript","disableStaticImages","images","hasAppDir","hasPagesDir","version","propagateServerField","field","args","renderServer","instance","startWatcher","useFileSystemPublicRoutes","join","validFileMatcher","pageExtensions","serverFields","hotReloader","turbo","config","buildId","encryptionKey","telemetry","rewrites","fsChecker","previewProps","prerenderManifest","preview","start","experimental","nextScriptWorkers","ensureCallback","ensure","item","type","ensurePage","clientOnly","page","itemPath","isApp","definition","undefined","resolved","prevSortedRoutes","Promise","resolve","reject","readdir","_","files","length","pages","app","directories","rootDir","nestedMiddleware","envFiles","map","file","push","tsconfigPaths","wp","ignored","pathname","some","startsWith","d","fileWatchTimes","Map","enabledTypeScript","previousClientRouterFilters","previousConflictingPagePaths","Set","on","middlewareMatchers","routedPages","knownFiles","getTimeInfoEntries","appPaths","pageNameSet","conflictingAppPagePaths","appPageFilePaths","pagesPageFilePaths","envChange","tsconfigChange","conflictingPageChange","hasRootAppNotFound","appFiles","pageFiles","clear","sortedKnownFiles","keys","sort","fileName","includes","meta","get","watchTime","watchTimeChange","timestamp","set","endsWith","accuracy","isPageFile","isAppPath","isPagePath","rootFile","extensions","keepIndex","pagesType","ROOT","staticInfo","pageFilePath","isDev","isInsideAppDir","output","error","actualMiddlewareFile","middleware","matchers","regexp","originalSource","instrumentationHook","actualInstrumentationHookFile","add","pageName","APP","PAGES","isRootNotFound","isAppRouterPage","originalPageName","replace","nextDataRoutes","has","test","numConflicting","size","errorMessage","p","appPath","relative","pagesPath","setHmrServerError","Error","clearHmrServerError","clientRouterFilters","clientRouterFilter","Object","clientRouterFilterRedirects","_originalRedirects","r","internal","clientRouterFilterAllowedRate","JSON","stringify","then","catch","envFilePath","info","dev","forceReload","silent","tsconfigResult","turbopackProject","hasRewrites","afterFiles","beforeFiles","fallback","update","defineEnv","isTurbopack","fetchCacheKeyPrefix","activeWebpackConfigs","forEach","idx","isClient","isNodeServer","isEdgeServer","plugins","plugin","jsConfigPlugin","jsConfig","resolvedBaseUrl","currentResolvedBaseUrl","resolvedUrlIndex","modules","findIndex","baseUrl","splice","isImplicit","compilerOptions","paths","key","assign","definitions","__NEXT_DEFINE_ENV","newDefine","isNodeOrEdgeCompilation","invalidate","reloadAfterInvalidation","message","appPathRoutes","fromEntries","entries","k","v","match","hasAppNotFound","middlewareMatcher","interceptionRoutes","basePath","caseSensitiveRoutes","exportPathMap","outDir","exportPathMapEntries","exportPathMapRoutes","value","source","destination","query","sortedRoutes","dynamicRoutes","regex","re","toString","dataRoutes","route","routeRegex","i18n","RegExp","dataRouteRegex","groups","unshift","every","val","addedRoutes","removedRoutes","send","action","DEV_PAGES_MANIFEST_UPDATE","data","devPagesManifest","ADDED_PAGE","REMOVED_PAGE","e","warn","watch","startTime","clientPagesManifestPath","devVirtualFsItems","devMiddlewareManifestPath","requestHandler","req","res","parsedUrl","parse","statusCode","setHeader","end","finished","logErrorWithOriginalStack","err","usedOriginalStack","stack","frames","frame","find","originalFrame","isEdgeCompiler","frameFile","lineNumber","methodName","line","column","isServer","moduleId","modulePath","src","edgeServer","compilation","edgeServerStats","serverStats","sep","rootDirectory","originalCodeFrame","originalStackFrame","errorToLog","traceTurbopackErrorStack","digest","logError","console","ensureMiddleware","requestUrl","setupDevBundler","isSrcDir","result","record","webpackVersion","turboFlag","cliCommand","isCustomServer","hasNowJson","cwd","project","originalFrames","all","f","traced","name"],"rangeMappingsmappings":"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"}