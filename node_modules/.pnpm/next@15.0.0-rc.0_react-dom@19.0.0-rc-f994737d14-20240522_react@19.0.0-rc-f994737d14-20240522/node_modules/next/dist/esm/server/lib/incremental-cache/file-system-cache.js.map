{"version":3,"sources":["../../../../src/server/lib/incremental-cache/file-system-cache.ts"],"sourcesContent":["import type { RouteMetadata } from '../../../export/routes/types'\nimport type { CacheHandler, CacheHandlerContext, CacheHandlerValue } from './'\nimport type { CacheFs } from '../../../shared/lib/utils'\nimport type { CachedFetchValue } from '../../response-cache'\n\nimport LRUCache from 'next/dist/compiled/lru-cache'\nimport path from '../../../shared/lib/isomorphic/path'\nimport {\n  NEXT_CACHE_TAGS_HEADER,\n  NEXT_DATA_SUFFIX,\n  NEXT_META_SUFFIX,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n} from '../../../lib/constants'\n\ntype FileSystemCacheContext = Omit<\n  CacheHandlerContext,\n  'fs' | 'serverDistDir'\n> & {\n  fs: CacheFs\n  serverDistDir: string\n\n  /**\n   * isAppPPREnabled is true when PPR has been enabled either globally or just for\n   * some pages via the `incremental` option.\n   */\n  isAppPPREnabled: boolean\n}\n\ntype TagsManifest = {\n  version: 1\n  items: { [tag: string]: { revalidatedAt: number } }\n}\nlet memoryCache: LRUCache<string, CacheHandlerValue> | undefined\nlet tagsManifest: TagsManifest | undefined\n\nexport default class FileSystemCache implements CacheHandler {\n  private fs: FileSystemCacheContext['fs']\n  private flushToDisk?: FileSystemCacheContext['flushToDisk']\n  private serverDistDir: FileSystemCacheContext['serverDistDir']\n  private appDir: boolean\n  private pagesDir: boolean\n  private tagsManifestPath?: string\n  private revalidatedTags: string[]\n  private readonly isAppPPREnabled: boolean\n  private debug: boolean\n\n  constructor(ctx: FileSystemCacheContext) {\n    this.fs = ctx.fs\n    this.flushToDisk = ctx.flushToDisk\n    this.serverDistDir = ctx.serverDistDir\n    this.appDir = !!ctx._appDir\n    this.pagesDir = !!ctx._pagesDir\n    this.revalidatedTags = ctx.revalidatedTags\n    this.isAppPPREnabled = ctx.isAppPPREnabled\n    this.debug = !!process.env.NEXT_PRIVATE_DEBUG_CACHE\n\n    if (ctx.maxMemoryCacheSize) {\n      if (!memoryCache) {\n        if (this.debug) {\n          console.log('using memory store for fetch cache')\n        }\n\n        memoryCache = new LRUCache({\n          max: ctx.maxMemoryCacheSize,\n          length({ value }) {\n            if (!value) {\n              return 25\n            } else if (value.kind === 'REDIRECT') {\n              return JSON.stringify(value.props).length\n            } else if (value.kind === 'IMAGE') {\n              throw new Error('invariant image should not be incremental-cache')\n            } else if (value.kind === 'FETCH') {\n              return JSON.stringify(value.data || '').length\n            } else if (value.kind === 'ROUTE') {\n              return value.body.length\n            }\n            // rough estimate of size of cache value\n            return (\n              value.html.length + (JSON.stringify(value.pageData)?.length || 0)\n            )\n          },\n        })\n      }\n    } else if (this.debug) {\n      console.log('not using memory store for fetch cache')\n    }\n\n    if (this.serverDistDir && this.fs) {\n      this.tagsManifestPath = path.join(\n        this.serverDistDir,\n        '..',\n        'cache',\n        'fetch-cache',\n        'tags-manifest.json'\n      )\n\n      this.loadTagsManifestSync()\n    }\n  }\n\n  public resetRequestCache(): void {}\n\n  /**\n   * Load the tags manifest from the file system\n   */\n  private async loadTagsManifest() {\n    if (!this.tagsManifestPath || !this.fs || tagsManifest) return\n    try {\n      tagsManifest = JSON.parse(\n        await this.fs.readFile(this.tagsManifestPath, 'utf8')\n      )\n    } catch (err: any) {\n      tagsManifest = { version: 1, items: {} }\n    }\n    if (this.debug) console.log('loadTagsManifest', tagsManifest)\n  }\n\n  /**\n   * As above, but synchronous for use in the constructor. This is to\n   * preserve the existing behaviour when instantiating the cache handler. Although it's\n   * not ideal to block the main thread it's only called once during startup.\n   */\n  private loadTagsManifestSync() {\n    if (!this.tagsManifestPath || !this.fs || tagsManifest) return\n    try {\n      tagsManifest = JSON.parse(\n        this.fs.readFileSync(this.tagsManifestPath, 'utf8')\n      )\n    } catch (err: any) {\n      tagsManifest = { version: 1, items: {} }\n    }\n    if (this.debug) console.log('loadTagsManifest', tagsManifest)\n  }\n\n  public async revalidateTag(\n    ...args: Parameters<CacheHandler['revalidateTag']>\n  ) {\n    let [tags] = args\n    tags = typeof tags === 'string' ? [tags] : tags\n\n    if (this.debug) {\n      console.log('revalidateTag', tags)\n    }\n\n    if (tags.length === 0) {\n      return\n    }\n\n    // we need to ensure the tagsManifest is refreshed\n    // since separate workers can be updating it at the same\n    // time and we can't flush out of sync data\n    await this.loadTagsManifest()\n    if (!tagsManifest || !this.tagsManifestPath) {\n      return\n    }\n\n    for (const tag of tags) {\n      const data = tagsManifest.items[tag] || {}\n      data.revalidatedAt = Date.now()\n      tagsManifest.items[tag] = data\n    }\n\n    try {\n      await this.fs.mkdir(path.dirname(this.tagsManifestPath))\n      await this.fs.writeFile(\n        this.tagsManifestPath,\n        JSON.stringify(tagsManifest || {})\n      )\n      if (this.debug) {\n        console.log('Updated tags manifest', tagsManifest)\n      }\n    } catch (err: any) {\n      console.warn('Failed to update tags manifest.', err)\n    }\n  }\n\n  public async get(...args: Parameters<CacheHandler['get']>) {\n    const [key, ctx = {}] = args\n    const { tags, softTags, kindHint } = ctx\n    let data = memoryCache?.get(key)\n\n    if (this.debug) {\n      console.log('get', key, tags, kindHint, !!data)\n    }\n\n    // let's check the disk for seed data\n    if (!data && process.env.NEXT_RUNTIME !== 'edge') {\n      try {\n        const filePath = this.getFilePath(`${key}.body`, 'app')\n        const fileData = await this.fs.readFile(filePath)\n        const { mtime } = await this.fs.stat(filePath)\n\n        const meta = JSON.parse(\n          await this.fs.readFile(\n            filePath.replace(/\\.body$/, NEXT_META_SUFFIX),\n            'utf8'\n          )\n        )\n\n        const cacheEntry: CacheHandlerValue = {\n          lastModified: mtime.getTime(),\n          value: {\n            kind: 'ROUTE',\n            body: fileData,\n            headers: meta.headers,\n            status: meta.status,\n          },\n        }\n        return cacheEntry\n      } catch (_) {\n        // no .meta data for the related key\n      }\n\n      try {\n        // Determine the file kind if we didn't know it already.\n        let kind = kindHint\n        if (!kind) {\n          kind = this.detectFileKind(`${key}.html`)\n        }\n\n        const isAppPath = kind === 'app'\n        const filePath = this.getFilePath(\n          kind === 'fetch' ? key : `${key}.html`,\n          kind\n        )\n\n        const fileData = await this.fs.readFile(filePath, 'utf8')\n        const { mtime } = await this.fs.stat(filePath)\n\n        if (kind === 'fetch' && this.flushToDisk) {\n          const lastModified = mtime.getTime()\n          const parsedData: CachedFetchValue = JSON.parse(fileData)\n          data = {\n            lastModified,\n            value: parsedData,\n          }\n\n          if (data.value?.kind === 'FETCH') {\n            const storedTags = data.value?.tags\n\n            // update stored tags if a new one is being added\n            // TODO: remove this when we can send the tags\n            // via header on GET same as SET\n            if (!tags?.every((tag) => storedTags?.includes(tag))) {\n              if (this.debug) {\n                console.log('tags vs storedTags mismatch', tags, storedTags)\n              }\n              await this.set(key, data.value, { tags })\n            }\n          }\n        } else {\n          const pageData = isAppPath\n            ? await this.fs.readFile(\n                this.getFilePath(\n                  `${key}${\n                    this.isAppPPREnabled ? RSC_PREFETCH_SUFFIX : RSC_SUFFIX\n                  }`,\n                  'app'\n                ),\n                'utf8'\n              )\n            : JSON.parse(\n                await this.fs.readFile(\n                  this.getFilePath(`${key}${NEXT_DATA_SUFFIX}`, 'pages'),\n                  'utf8'\n                )\n              )\n\n          let meta: RouteMetadata | undefined\n\n          if (isAppPath) {\n            try {\n              meta = JSON.parse(\n                await this.fs.readFile(\n                  filePath.replace(/\\.html$/, NEXT_META_SUFFIX),\n                  'utf8'\n                )\n              )\n            } catch {}\n          }\n\n          data = {\n            lastModified: mtime.getTime(),\n            value: {\n              kind: 'PAGE',\n              html: fileData,\n              pageData,\n              postponed: meta?.postponed,\n              headers: meta?.headers,\n              status: meta?.status,\n            },\n          }\n        }\n\n        if (data) {\n          memoryCache?.set(key, data)\n        }\n      } catch (_) {\n        // unable to get data from disk\n      }\n    }\n\n    if (data?.value?.kind === 'PAGE') {\n      let cacheTags: undefined | string[]\n      const tagsHeader = data.value.headers?.[NEXT_CACHE_TAGS_HEADER]\n\n      if (typeof tagsHeader === 'string') {\n        cacheTags = tagsHeader.split(',')\n      }\n\n      if (cacheTags?.length) {\n        await this.loadTagsManifest()\n\n        const isStale = cacheTags.some((tag) => {\n          return (\n            tagsManifest?.items[tag]?.revalidatedAt &&\n            tagsManifest?.items[tag].revalidatedAt >=\n              (data?.lastModified || Date.now())\n          )\n        })\n\n        // we trigger a blocking validation if an ISR page\n        // had a tag revalidated, if we want to be a background\n        // revalidation instead we return data.lastModified = -1\n        if (isStale) {\n          data = undefined\n        }\n      }\n    }\n\n    if (data && data?.value?.kind === 'FETCH') {\n      await this.loadTagsManifest()\n\n      const combinedTags = [...(tags || []), ...(softTags || [])]\n\n      const wasRevalidated = combinedTags.some((tag) => {\n        if (this.revalidatedTags.includes(tag)) {\n          return true\n        }\n\n        return (\n          tagsManifest?.items[tag]?.revalidatedAt &&\n          tagsManifest?.items[tag].revalidatedAt >=\n            (data?.lastModified || Date.now())\n        )\n      })\n      // When revalidate tag is called we don't return\n      // stale data so it's updated right away\n      if (wasRevalidated) {\n        data = undefined\n      }\n    }\n\n    return data ?? null\n  }\n\n  public async set(...args: Parameters<CacheHandler['set']>) {\n    const [key, data, ctx] = args\n    memoryCache?.set(key, {\n      value: data,\n      lastModified: Date.now(),\n    })\n    if (this.debug) {\n      console.log('set', key)\n    }\n\n    if (!this.flushToDisk) return\n\n    if (data?.kind === 'ROUTE') {\n      const filePath = this.getFilePath(`${key}.body`, 'app')\n      await this.fs.mkdir(path.dirname(filePath))\n      await this.fs.writeFile(filePath, data.body)\n\n      const meta: RouteMetadata = {\n        headers: data.headers,\n        status: data.status,\n        postponed: undefined,\n      }\n\n      await this.fs.writeFile(\n        filePath.replace(/\\.body$/, NEXT_META_SUFFIX),\n        JSON.stringify(meta, null, 2)\n      )\n      return\n    }\n\n    if (data?.kind === 'PAGE') {\n      const isAppPath = typeof data.pageData === 'string'\n      const htmlPath = this.getFilePath(\n        `${key}.html`,\n        isAppPath ? 'app' : 'pages'\n      )\n      await this.fs.mkdir(path.dirname(htmlPath))\n      await this.fs.writeFile(htmlPath, data.html)\n\n      await this.fs.writeFile(\n        this.getFilePath(\n          `${key}${\n            isAppPath\n              ? this.isAppPPREnabled\n                ? RSC_PREFETCH_SUFFIX\n                : RSC_SUFFIX\n              : NEXT_DATA_SUFFIX\n          }`,\n          isAppPath ? 'app' : 'pages'\n        ),\n        isAppPath ? data.pageData : JSON.stringify(data.pageData)\n      )\n\n      if (data.headers || data.status) {\n        const meta: RouteMetadata = {\n          headers: data.headers,\n          status: data.status,\n          postponed: data.postponed,\n        }\n\n        await this.fs.writeFile(\n          htmlPath.replace(/\\.html$/, NEXT_META_SUFFIX),\n          JSON.stringify(meta)\n        )\n      }\n    } else if (data?.kind === 'FETCH') {\n      const filePath = this.getFilePath(key, 'fetch')\n      await this.fs.mkdir(path.dirname(filePath))\n      await this.fs.writeFile(\n        filePath,\n        JSON.stringify({\n          ...data,\n          tags: ctx.tags,\n        })\n      )\n    }\n  }\n\n  private detectFileKind(pathname: string) {\n    if (!this.appDir && !this.pagesDir) {\n      throw new Error(\n        \"Invariant: Can't determine file path kind, no page directory enabled\"\n      )\n    }\n\n    // If app directory isn't enabled, then assume it's pages and avoid the fs\n    // hit.\n    if (!this.appDir && this.pagesDir) {\n      return 'pages'\n    }\n    // Otherwise assume it's a pages file if the pages directory isn't enabled.\n    else if (this.appDir && !this.pagesDir) {\n      return 'app'\n    }\n\n    // If both are enabled, we need to test each in order, starting with\n    // `pages`.\n    let filePath = this.getFilePath(pathname, 'pages')\n    if (this.fs.existsSync(filePath)) {\n      return 'pages'\n    }\n\n    filePath = this.getFilePath(pathname, 'app')\n    if (this.fs.existsSync(filePath)) {\n      return 'app'\n    }\n\n    throw new Error(\n      `Invariant: Unable to determine file path kind for ${pathname}`\n    )\n  }\n\n  private getFilePath(\n    pathname: string,\n    kind: 'app' | 'fetch' | 'pages'\n  ): string {\n    switch (kind) {\n      case 'fetch':\n        // we store in .next/cache/fetch-cache so it can be persisted\n        // across deploys\n        return path.join(\n          this.serverDistDir,\n          '..',\n          'cache',\n          'fetch-cache',\n          pathname\n        )\n      case 'pages':\n        return path.join(this.serverDistDir, 'pages', pathname)\n      case 'app':\n        return path.join(this.serverDistDir, 'app', pathname)\n      default:\n        throw new Error(\"Invariant: Can't determine file path kind\")\n    }\n  }\n}\n"],"names":["LRUCache","path","NEXT_CACHE_TAGS_HEADER","NEXT_DATA_SUFFIX","NEXT_META_SUFFIX","RSC_PREFETCH_SUFFIX","RSC_SUFFIX","memoryCache","tagsManifest","FileSystemCache","constructor","ctx","fs","flushToDisk","serverDistDir","appDir","_appDir","pagesDir","_pagesDir","revalidatedTags","isAppPPREnabled","debug","process","env","NEXT_PRIVATE_DEBUG_CACHE","maxMemoryCacheSize","console","log","max","length","value","JSON","kind","stringify","props","Error","data","body","html","pageData","tagsManifestPath","join","loadTagsManifestSync","resetRequestCache","loadTagsManifest","parse","readFile","err","version","items","readFileSync","revalidateTag","args","tags","tag","revalidatedAt","Date","now","mkdir","dirname","writeFile","warn","get","key","softTags","kindHint","NEXT_RUNTIME","filePath","getFilePath","fileData","mtime","stat","meta","replace","cacheEntry","lastModified","getTime","headers","status","_","detectFileKind","isAppPath","parsedData","storedTags","every","includes","set","postponed","cacheTags","tagsHeader","split","isStale","some","undefined","combinedTags","wasRevalidated","htmlPath","pathname","existsSync"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAKA,OAAOA,cAAc,+BAA8B;AACnD,OAAOC,UAAU,sCAAqC;AACtD,SACEC,sBAAsB,EACtBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,UAAU,QACL,yBAAwB;AAoB/B,IAAIC;AACJ,IAAIC;AAEJ,eAAe,MAAMC;IAWnBC,YAAYC,GAA2B,CAAE;QACvC,IAAI,CAACC,EAAE,GAAGD,IAAIC,EAAE;QAChB,IAAI,CAACC,WAAW,GAAGF,IAAIE,WAAW;QAClC,IAAI,CAACC,aAAa,GAAGH,IAAIG,aAAa;QACtC,IAAI,CAACC,MAAM,GAAG,CAAC,CAACJ,IAAIK,OAAO;QAC3B,IAAI,CAACC,QAAQ,GAAG,CAAC,CAACN,IAAIO,SAAS;QAC/B,IAAI,CAACC,eAAe,GAAGR,IAAIQ,eAAe;QAC1C,IAAI,CAACC,eAAe,GAAGT,IAAIS,eAAe;QAC1C,IAAI,CAACC,KAAK,GAAG,CAAC,CAACC,QAAQC,GAAG,CAACC,wBAAwB;QAEnD,IAAIb,IAAIc,kBAAkB,EAAE;YAC1B,IAAI,CAAClB,aAAa;gBAChB,IAAI,IAAI,CAACc,KAAK,EAAE;oBACdK,QAAQC,GAAG,CAAC;gBACd;gBAEApB,cAAc,IAAIP,SAAS;oBACzB4B,KAAKjB,IAAIc,kBAAkB;oBAC3BI,QAAO,EAAEC,KAAK,EAAE;4BAcSC;wBAbvB,IAAI,CAACD,OAAO;4BACV,OAAO;wBACT,OAAO,IAAIA,MAAME,IAAI,KAAK,YAAY;4BACpC,OAAOD,KAAKE,SAAS,CAACH,MAAMI,KAAK,EAAEL,MAAM;wBAC3C,OAAO,IAAIC,MAAME,IAAI,KAAK,SAAS;4BACjC,MAAM,IAAIG,MAAM;wBAClB,OAAO,IAAIL,MAAME,IAAI,KAAK,SAAS;4BACjC,OAAOD,KAAKE,SAAS,CAACH,MAAMM,IAAI,IAAI,IAAIP,MAAM;wBAChD,OAAO,IAAIC,MAAME,IAAI,KAAK,SAAS;4BACjC,OAAOF,MAAMO,IAAI,CAACR,MAAM;wBAC1B;wBACA,wCAAwC;wBACxC,OACEC,MAAMQ,IAAI,CAACT,MAAM,GAAIE,CAAAA,EAAAA,kBAAAA,KAAKE,SAAS,CAACH,MAAMS,QAAQ,sBAA7BR,gBAAgCF,MAAM,KAAI,CAAA;oBAEnE;gBACF;YACF;QACF,OAAO,IAAI,IAAI,CAACR,KAAK,EAAE;YACrBK,QAAQC,GAAG,CAAC;QACd;QAEA,IAAI,IAAI,CAACb,aAAa,IAAI,IAAI,CAACF,EAAE,EAAE;YACjC,IAAI,CAAC4B,gBAAgB,GAAGvC,KAAKwC,IAAI,CAC/B,IAAI,CAAC3B,aAAa,EAClB,MACA,SACA,eACA;YAGF,IAAI,CAAC4B,oBAAoB;QAC3B;IACF;IAEOC,oBAA0B,CAAC;IAElC;;GAEC,GACD,MAAcC,mBAAmB;QAC/B,IAAI,CAAC,IAAI,CAACJ,gBAAgB,IAAI,CAAC,IAAI,CAAC5B,EAAE,IAAIJ,cAAc;QACxD,IAAI;YACFA,eAAeuB,KAAKc,KAAK,CACvB,MAAM,IAAI,CAACjC,EAAE,CAACkC,QAAQ,CAAC,IAAI,CAACN,gBAAgB,EAAE;QAElD,EAAE,OAAOO,KAAU;YACjBvC,eAAe;gBAAEwC,SAAS;gBAAGC,OAAO,CAAC;YAAE;QACzC;QACA,IAAI,IAAI,CAAC5B,KAAK,EAAEK,QAAQC,GAAG,CAAC,oBAAoBnB;IAClD;IAEA;;;;GAIC,GACD,AAAQkC,uBAAuB;QAC7B,IAAI,CAAC,IAAI,CAACF,gBAAgB,IAAI,CAAC,IAAI,CAAC5B,EAAE,IAAIJ,cAAc;QACxD,IAAI;YACFA,eAAeuB,KAAKc,KAAK,CACvB,IAAI,CAACjC,EAAE,CAACsC,YAAY,CAAC,IAAI,CAACV,gBAAgB,EAAE;QAEhD,EAAE,OAAOO,KAAU;YACjBvC,eAAe;gBAAEwC,SAAS;gBAAGC,OAAO,CAAC;YAAE;QACzC;QACA,IAAI,IAAI,CAAC5B,KAAK,EAAEK,QAAQC,GAAG,CAAC,oBAAoBnB;IAClD;IAEA,MAAa2C,cACX,GAAGC,IAA+C,EAClD;QACA,IAAI,CAACC,KAAK,GAAGD;QACbC,OAAO,OAAOA,SAAS,WAAW;YAACA;SAAK,GAAGA;QAE3C,IAAI,IAAI,CAAChC,KAAK,EAAE;YACdK,QAAQC,GAAG,CAAC,iBAAiB0B;QAC/B;QAEA,IAAIA,KAAKxB,MAAM,KAAK,GAAG;YACrB;QACF;QAEA,kDAAkD;QAClD,wDAAwD;QACxD,2CAA2C;QAC3C,MAAM,IAAI,CAACe,gBAAgB;QAC3B,IAAI,CAACpC,gBAAgB,CAAC,IAAI,CAACgC,gBAAgB,EAAE;YAC3C;QACF;QAEA,KAAK,MAAMc,OAAOD,KAAM;YACtB,MAAMjB,OAAO5B,aAAayC,KAAK,CAACK,IAAI,IAAI,CAAC;YACzClB,KAAKmB,aAAa,GAAGC,KAAKC,GAAG;YAC7BjD,aAAayC,KAAK,CAACK,IAAI,GAAGlB;QAC5B;QAEA,IAAI;YACF,MAAM,IAAI,CAACxB,EAAE,CAAC8C,KAAK,CAACzD,KAAK0D,OAAO,CAAC,IAAI,CAACnB,gBAAgB;YACtD,MAAM,IAAI,CAAC5B,EAAE,CAACgD,SAAS,CACrB,IAAI,CAACpB,gBAAgB,EACrBT,KAAKE,SAAS,CAACzB,gBAAgB,CAAC;YAElC,IAAI,IAAI,CAACa,KAAK,EAAE;gBACdK,QAAQC,GAAG,CAAC,yBAAyBnB;YACvC;QACF,EAAE,OAAOuC,KAAU;YACjBrB,QAAQmC,IAAI,CAAC,mCAAmCd;QAClD;IACF;IAEA,MAAae,IAAI,GAAGV,IAAqC,EAAE;YA8HrDhB,aA4BQA;QAzJZ,MAAM,CAAC2B,KAAKpD,MAAM,CAAC,CAAC,CAAC,GAAGyC;QACxB,MAAM,EAAEC,IAAI,EAAEW,QAAQ,EAAEC,QAAQ,EAAE,GAAGtD;QACrC,IAAIyB,OAAO7B,+BAAAA,YAAauD,GAAG,CAACC;QAE5B,IAAI,IAAI,CAAC1C,KAAK,EAAE;YACdK,QAAQC,GAAG,CAAC,OAAOoC,KAAKV,MAAMY,UAAU,CAAC,CAAC7B;QAC5C;QAEA,qCAAqC;QACrC,IAAI,CAACA,QAAQd,QAAQC,GAAG,CAAC2C,YAAY,KAAK,QAAQ;YAChD,IAAI;gBACF,MAAMC,WAAW,IAAI,CAACC,WAAW,CAAC,CAAC,EAAEL,IAAI,KAAK,CAAC,EAAE;gBACjD,MAAMM,WAAW,MAAM,IAAI,CAACzD,EAAE,CAACkC,QAAQ,CAACqB;gBACxC,MAAM,EAAEG,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC1D,EAAE,CAAC2D,IAAI,CAACJ;gBAErC,MAAMK,OAAOzC,KAAKc,KAAK,CACrB,MAAM,IAAI,CAACjC,EAAE,CAACkC,QAAQ,CACpBqB,SAASM,OAAO,CAAC,WAAWrE,mBAC5B;gBAIJ,MAAMsE,aAAgC;oBACpCC,cAAcL,MAAMM,OAAO;oBAC3B9C,OAAO;wBACLE,MAAM;wBACNK,MAAMgC;wBACNQ,SAASL,KAAKK,OAAO;wBACrBC,QAAQN,KAAKM,MAAM;oBACrB;gBACF;gBACA,OAAOJ;YACT,EAAE,OAAOK,GAAG;YACV,oCAAoC;YACtC;YAEA,IAAI;gBACF,wDAAwD;gBACxD,IAAI/C,OAAOiC;gBACX,IAAI,CAACjC,MAAM;oBACTA,OAAO,IAAI,CAACgD,cAAc,CAAC,CAAC,EAAEjB,IAAI,KAAK,CAAC;gBAC1C;gBAEA,MAAMkB,YAAYjD,SAAS;gBAC3B,MAAMmC,WAAW,IAAI,CAACC,WAAW,CAC/BpC,SAAS,UAAU+B,MAAM,CAAC,EAAEA,IAAI,KAAK,CAAC,EACtC/B;gBAGF,MAAMqC,WAAW,MAAM,IAAI,CAACzD,EAAE,CAACkC,QAAQ,CAACqB,UAAU;gBAClD,MAAM,EAAEG,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC1D,EAAE,CAAC2D,IAAI,CAACJ;gBAErC,IAAInC,SAAS,WAAW,IAAI,CAACnB,WAAW,EAAE;wBAQpCuB;oBAPJ,MAAMuC,eAAeL,MAAMM,OAAO;oBAClC,MAAMM,aAA+BnD,KAAKc,KAAK,CAACwB;oBAChDjC,OAAO;wBACLuC;wBACA7C,OAAOoD;oBACT;oBAEA,IAAI9C,EAAAA,eAAAA,KAAKN,KAAK,qBAAVM,aAAYJ,IAAI,MAAK,SAAS;4BACbI;wBAAnB,MAAM+C,cAAa/C,eAAAA,KAAKN,KAAK,qBAAVM,aAAYiB,IAAI;wBAEnC,iDAAiD;wBACjD,8CAA8C;wBAC9C,gCAAgC;wBAChC,IAAI,EAACA,wBAAAA,KAAM+B,KAAK,CAAC,CAAC9B,MAAQ6B,8BAAAA,WAAYE,QAAQ,CAAC/B,QAAO;4BACpD,IAAI,IAAI,CAACjC,KAAK,EAAE;gCACdK,QAAQC,GAAG,CAAC,+BAA+B0B,MAAM8B;4BACnD;4BACA,MAAM,IAAI,CAACG,GAAG,CAACvB,KAAK3B,KAAKN,KAAK,EAAE;gCAAEuB;4BAAK;wBACzC;oBACF;gBACF,OAAO;oBACL,MAAMd,WAAW0C,YACb,MAAM,IAAI,CAACrE,EAAE,CAACkC,QAAQ,CACpB,IAAI,CAACsB,WAAW,CACd,CAAC,EAAEL,IAAI,EACL,IAAI,CAAC3C,eAAe,GAAGf,sBAAsBC,WAC9C,CAAC,EACF,QAEF,UAEFyB,KAAKc,KAAK,CACR,MAAM,IAAI,CAACjC,EAAE,CAACkC,QAAQ,CACpB,IAAI,CAACsB,WAAW,CAAC,CAAC,EAAEL,IAAI,EAAE5D,iBAAiB,CAAC,EAAE,UAC9C;oBAIR,IAAIqE;oBAEJ,IAAIS,WAAW;wBACb,IAAI;4BACFT,OAAOzC,KAAKc,KAAK,CACf,MAAM,IAAI,CAACjC,EAAE,CAACkC,QAAQ,CACpBqB,SAASM,OAAO,CAAC,WAAWrE,mBAC5B;wBAGN,EAAE,OAAM,CAAC;oBACX;oBAEAgC,OAAO;wBACLuC,cAAcL,MAAMM,OAAO;wBAC3B9C,OAAO;4BACLE,MAAM;4BACNM,MAAM+B;4BACN9B;4BACAgD,SAAS,EAAEf,wBAAAA,KAAMe,SAAS;4BAC1BV,OAAO,EAAEL,wBAAAA,KAAMK,OAAO;4BACtBC,MAAM,EAAEN,wBAAAA,KAAMM,MAAM;wBACtB;oBACF;gBACF;gBAEA,IAAI1C,MAAM;oBACR7B,+BAAAA,YAAa+E,GAAG,CAACvB,KAAK3B;gBACxB;YACF,EAAE,OAAO2C,GAAG;YACV,+BAA+B;YACjC;QACF;QAEA,IAAI3C,CAAAA,yBAAAA,cAAAA,KAAMN,KAAK,qBAAXM,YAAaJ,IAAI,MAAK,QAAQ;gBAEbI;YADnB,IAAIoD;YACJ,MAAMC,cAAarD,sBAAAA,KAAKN,KAAK,CAAC+C,OAAO,qBAAlBzC,mBAAoB,CAAClC,uBAAuB;YAE/D,IAAI,OAAOuF,eAAe,UAAU;gBAClCD,YAAYC,WAAWC,KAAK,CAAC;YAC/B;YAEA,IAAIF,6BAAAA,UAAW3D,MAAM,EAAE;gBACrB,MAAM,IAAI,CAACe,gBAAgB;gBAE3B,MAAM+C,UAAUH,UAAUI,IAAI,CAAC,CAACtC;wBAE5B9C;oBADF,OACEA,CAAAA,iCAAAA,0BAAAA,aAAcyC,KAAK,CAACK,IAAI,qBAAxB9C,wBAA0B+C,aAAa,KACvC/C,CAAAA,gCAAAA,aAAcyC,KAAK,CAACK,IAAI,CAACC,aAAa,KACnCnB,CAAAA,CAAAA,wBAAAA,KAAMuC,YAAY,KAAInB,KAAKC,GAAG,EAAC;gBAEtC;gBAEA,kDAAkD;gBAClD,uDAAuD;gBACvD,wDAAwD;gBACxD,IAAIkC,SAAS;oBACXvD,OAAOyD;gBACT;YACF;QACF;QAEA,IAAIzD,QAAQA,CAAAA,yBAAAA,eAAAA,KAAMN,KAAK,qBAAXM,aAAaJ,IAAI,MAAK,SAAS;YACzC,MAAM,IAAI,CAACY,gBAAgB;YAE3B,MAAMkD,eAAe;mBAAKzC,QAAQ,EAAE;mBAAOW,YAAY,EAAE;aAAE;YAE3D,MAAM+B,iBAAiBD,aAAaF,IAAI,CAAC,CAACtC;oBAMtC9C;gBALF,IAAI,IAAI,CAACW,eAAe,CAACkE,QAAQ,CAAC/B,MAAM;oBACtC,OAAO;gBACT;gBAEA,OACE9C,CAAAA,iCAAAA,0BAAAA,aAAcyC,KAAK,CAACK,IAAI,qBAAxB9C,wBAA0B+C,aAAa,KACvC/C,CAAAA,gCAAAA,aAAcyC,KAAK,CAACK,IAAI,CAACC,aAAa,KACnCnB,CAAAA,CAAAA,wBAAAA,KAAMuC,YAAY,KAAInB,KAAKC,GAAG,EAAC;YAEtC;YACA,gDAAgD;YAChD,wCAAwC;YACxC,IAAIsC,gBAAgB;gBAClB3D,OAAOyD;YACT;QACF;QAEA,OAAOzD,QAAQ;IACjB;IAEA,MAAakD,IAAI,GAAGlC,IAAqC,EAAE;QACzD,MAAM,CAACW,KAAK3B,MAAMzB,IAAI,GAAGyC;QACzB7C,+BAAAA,YAAa+E,GAAG,CAACvB,KAAK;YACpBjC,OAAOM;YACPuC,cAAcnB,KAAKC,GAAG;QACxB;QACA,IAAI,IAAI,CAACpC,KAAK,EAAE;YACdK,QAAQC,GAAG,CAAC,OAAOoC;QACrB;QAEA,IAAI,CAAC,IAAI,CAAClD,WAAW,EAAE;QAEvB,IAAIuB,CAAAA,wBAAAA,KAAMJ,IAAI,MAAK,SAAS;YAC1B,MAAMmC,WAAW,IAAI,CAACC,WAAW,CAAC,CAAC,EAAEL,IAAI,KAAK,CAAC,EAAE;YACjD,MAAM,IAAI,CAACnD,EAAE,CAAC8C,KAAK,CAACzD,KAAK0D,OAAO,CAACQ;YACjC,MAAM,IAAI,CAACvD,EAAE,CAACgD,SAAS,CAACO,UAAU/B,KAAKC,IAAI;YAE3C,MAAMmC,OAAsB;gBAC1BK,SAASzC,KAAKyC,OAAO;gBACrBC,QAAQ1C,KAAK0C,MAAM;gBACnBS,WAAWM;YACb;YAEA,MAAM,IAAI,CAACjF,EAAE,CAACgD,SAAS,CACrBO,SAASM,OAAO,CAAC,WAAWrE,mBAC5B2B,KAAKE,SAAS,CAACuC,MAAM,MAAM;YAE7B;QACF;QAEA,IAAIpC,CAAAA,wBAAAA,KAAMJ,IAAI,MAAK,QAAQ;YACzB,MAAMiD,YAAY,OAAO7C,KAAKG,QAAQ,KAAK;YAC3C,MAAMyD,WAAW,IAAI,CAAC5B,WAAW,CAC/B,CAAC,EAAEL,IAAI,KAAK,CAAC,EACbkB,YAAY,QAAQ;YAEtB,MAAM,IAAI,CAACrE,EAAE,CAAC8C,KAAK,CAACzD,KAAK0D,OAAO,CAACqC;YACjC,MAAM,IAAI,CAACpF,EAAE,CAACgD,SAAS,CAACoC,UAAU5D,KAAKE,IAAI;YAE3C,MAAM,IAAI,CAAC1B,EAAE,CAACgD,SAAS,CACrB,IAAI,CAACQ,WAAW,CACd,CAAC,EAAEL,IAAI,EACLkB,YACI,IAAI,CAAC7D,eAAe,GAClBf,sBACAC,aACFH,iBACL,CAAC,EACF8E,YAAY,QAAQ,UAEtBA,YAAY7C,KAAKG,QAAQ,GAAGR,KAAKE,SAAS,CAACG,KAAKG,QAAQ;YAG1D,IAAIH,KAAKyC,OAAO,IAAIzC,KAAK0C,MAAM,EAAE;gBAC/B,MAAMN,OAAsB;oBAC1BK,SAASzC,KAAKyC,OAAO;oBACrBC,QAAQ1C,KAAK0C,MAAM;oBACnBS,WAAWnD,KAAKmD,SAAS;gBAC3B;gBAEA,MAAM,IAAI,CAAC3E,EAAE,CAACgD,SAAS,CACrBoC,SAASvB,OAAO,CAAC,WAAWrE,mBAC5B2B,KAAKE,SAAS,CAACuC;YAEnB;QACF,OAAO,IAAIpC,CAAAA,wBAAAA,KAAMJ,IAAI,MAAK,SAAS;YACjC,MAAMmC,WAAW,IAAI,CAACC,WAAW,CAACL,KAAK;YACvC,MAAM,IAAI,CAACnD,EAAE,CAAC8C,KAAK,CAACzD,KAAK0D,OAAO,CAACQ;YACjC,MAAM,IAAI,CAACvD,EAAE,CAACgD,SAAS,CACrBO,UACApC,KAAKE,SAAS,CAAC;gBACb,GAAGG,IAAI;gBACPiB,MAAM1C,IAAI0C,IAAI;YAChB;QAEJ;IACF;IAEQ2B,eAAeiB,QAAgB,EAAE;QACvC,IAAI,CAAC,IAAI,CAAClF,MAAM,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE;YAClC,MAAM,IAAIkB,MACR;QAEJ;QAEA,0EAA0E;QAC1E,OAAO;QACP,IAAI,CAAC,IAAI,CAACpB,MAAM,IAAI,IAAI,CAACE,QAAQ,EAAE;YACjC,OAAO;QACT,OAEK,IAAI,IAAI,CAACF,MAAM,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE;YACtC,OAAO;QACT;QAEA,oEAAoE;QACpE,WAAW;QACX,IAAIkD,WAAW,IAAI,CAACC,WAAW,CAAC6B,UAAU;QAC1C,IAAI,IAAI,CAACrF,EAAE,CAACsF,UAAU,CAAC/B,WAAW;YAChC,OAAO;QACT;QAEAA,WAAW,IAAI,CAACC,WAAW,CAAC6B,UAAU;QACtC,IAAI,IAAI,CAACrF,EAAE,CAACsF,UAAU,CAAC/B,WAAW;YAChC,OAAO;QACT;QAEA,MAAM,IAAIhC,MACR,CAAC,kDAAkD,EAAE8D,SAAS,CAAC;IAEnE;IAEQ7B,YACN6B,QAAgB,EAChBjE,IAA+B,EACvB;QACR,OAAQA;YACN,KAAK;gBACH,6DAA6D;gBAC7D,iBAAiB;gBACjB,OAAO/B,KAAKwC,IAAI,CACd,IAAI,CAAC3B,aAAa,EAClB,MACA,SACA,eACAmF;YAEJ,KAAK;gBACH,OAAOhG,KAAKwC,IAAI,CAAC,IAAI,CAAC3B,aAAa,EAAE,SAASmF;YAChD,KAAK;gBACH,OAAOhG,KAAKwC,IAAI,CAAC,IAAI,CAAC3B,aAAa,EAAE,OAAOmF;YAC9C;gBACE,MAAM,IAAI9D,MAAM;QACpB;IACF;AACF"}