{"version":3,"sources":["../../../../src/server/lib/incremental-cache/fetch-cache.ts"],"sourcesContent":["import type { CacheHandler, CacheHandlerContext, CacheHandlerValue } from './'\nimport type { IncrementalCacheValue } from '../../response-cache'\n\nimport LRUCache from 'next/dist/compiled/lru-cache'\nimport {\n  CACHE_ONE_YEAR,\n  NEXT_CACHE_SOFT_TAGS_HEADER,\n} from '../../../lib/constants'\n\nlet rateLimitedUntil = 0\nlet memoryCache: LRUCache<string, CacheHandlerValue> | undefined\n\ninterface NextFetchCacheParams {\n  internal?: boolean\n  fetchType?: string\n  fetchIdx?: number\n  fetchUrl?: string\n}\n\nconst CACHE_TAGS_HEADER = 'x-vercel-cache-tags' as const\nconst CACHE_HEADERS_HEADER = 'x-vercel-sc-headers' as const\nconst CACHE_STATE_HEADER = 'x-vercel-cache-state' as const\nconst CACHE_REVALIDATE_HEADER = 'x-vercel-revalidate' as const\nconst CACHE_FETCH_URL_HEADER = 'x-vercel-cache-item-name' as const\nconst CACHE_CONTROL_VALUE_HEADER = 'x-vercel-cache-control' as const\n\nexport default class FetchCache implements CacheHandler {\n  private headers: Record<string, string>\n  private cacheEndpoint?: string\n  private debug: boolean\n\n  private hasMatchingTags(arr1: string[], arr2: string[]) {\n    if (arr1.length !== arr2.length) return false\n\n    const set1 = new Set(arr1)\n    const set2 = new Set(arr2)\n\n    if (set1.size !== set2.size) return false\n\n    for (let tag of set1) {\n      if (!set2.has(tag)) return false\n    }\n\n    return true\n  }\n\n  static isAvailable(ctx: {\n    _requestHeaders: CacheHandlerContext['_requestHeaders']\n  }) {\n    return !!(\n      ctx._requestHeaders['x-vercel-sc-host'] || process.env.SUSPENSE_CACHE_URL\n    )\n  }\n\n  constructor(ctx: CacheHandlerContext) {\n    this.debug = !!process.env.NEXT_PRIVATE_DEBUG_CACHE\n    this.headers = {}\n    this.headers['Content-Type'] = 'application/json'\n\n    if (CACHE_HEADERS_HEADER in ctx._requestHeaders) {\n      const newHeaders = JSON.parse(\n        ctx._requestHeaders[CACHE_HEADERS_HEADER] as string\n      )\n      for (const k in newHeaders) {\n        this.headers[k] = newHeaders[k]\n      }\n      delete ctx._requestHeaders[CACHE_HEADERS_HEADER]\n    }\n    const scHost =\n      ctx._requestHeaders['x-vercel-sc-host'] || process.env.SUSPENSE_CACHE_URL\n\n    const scBasePath =\n      ctx._requestHeaders['x-vercel-sc-basepath'] ||\n      process.env.SUSPENSE_CACHE_BASEPATH\n\n    if (process.env.SUSPENSE_CACHE_AUTH_TOKEN) {\n      this.headers['Authorization'] =\n        `Bearer ${process.env.SUSPENSE_CACHE_AUTH_TOKEN}`\n    }\n\n    if (scHost) {\n      this.cacheEndpoint = `https://${scHost}${scBasePath || ''}`\n      if (this.debug) {\n        console.log('using cache endpoint', this.cacheEndpoint)\n      }\n    } else if (this.debug) {\n      console.log('no cache endpoint available')\n    }\n\n    if (ctx.maxMemoryCacheSize) {\n      if (!memoryCache) {\n        if (this.debug) {\n          console.log('using memory store for fetch cache')\n        }\n\n        memoryCache = new LRUCache({\n          max: ctx.maxMemoryCacheSize,\n          length({ value }) {\n            if (!value) {\n              return 25\n            } else if (value.kind === 'REDIRECT') {\n              return JSON.stringify(value.props).length\n            } else if (value.kind === 'IMAGE') {\n              throw new Error('invariant image should not be incremental-cache')\n            } else if (value.kind === 'FETCH') {\n              return JSON.stringify(value.data || '').length\n            } else if (value.kind === 'ROUTE') {\n              return value.body.length\n            }\n            // rough estimate of size of cache value\n            return (\n              value.html.length + (JSON.stringify(value.pageData)?.length || 0)\n            )\n          },\n        })\n      }\n    } else {\n      if (this.debug) {\n        console.log('not using memory store for fetch cache')\n      }\n    }\n  }\n\n  public resetRequestCache(): void {\n    memoryCache?.reset()\n  }\n\n  public async revalidateTag(\n    ...args: Parameters<CacheHandler['revalidateTag']>\n  ) {\n    let [tags] = args\n    tags = typeof tags === 'string' ? [tags] : tags\n    if (this.debug) {\n      console.log('revalidateTag', tags)\n    }\n\n    if (!tags.length) return\n\n    if (Date.now() < rateLimitedUntil) {\n      if (this.debug) {\n        console.log('rate limited ', rateLimitedUntil)\n      }\n      return\n    }\n\n    try {\n      const res = await fetch(\n        `${this.cacheEndpoint}/v1/suspense-cache/revalidate?tags=${tags\n          .map((tag) => encodeURIComponent(tag))\n          .join(',')}`,\n        {\n          method: 'POST',\n          headers: this.headers,\n          // @ts-expect-error not on public type\n          next: { internal: true },\n        }\n      )\n\n      if (res.status === 429) {\n        const retryAfter = res.headers.get('retry-after') || '60000'\n        rateLimitedUntil = Date.now() + parseInt(retryAfter)\n      }\n\n      if (!res.ok) {\n        throw new Error(`Request failed with status ${res.status}.`)\n      }\n    } catch (err) {\n      console.warn(`Failed to revalidate tag ${tags}`, err)\n    }\n  }\n\n  public async get(...args: Parameters<CacheHandler['get']>) {\n    const [key, ctx = {}] = args\n    const { tags, softTags, kindHint, fetchIdx, fetchUrl } = ctx\n\n    if (kindHint !== 'fetch') {\n      return null\n    }\n\n    if (Date.now() < rateLimitedUntil) {\n      if (this.debug) {\n        console.log('rate limited')\n      }\n      return null\n    }\n\n    // memory cache is cleared at the end of each request\n    // so that revalidate events are pulled from upstream\n    // on successive requests\n    let data = memoryCache?.get(key)\n\n    const hasFetchKindAndMatchingTags =\n      data?.value?.kind === 'FETCH' &&\n      this.hasMatchingTags(tags ?? [], data.value.tags ?? [])\n\n    // Get data from fetch cache. Also check if new tags have been\n    // specified with the same cache key (fetch URL)\n    if (this.cacheEndpoint && (!data || !hasFetchKindAndMatchingTags)) {\n      try {\n        const start = Date.now()\n        const fetchParams: NextFetchCacheParams = {\n          internal: true,\n          fetchType: 'cache-get',\n          fetchUrl: fetchUrl,\n          fetchIdx,\n        }\n        const res = await fetch(\n          `${this.cacheEndpoint}/v1/suspense-cache/${key}`,\n          {\n            method: 'GET',\n            headers: {\n              ...this.headers,\n              [CACHE_FETCH_URL_HEADER]: fetchUrl,\n              [CACHE_TAGS_HEADER]: tags?.join(',') || '',\n              [NEXT_CACHE_SOFT_TAGS_HEADER]: softTags?.join(',') || '',\n            } as any,\n            next: fetchParams as NextFetchRequestConfig,\n          }\n        )\n\n        if (res.status === 429) {\n          const retryAfter = res.headers.get('retry-after') || '60000'\n          rateLimitedUntil = Date.now() + parseInt(retryAfter)\n        }\n\n        if (res.status === 404) {\n          if (this.debug) {\n            console.log(\n              `no fetch cache entry for ${key}, duration: ${\n                Date.now() - start\n              }ms`\n            )\n          }\n          return null\n        }\n\n        if (!res.ok) {\n          console.error(await res.text())\n          throw new Error(`invalid response from cache ${res.status}`)\n        }\n\n        const cached: IncrementalCacheValue = await res.json()\n\n        if (!cached || cached.kind !== 'FETCH') {\n          this.debug && console.log({ cached })\n          throw new Error('invalid cache value')\n        }\n\n        // if new tags were specified, merge those tags to the existing tags\n        if (cached.kind === 'FETCH') {\n          cached.tags ??= []\n          for (const tag of tags ?? []) {\n            if (!cached.tags.includes(tag)) {\n              cached.tags.push(tag)\n            }\n          }\n        }\n\n        const cacheState = res.headers.get(CACHE_STATE_HEADER)\n        const age = res.headers.get('age')\n\n        data = {\n          value: cached,\n          // if it's already stale set it to a time in the past\n          // if not derive last modified from age\n          lastModified:\n            cacheState !== 'fresh'\n              ? Date.now() - CACHE_ONE_YEAR\n              : Date.now() - parseInt(age || '0', 10) * 1000,\n        }\n\n        if (this.debug) {\n          console.log(\n            `got fetch cache entry for ${key}, duration: ${\n              Date.now() - start\n            }ms, size: ${\n              Object.keys(cached).length\n            }, cache-state: ${cacheState} tags: ${tags?.join(\n              ','\n            )} softTags: ${softTags?.join(',')}`\n          )\n        }\n\n        if (data) {\n          memoryCache?.set(key, data)\n        }\n      } catch (err) {\n        // unable to get data from fetch-cache\n        if (this.debug) {\n          console.error(`Failed to get from fetch-cache`, err)\n        }\n      }\n    }\n\n    return data || null\n  }\n\n  public async set(...args: Parameters<CacheHandler['set']>) {\n    const [key, data, ctx] = args\n\n    const newValue = data?.kind === 'FETCH' ? data.data : undefined\n    const existingCache = memoryCache?.get(key)\n    const existingValue = existingCache?.value\n    if (\n      existingValue?.kind === 'FETCH' &&\n      Object.keys(existingValue.data).every(\n        (field) =>\n          JSON.stringify(\n            (existingValue.data as Record<string, string | Object>)[field]\n          ) ===\n          JSON.stringify((newValue as Record<string, string | Object>)[field])\n      )\n    ) {\n      if (this.debug) {\n        console.log(`skipping cache set for ${key} as not modified`)\n      }\n      return\n    }\n\n    const { fetchCache, fetchIdx, fetchUrl, tags } = ctx\n    if (!fetchCache) return\n\n    if (Date.now() < rateLimitedUntil) {\n      if (this.debug) {\n        console.log('rate limited')\n      }\n      return\n    }\n\n    memoryCache?.set(key, {\n      value: data,\n      lastModified: Date.now(),\n    })\n\n    if (this.cacheEndpoint) {\n      try {\n        const start = Date.now()\n        if (data !== null && 'revalidate' in data) {\n          this.headers[CACHE_REVALIDATE_HEADER] = data.revalidate.toString()\n        }\n        if (\n          !this.headers[CACHE_REVALIDATE_HEADER] &&\n          data !== null &&\n          'data' in data\n        ) {\n          this.headers[CACHE_CONTROL_VALUE_HEADER] =\n            data.data.headers['cache-control']\n        }\n        const body = JSON.stringify({\n          ...data,\n          // we send the tags in the header instead\n          // of in the body here\n          tags: undefined,\n        })\n\n        if (this.debug) {\n          console.log('set cache', key)\n        }\n        const fetchParams: NextFetchCacheParams = {\n          internal: true,\n          fetchType: 'cache-set',\n          fetchUrl,\n          fetchIdx,\n        }\n        const res = await fetch(\n          `${this.cacheEndpoint}/v1/suspense-cache/${key}`,\n          {\n            method: 'POST',\n            headers: {\n              ...this.headers,\n              [CACHE_FETCH_URL_HEADER]: fetchUrl || '',\n              [CACHE_TAGS_HEADER]: tags?.join(',') || '',\n            },\n            body: body,\n            next: fetchParams as NextFetchRequestConfig,\n          }\n        )\n\n        if (res.status === 429) {\n          const retryAfter = res.headers.get('retry-after') || '60000'\n          rateLimitedUntil = Date.now() + parseInt(retryAfter)\n        }\n\n        if (!res.ok) {\n          this.debug && console.log(await res.text())\n          throw new Error(`invalid response ${res.status}`)\n        }\n\n        if (this.debug) {\n          console.log(\n            `successfully set to fetch-cache for ${key}, duration: ${\n              Date.now() - start\n            }ms, size: ${body.length}`\n          )\n        }\n      } catch (err) {\n        // unable to set to fetch-cache\n        if (this.debug) {\n          console.error(`Failed to update fetch cache`, err)\n        }\n      }\n    }\n    return\n  }\n}\n"],"names":["LRUCache","CACHE_ONE_YEAR","NEXT_CACHE_SOFT_TAGS_HEADER","rateLimitedUntil","memoryCache","CACHE_TAGS_HEADER","CACHE_HEADERS_HEADER","CACHE_STATE_HEADER","CACHE_REVALIDATE_HEADER","CACHE_FETCH_URL_HEADER","CACHE_CONTROL_VALUE_HEADER","FetchCache","hasMatchingTags","arr1","arr2","length","set1","Set","set2","size","tag","has","isAvailable","ctx","_requestHeaders","process","env","SUSPENSE_CACHE_URL","constructor","debug","NEXT_PRIVATE_DEBUG_CACHE","headers","newHeaders","JSON","parse","k","scHost","scBasePath","SUSPENSE_CACHE_BASEPATH","SUSPENSE_CACHE_AUTH_TOKEN","cacheEndpoint","console","log","maxMemoryCacheSize","max","value","kind","stringify","props","Error","data","body","html","pageData","resetRequestCache","reset","revalidateTag","args","tags","Date","now","res","fetch","map","encodeURIComponent","join","method","next","internal","status","retryAfter","get","parseInt","ok","err","warn","key","softTags","kindHint","fetchIdx","fetchUrl","hasFetchKindAndMatchingTags","start","fetchParams","fetchType","error","text","cached","json","includes","push","cacheState","age","lastModified","Object","keys","set","newValue","undefined","existingCache","existingValue","every","field","fetchCache","revalidate","toString"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}