{"version":3,"sources":["../../../src/server/app-render/create-error-handler.tsx"],"sourcesContent":["import stringHash from 'next/dist/compiled/string-hash'\nimport { formatServerError } from '../../lib/format-server-error'\nimport { SpanStatusCode, getTracer } from '../lib/trace/tracer'\nimport { isAbortError } from '../pipe-readable'\nimport { isDynamicUsageError } from '../../export/helpers/is-dynamic-usage-error'\n\ndeclare global {\n  var __next_log_error__: undefined | ((err: unknown) => void)\n}\n\nexport type ErrorHandler = (\n  err: unknown,\n  errorInfo: unknown\n) => string | undefined\n\nexport const ErrorHandlerSource = {\n  serverComponents: 'serverComponents',\n  flightData: 'flightData',\n  html: 'html',\n} as const\n\n/**\n * Create error handler for renderers.\n * Tolerate dynamic server errors during prerendering so console\n * isn't spammed with unactionable errors\n */\nexport function createErrorHandler({\n  /**\n   * Used for debugging\n   */\n  source,\n  dev,\n  isNextExport,\n  errorLogger,\n  digestErrorsMap,\n  allCapturedErrors,\n  silenceLogger,\n}: {\n  source: (typeof ErrorHandlerSource)[keyof typeof ErrorHandlerSource]\n  dev?: boolean\n  isNextExport?: boolean\n  errorLogger?: (err: any) => Promise<void>\n  digestErrorsMap: Map<string, Error>\n  allCapturedErrors?: Error[]\n  silenceLogger?: boolean\n}): ErrorHandler {\n  return (err: any, errorInfo: any) => {\n    // If the error already has a digest, respect the original digest,\n    // so it won't get re-generated into another new error.\n    if (!err.digest) {\n      // TODO-APP: look at using webcrypto instead. Requires a promise to be awaited.\n      err.digest = stringHash(\n        err.message + (errorInfo?.stack || err.stack || '')\n      ).toString()\n    }\n    const digest = err.digest\n\n    if (allCapturedErrors) allCapturedErrors.push(err)\n\n    // These errors are expected. We return the digest\n    // so that they can be properly handled.\n    if (isDynamicUsageError(err)) return err.digest\n\n    // If the response was closed, we don't need to log the error.\n    if (isAbortError(err)) return\n\n    if (!digestErrorsMap.has(digest)) {\n      digestErrorsMap.set(digest, err)\n    } else if (source === ErrorHandlerSource.html) {\n      // For SSR errors, if we have the existing digest in errors map,\n      // we should use the existing error object to avoid duplicate error logs.\n      err = digestErrorsMap.get(digest)\n    }\n\n    // Format server errors in development to add more helpful error messages\n    if (dev) {\n      formatServerError(err)\n    }\n    // Used for debugging error source\n    // console.error(source, err)\n    // Don't log the suppressed error during export\n    if (\n      !(\n        isNextExport &&\n        err?.message?.includes(\n          'The specific message is omitted in production builds to avoid leaking sensitive details.'\n        )\n      )\n    ) {\n      // Record exception in an active span, if available.\n      const span = getTracer().getActiveScopeSpan()\n      if (span) {\n        span.recordException(err)\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message,\n        })\n      }\n\n      if (!silenceLogger) {\n        if (errorLogger) {\n          errorLogger(err).catch(() => {})\n        } else {\n          // The error logger is currently not provided in the edge runtime.\n          // Use the exposed `__next_log_error__` instead.\n          // This will trace error traces to the original source code.\n          if (typeof __next_log_error__ === 'function') {\n            __next_log_error__(err)\n          } else {\n            console.error(err)\n          }\n        }\n      }\n    }\n\n    return err.digest\n  }\n}\n"],"names":["stringHash","formatServerError","SpanStatusCode","getTracer","isAbortError","isDynamicUsageError","ErrorHandlerSource","serverComponents","flightData","html","createErrorHandler","source","dev","isNextExport","errorLogger","digestErrorsMap","allCapturedErrors","silenceLogger","err","errorInfo","digest","message","stack","toString","push","has","set","get","includes","span","getActiveScopeSpan","recordException","setStatus","code","ERROR","catch","__next_log_error__","console","error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,OAAOA,gBAAgB,iCAAgC;AACvD,SAASC,iBAAiB,QAAQ,gCAA+B;AACjE,SAASC,cAAc,EAAEC,SAAS,QAAQ,sBAAqB;AAC/D,SAASC,YAAY,QAAQ,mBAAkB;AAC/C,SAASC,mBAAmB,QAAQ,8CAA6C;AAWjF,OAAO,MAAMC,qBAAqB;IAChCC,kBAAkB;IAClBC,YAAY;IACZC,MAAM;AACR,EAAU;AAEV;;;;CAIC,GACD,OAAO,SAASC,mBAAmB,EACjC;;GAEC,GACDC,MAAM,EACNC,GAAG,EACHC,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,iBAAiB,EACjBC,aAAa,EASd;IACC,OAAO,CAACC,KAAUC;YAsCZD;QArCJ,kEAAkE;QAClE,uDAAuD;QACvD,IAAI,CAACA,IAAIE,MAAM,EAAE;YACf,+EAA+E;YAC/EF,IAAIE,MAAM,GAAGpB,WACXkB,IAAIG,OAAO,GAAIF,CAAAA,CAAAA,6BAAAA,UAAWG,KAAK,KAAIJ,IAAII,KAAK,IAAI,EAAC,GACjDC,QAAQ;QACZ;QACA,MAAMH,SAASF,IAAIE,MAAM;QAEzB,IAAIJ,mBAAmBA,kBAAkBQ,IAAI,CAACN;QAE9C,kDAAkD;QAClD,wCAAwC;QACxC,IAAIb,oBAAoBa,MAAM,OAAOA,IAAIE,MAAM;QAE/C,8DAA8D;QAC9D,IAAIhB,aAAac,MAAM;QAEvB,IAAI,CAACH,gBAAgBU,GAAG,CAACL,SAAS;YAChCL,gBAAgBW,GAAG,CAACN,QAAQF;QAC9B,OAAO,IAAIP,WAAWL,mBAAmBG,IAAI,EAAE;YAC7C,gEAAgE;YAChE,yEAAyE;YACzES,MAAMH,gBAAgBY,GAAG,CAACP;QAC5B;QAEA,yEAAyE;QACzE,IAAIR,KAAK;YACPX,kBAAkBiB;QACpB;QACA,kCAAkC;QAClC,6BAA6B;QAC7B,+CAA+C;QAC/C,IACE,CACEL,CAAAA,iBACAK,wBAAAA,eAAAA,IAAKG,OAAO,qBAAZH,aAAcU,QAAQ,CACpB,4FACF,GAEF;YACA,oDAAoD;YACpD,MAAMC,OAAO1B,YAAY2B,kBAAkB;YAC3C,IAAID,MAAM;gBACRA,KAAKE,eAAe,CAACb;gBACrBW,KAAKG,SAAS,CAAC;oBACbC,MAAM/B,eAAegC,KAAK;oBAC1Bb,SAASH,IAAIG,OAAO;gBACtB;YACF;YAEA,IAAI,CAACJ,eAAe;gBAClB,IAAIH,aAAa;oBACfA,YAAYI,KAAKiB,KAAK,CAAC,KAAO;gBAChC,OAAO;oBACL,kEAAkE;oBAClE,gDAAgD;oBAChD,4DAA4D;oBAC5D,IAAI,OAAOC,uBAAuB,YAAY;wBAC5CA,mBAAmBlB;oBACrB,OAAO;wBACLmB,QAAQC,KAAK,CAACpB;oBAChB;gBACF;YACF;QACF;QAEA,OAAOA,IAAIE,MAAM;IACnB;AACF"}