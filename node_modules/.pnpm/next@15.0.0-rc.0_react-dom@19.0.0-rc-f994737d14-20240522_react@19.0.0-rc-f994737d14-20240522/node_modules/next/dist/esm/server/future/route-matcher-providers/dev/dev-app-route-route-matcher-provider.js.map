{"version":3,"sources":["../../../../../src/server/future/route-matcher-providers/dev/dev-app-route-route-matcher-provider.ts"],"sourcesContent":["import type { FileReader } from './helpers/file-reader/file-reader'\nimport type { Normalizer } from '../../normalizers/normalizer'\nimport { AppRouteRouteMatcher } from '../../route-matchers/app-route-route-matcher'\nimport { RouteKind } from '../../route-kind'\nimport { FileCacheRouteMatcherProvider } from './file-cache-route-matcher-provider'\nimport { isAppRouteRoute } from '../../../../lib/is-app-route-route'\nimport { DevAppNormalizers } from '../../normalizers/built/app'\n\nexport class DevAppRouteRouteMatcherProvider extends FileCacheRouteMatcherProvider<AppRouteRouteMatcher> {\n  private readonly normalizers: {\n    page: Normalizer\n    pathname: Normalizer\n    bundlePath: Normalizer\n  }\n\n  constructor(\n    appDir: string,\n    extensions: ReadonlyArray<string>,\n    reader: FileReader\n  ) {\n    super(appDir, reader)\n\n    this.normalizers = new DevAppNormalizers(appDir, extensions)\n  }\n\n  protected async transform(\n    files: ReadonlyArray<string>\n  ): Promise<ReadonlyArray<AppRouteRouteMatcher>> {\n    const matchers: Array<AppRouteRouteMatcher> = []\n    for (const filename of files) {\n      const page = this.normalizers.page.normalize(filename)\n\n      // If the file isn't a match for this matcher, then skip it.\n      if (!isAppRouteRoute(page)) continue\n\n      // Validate that this is not an ignored page.\n      if (page.includes('/_')) continue\n\n      const pathname = this.normalizers.pathname.normalize(filename)\n      const bundlePath = this.normalizers.bundlePath.normalize(filename)\n\n      matchers.push(\n        new AppRouteRouteMatcher({\n          kind: RouteKind.APP_ROUTE,\n          pathname,\n          page,\n          bundlePath,\n          filename,\n        })\n      )\n    }\n\n    return matchers\n  }\n}\n"],"names":["AppRouteRouteMatcher","RouteKind","FileCacheRouteMatcherProvider","isAppRouteRoute","DevAppNormalizers","DevAppRouteRouteMatcherProvider","constructor","appDir","extensions","reader","normalizers","transform","files","matchers","filename","page","normalize","includes","pathname","bundlePath","push","kind","APP_ROUTE"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAEA,SAASA,oBAAoB,QAAQ,+CAA8C;AACnF,SAASC,SAAS,QAAQ,mBAAkB;AAC5C,SAASC,6BAA6B,QAAQ,sCAAqC;AACnF,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,iBAAiB,QAAQ,8BAA6B;AAE/D,OAAO,MAAMC,wCAAwCH;IAOnDI,YACEC,MAAc,EACdC,UAAiC,EACjCC,MAAkB,CAClB;QACA,KAAK,CAACF,QAAQE;QAEd,IAAI,CAACC,WAAW,GAAG,IAAIN,kBAAkBG,QAAQC;IACnD;IAEA,MAAgBG,UACdC,KAA4B,EACkB;QAC9C,MAAMC,WAAwC,EAAE;QAChD,KAAK,MAAMC,YAAYF,MAAO;YAC5B,MAAMG,OAAO,IAAI,CAACL,WAAW,CAACK,IAAI,CAACC,SAAS,CAACF;YAE7C,4DAA4D;YAC5D,IAAI,CAACX,gBAAgBY,OAAO;YAE5B,6CAA6C;YAC7C,IAAIA,KAAKE,QAAQ,CAAC,OAAO;YAEzB,MAAMC,WAAW,IAAI,CAACR,WAAW,CAACQ,QAAQ,CAACF,SAAS,CAACF;YACrD,MAAMK,aAAa,IAAI,CAACT,WAAW,CAACS,UAAU,CAACH,SAAS,CAACF;YAEzDD,SAASO,IAAI,CACX,IAAIpB,qBAAqB;gBACvBqB,MAAMpB,UAAUqB,SAAS;gBACzBJ;gBACAH;gBACAI;gBACAL;YACF;QAEJ;QAEA,OAAOD;IACT;AACF"}