{"version":3,"sources":["../../../../src/server/dev/turbopack/manifest-loader.ts"],"sourcesContent":["import type {\n  EdgeFunctionDefinition,\n  MiddlewareManifest,\n} from '../../../build/webpack/plugins/middleware-plugin'\nimport type { BuildManifest } from '../../get-page-files'\nimport type { AppBuildManifest } from '../../../build/webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from '../../../build/webpack/plugins/pages-manifest-plugin'\nimport { pathToRegexp } from 'next/dist/compiled/path-to-regexp'\nimport type { ActionManifest } from '../../../build/webpack/plugins/flight-client-entry-plugin'\nimport type { NextFontManifest } from '../../../build/webpack/plugins/next-font-manifest-plugin'\nimport type { LoadableManifest } from '../../load-components'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATHS_MANIFEST,\n  AUTOMATIC_FONT_OPTIMIZATION_MANIFEST,\n  BUILD_MANIFEST,\n  INTERCEPTION_ROUTE_REWRITE_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n} from '../../../shared/lib/constants'\nimport { join, posix } from 'path'\nimport { readFile, writeFile } from 'fs/promises'\nimport type { SetupOpts } from '../../lib/router-utils/setup-dev-bundler'\nimport { deleteCache } from '../../../build/webpack/plugins/nextjs-require-cache-hot-reloader'\nimport { writeFileAtomic } from '../../../lib/fs/write-atomic'\nimport { isInterceptionRouteRewrite } from '../../../lib/generate-interception-routes-rewrites'\nimport {\n  type ClientBuildManifest,\n  normalizeRewritesForBuildManifest,\n  srcEmptySsgManifest,\n  processRoute,\n} from '../../../build/webpack/plugins/build-manifest-plugin'\nimport type { PageEntrypoints } from './types'\nimport getAssetPathFromRoute from '../../../shared/lib/router/utils/get-asset-path-from-route'\nimport { getEntryKey, type EntryKey } from './entry-key'\n\ninterface InstrumentationDefinition {\n  files: string[]\n  name: 'instrumentation'\n}\n\ntype TurbopackMiddlewareManifest = MiddlewareManifest & {\n  instrumentation?: InstrumentationDefinition\n}\n\nasync function readPartialManifest<T>(\n  distDir: string,\n  name:\n    | typeof MIDDLEWARE_MANIFEST\n    | typeof BUILD_MANIFEST\n    | typeof APP_BUILD_MANIFEST\n    | typeof PAGES_MANIFEST\n    | typeof APP_PATHS_MANIFEST\n    | `${typeof SERVER_REFERENCE_MANIFEST}.json`\n    | `${typeof NEXT_FONT_MANIFEST}.json`\n    | typeof REACT_LOADABLE_MANIFEST,\n  pageName: string,\n  type: 'pages' | 'app' | 'middleware' | 'instrumentation' = 'pages'\n): Promise<T> {\n  const manifestPath = posix.join(\n    distDir,\n    `server`,\n    type,\n    type === 'middleware' || type === 'instrumentation'\n      ? ''\n      : type === 'app'\n        ? pageName\n        : getAssetPathFromRoute(pageName),\n    name\n  )\n  return JSON.parse(await readFile(posix.join(manifestPath), 'utf-8')) as T\n}\n\nexport class TurbopackManifestLoader {\n  private actionManifests: Map<EntryKey, ActionManifest> = new Map()\n  private appBuildManifests: Map<EntryKey, AppBuildManifest> = new Map()\n  private appPathsManifests: Map<EntryKey, PagesManifest> = new Map()\n  private buildManifests: Map<EntryKey, BuildManifest> = new Map()\n  private fontManifests: Map<EntryKey, NextFontManifest> = new Map()\n  private loadableManifests: Map<EntryKey, LoadableManifest> = new Map()\n  private middlewareManifests: Map<EntryKey, TurbopackMiddlewareManifest> =\n    new Map()\n  private pagesManifests: Map<string, PagesManifest> = new Map()\n  private encryptionKey: string\n\n  private readonly distDir: string\n  private readonly buildId: string\n\n  constructor({\n    distDir,\n    buildId,\n    encryptionKey,\n  }: {\n    buildId: string\n    distDir: string\n    encryptionKey: string\n  }) {\n    this.distDir = distDir\n    this.buildId = buildId\n    this.encryptionKey = encryptionKey\n  }\n\n  delete(key: EntryKey) {\n    this.actionManifests.delete(key)\n    this.appBuildManifests.delete(key)\n    this.appPathsManifests.delete(key)\n    this.buildManifests.delete(key)\n    this.fontManifests.delete(key)\n    this.loadableManifests.delete(key)\n    this.middlewareManifests.delete(key)\n    this.pagesManifests.delete(key)\n  }\n\n  async loadActionManifest(pageName: string): Promise<void> {\n    this.actionManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${SERVER_REFERENCE_MANIFEST}.json`,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async mergeActionManifests(manifests: Iterable<ActionManifest>) {\n    type ActionEntries = ActionManifest['edge' | 'node']\n    const manifest: ActionManifest = {\n      node: {},\n      edge: {},\n      encryptionKey: this.encryptionKey,\n    }\n\n    function mergeActionIds(\n      actionEntries: ActionEntries,\n      other: ActionEntries\n    ): void {\n      for (const key in other) {\n        const action = (actionEntries[key] ??= {\n          workers: {},\n          layer: {},\n        })\n        Object.assign(action.workers, other[key].workers)\n        Object.assign(action.layer, other[key].layer)\n      }\n    }\n\n    for (const m of manifests) {\n      mergeActionIds(manifest.node, m.node)\n      mergeActionIds(manifest.edge, m.edge)\n    }\n\n    return manifest\n  }\n\n  private async writeActionManifest(): Promise<void> {\n    const actionManifest = await this.mergeActionManifests(\n      this.actionManifests.values()\n    )\n    const actionManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.json`\n    )\n    const actionManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.js`\n    )\n    const json = JSON.stringify(actionManifest, null, 2)\n    deleteCache(actionManifestJsonPath)\n    deleteCache(actionManifestJsPath)\n    await writeFile(actionManifestJsonPath, json, 'utf-8')\n    await writeFile(\n      actionManifestJsPath,\n      `self.__RSC_SERVER_MANIFEST=${JSON.stringify(json)}`,\n      'utf-8'\n    )\n  }\n\n  async loadAppBuildManifest(pageName: string): Promise<void> {\n    this.appBuildManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_BUILD_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private mergeAppBuildManifests(manifests: Iterable<AppBuildManifest>) {\n    const manifest: AppBuildManifest = {\n      pages: {},\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n    }\n    return manifest\n  }\n\n  private async writeAppBuildManifest(): Promise<void> {\n    const appBuildManifest = this.mergeAppBuildManifests(\n      this.appBuildManifests.values()\n    )\n    const appBuildManifestPath = join(this.distDir, APP_BUILD_MANIFEST)\n    deleteCache(appBuildManifestPath)\n    await writeFileAtomic(\n      appBuildManifestPath,\n      JSON.stringify(appBuildManifest, null, 2)\n    )\n  }\n\n  async loadAppPathsManifest(pageName: string): Promise<void> {\n    this.appPathsManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_PATHS_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async writeAppPathsManifest(): Promise<void> {\n    const appPathsManifest = this.mergePagesManifests(\n      this.appPathsManifests.values()\n    )\n    const appPathsManifestPath = join(\n      this.distDir,\n      'server',\n      APP_PATHS_MANIFEST\n    )\n    deleteCache(appPathsManifestPath)\n    await writeFileAtomic(\n      appPathsManifestPath,\n      JSON.stringify(appPathsManifest, null, 2)\n    )\n  }\n\n  /**\n   * Turbopack doesn't support this functionality, so it writes an empty manifest.\n   */\n  private async writeAutomaticFontOptimizationManifest() {\n    const manifestPath = join(\n      this.distDir,\n      'server',\n      AUTOMATIC_FONT_OPTIMIZATION_MANIFEST\n    )\n\n    await writeFileAtomic(manifestPath, JSON.stringify([]))\n  }\n\n  async loadBuildManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.buildManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(this.distDir, BUILD_MANIFEST, pageName, type)\n    )\n  }\n\n  private mergeBuildManifests(manifests: Iterable<BuildManifest>) {\n    const manifest: Partial<BuildManifest> & Pick<BuildManifest, 'pages'> = {\n      pages: {\n        '/_app': [],\n      },\n      // Something in next.js depends on these to exist even for app dir rendering\n      devFiles: [],\n      ampDevFiles: [],\n      polyfillFiles: [],\n      lowPriorityFiles: [\n        'static/development/_ssgManifest.js',\n        'static/development/_buildManifest.js',\n      ],\n      rootMainFiles: [],\n      ampFirstPages: [],\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n      if (m.rootMainFiles.length) manifest.rootMainFiles = m.rootMainFiles\n      // polyfillFiles should always be the same, so we can overwrite instead of actually merging\n      if (m.polyfillFiles.length) manifest.polyfillFiles = m.polyfillFiles\n    }\n    return manifest\n  }\n\n  private async writeBuildManifest(\n    pageEntrypoints: PageEntrypoints,\n    rewrites: SetupOpts['fsChecker']['rewrites']\n  ): Promise<void> {\n    const processedRewrites = {\n      ...rewrites,\n      beforeFiles: (rewrites?.beforeFiles ?? []).map(processRoute),\n      afterFiles: (rewrites?.afterFiles ?? []).map(processRoute),\n      fallback: (rewrites?.fallback ?? []).map(processRoute),\n    }\n    const buildManifest = this.mergeBuildManifests(this.buildManifests.values())\n    const buildManifestPath = join(this.distDir, BUILD_MANIFEST)\n    const middlewareBuildManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_BUILD_MANIFEST}.js`\n    )\n    const interceptionRewriteManifestPath = join(\n      this.distDir,\n      'server',\n      `${INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`\n    )\n    deleteCache(buildManifestPath)\n    deleteCache(middlewareBuildManifestPath)\n    deleteCache(interceptionRewriteManifestPath)\n    await writeFileAtomic(\n      buildManifestPath,\n      JSON.stringify(buildManifest, null, 2)\n    )\n    await writeFileAtomic(\n      middlewareBuildManifestPath,\n      `self.__BUILD_MANIFEST=${JSON.stringify(buildManifest)};`\n    )\n\n    const interceptionRewrites = JSON.stringify(\n      processedRewrites.beforeFiles.filter(isInterceptionRouteRewrite)\n    )\n\n    await writeFileAtomic(\n      interceptionRewriteManifestPath,\n      `self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST=${JSON.stringify(\n        interceptionRewrites\n      )};`\n    )\n\n    const content: ClientBuildManifest = {\n      __rewrites: normalizeRewritesForBuildManifest(processedRewrites) as any,\n      ...Object.fromEntries(\n        [...pageEntrypoints.keys()].map((pathname) => [\n          pathname,\n          `static/chunks/pages${pathname === '/' ? '/index' : pathname}.js`,\n        ])\n      ),\n      sortedPages: [...pageEntrypoints.keys()],\n    }\n    const buildManifestJs = `self.__BUILD_MANIFEST = ${JSON.stringify(\n      content\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_buildManifest.js'),\n      buildManifestJs\n    )\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_ssgManifest.js'),\n      srcEmptySsgManifest\n    )\n  }\n\n  private async writeFallbackBuildManifest(): Promise<void> {\n    const fallbackBuildManifest = this.mergeBuildManifests(\n      [\n        this.buildManifests.get(getEntryKey('pages', 'server', '_app')),\n        this.buildManifests.get(getEntryKey('pages', 'server', '_error')),\n      ].filter(Boolean) as BuildManifest[]\n    )\n    const fallbackBuildManifestPath = join(\n      this.distDir,\n      `fallback-${BUILD_MANIFEST}`\n    )\n    deleteCache(fallbackBuildManifestPath)\n    await writeFileAtomic(\n      fallbackBuildManifestPath,\n      JSON.stringify(fallbackBuildManifest, null, 2)\n    )\n  }\n\n  async loadFontManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.fontManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${NEXT_FONT_MANIFEST}.json`,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeFontManifests(manifests: Iterable<NextFontManifest>) {\n    const manifest: NextFontManifest = {\n      app: {},\n      appUsingSizeAdjust: false,\n      pages: {},\n      pagesUsingSizeAdjust: false,\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.app, m.app)\n      Object.assign(manifest.pages, m.pages)\n\n      manifest.appUsingSizeAdjust =\n        manifest.appUsingSizeAdjust || m.appUsingSizeAdjust\n      manifest.pagesUsingSizeAdjust =\n        manifest.pagesUsingSizeAdjust || m.pagesUsingSizeAdjust\n    }\n    return manifest\n  }\n\n  private async writeNextFontManifest(): Promise<void> {\n    const fontManifest = this.mergeFontManifests(this.fontManifests.values())\n    const json = JSON.stringify(fontManifest, null, 2)\n\n    const fontManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.json`\n    )\n    const fontManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.js`\n    )\n    deleteCache(fontManifestJsonPath)\n    deleteCache(fontManifestJsPath)\n    await writeFileAtomic(fontManifestJsonPath, json)\n    await writeFileAtomic(\n      fontManifestJsPath,\n      `self.__NEXT_FONT_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadLoadableManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.loadableManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        REACT_LOADABLE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeLoadableManifests(manifests: Iterable<LoadableManifest>) {\n    const manifest: LoadableManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writeLoadableManifest(): Promise<void> {\n    const loadableManifest = this.mergeLoadableManifests(\n      this.loadableManifests.values()\n    )\n    const loadableManifestPath = join(this.distDir, REACT_LOADABLE_MANIFEST)\n    const middlewareloadableManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`\n    )\n\n    const json = JSON.stringify(loadableManifest, null, 2)\n\n    deleteCache(loadableManifestPath)\n    deleteCache(middlewareloadableManifestPath)\n    await writeFileAtomic(loadableManifestPath, json)\n    await writeFileAtomic(\n      middlewareloadableManifestPath,\n      `self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadMiddlewareManifest(\n    pageName: string,\n    type: 'pages' | 'app' | 'middleware' | 'instrumentation'\n  ): Promise<void> {\n    this.middlewareManifests.set(\n      getEntryKey(\n        type === 'middleware' || type === 'instrumentation' ? 'root' : type,\n        'server',\n        pageName\n      ),\n      await readPartialManifest(\n        this.distDir,\n        MIDDLEWARE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  getMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.get(key)\n  }\n\n  deleteMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.delete(key)\n  }\n\n  private mergeMiddlewareManifests(\n    manifests: Iterable<TurbopackMiddlewareManifest>\n  ): MiddlewareManifest {\n    const manifest: MiddlewareManifest = {\n      version: 3,\n      middleware: {},\n      sortedMiddleware: [],\n      functions: {},\n    }\n    let instrumentation: InstrumentationDefinition | undefined = undefined\n    for (const m of manifests) {\n      Object.assign(manifest.functions, m.functions)\n      Object.assign(manifest.middleware, m.middleware)\n      if (m.instrumentation) {\n        instrumentation = m.instrumentation\n      }\n    }\n    const updateFunctionDefinition = (\n      fun: EdgeFunctionDefinition\n    ): EdgeFunctionDefinition => {\n      return {\n        ...fun,\n        files: [...(instrumentation?.files ?? []), ...fun.files],\n      }\n    }\n    for (const key of Object.keys(manifest.middleware)) {\n      const value = manifest.middleware[key]\n      manifest.middleware[key] = updateFunctionDefinition(value)\n    }\n    for (const key of Object.keys(manifest.functions)) {\n      const value = manifest.functions[key]\n      manifest.functions[key] = updateFunctionDefinition(value)\n    }\n    for (const fun of Object.values(manifest.functions).concat(\n      Object.values(manifest.middleware)\n    )) {\n      for (const matcher of fun.matchers) {\n        if (!matcher.regexp) {\n          matcher.regexp = pathToRegexp(matcher.originalSource, [], {\n            delimiter: '/',\n            sensitive: false,\n            strict: true,\n          }).source.replaceAll('\\\\/', '/')\n        }\n      }\n    }\n    manifest.sortedMiddleware = Object.keys(manifest.middleware)\n\n    return manifest\n  }\n\n  private async writeMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n    const middlewareManifestPath = join(\n      this.distDir,\n      'server',\n      MIDDLEWARE_MANIFEST\n    )\n    deleteCache(middlewareManifestPath)\n    await writeFileAtomic(\n      middlewareManifestPath,\n      JSON.stringify(middlewareManifest, null, 2)\n    )\n  }\n\n  async loadPagesManifest(pageName: string): Promise<void> {\n    this.pagesManifests.set(\n      getEntryKey('pages', 'server', pageName),\n      await readPartialManifest(this.distDir, PAGES_MANIFEST, pageName)\n    )\n  }\n\n  private mergePagesManifests(manifests: Iterable<PagesManifest>) {\n    const manifest: PagesManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writePagesManifest(): Promise<void> {\n    const pagesManifest = this.mergePagesManifests(this.pagesManifests.values())\n    const pagesManifestPath = join(this.distDir, 'server', PAGES_MANIFEST)\n    deleteCache(pagesManifestPath)\n    await writeFileAtomic(\n      pagesManifestPath,\n      JSON.stringify(pagesManifest, null, 2)\n    )\n  }\n\n  async writeManifests({\n    rewrites,\n    pageEntrypoints,\n  }: {\n    rewrites: SetupOpts['fsChecker']['rewrites']\n    pageEntrypoints: PageEntrypoints\n  }) {\n    await this.writeActionManifest()\n    await this.writeAppBuildManifest()\n    await this.writeAppPathsManifest()\n    await this.writeAutomaticFontOptimizationManifest()\n    await this.writeBuildManifest(pageEntrypoints, rewrites)\n    await this.writeFallbackBuildManifest()\n    await this.writeLoadableManifest()\n    await this.writeMiddlewareManifest()\n    await this.writeNextFontManifest()\n    await this.writePagesManifest()\n  }\n}\n"],"names":["pathToRegexp","APP_BUILD_MANIFEST","APP_PATHS_MANIFEST","AUTOMATIC_FONT_OPTIMIZATION_MANIFEST","BUILD_MANIFEST","INTERCEPTION_ROUTE_REWRITE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","NEXT_FONT_MANIFEST","PAGES_MANIFEST","REACT_LOADABLE_MANIFEST","SERVER_REFERENCE_MANIFEST","join","posix","readFile","writeFile","deleteCache","writeFileAtomic","isInterceptionRouteRewrite","normalizeRewritesForBuildManifest","srcEmptySsgManifest","processRoute","getAssetPathFromRoute","getEntryKey","readPartialManifest","distDir","name","pageName","type","manifestPath","JSON","parse","TurbopackManifestLoader","constructor","buildId","encryptionKey","actionManifests","Map","appBuildManifests","appPathsManifests","buildManifests","fontManifests","loadableManifests","middlewareManifests","pagesManifests","delete","key","loadActionManifest","set","mergeActionManifests","manifests","manifest","node","edge","mergeActionIds","actionEntries","other","action","workers","layer","Object","assign","m","writeActionManifest","actionManifest","values","actionManifestJsonPath","actionManifestJsPath","json","stringify","loadAppBuildManifest","mergeAppBuildManifests","pages","writeAppBuildManifest","appBuildManifest","appBuildManifestPath","loadAppPathsManifest","writeAppPathsManifest","appPathsManifest","mergePagesManifests","appPathsManifestPath","writeAutomaticFontOptimizationManifest","loadBuildManifest","mergeBuildManifests","devFiles","ampDevFiles","polyfillFiles","lowPriorityFiles","rootMainFiles","ampFirstPages","length","writeBuildManifest","pageEntrypoints","rewrites","processedRewrites","beforeFiles","map","afterFiles","fallback","buildManifest","buildManifestPath","middlewareBuildManifestPath","interceptionRewriteManifestPath","interceptionRewrites","filter","content","__rewrites","fromEntries","keys","pathname","sortedPages","buildManifestJs","writeFallbackBuildManifest","fallbackBuildManifest","get","Boolean","fallbackBuildManifestPath","loadFontManifest","mergeFontManifests","app","appUsingSizeAdjust","pagesUsingSizeAdjust","writeNextFontManifest","fontManifest","fontManifestJsonPath","fontManifestJsPath","loadLoadableManifest","mergeLoadableManifests","writeLoadableManifest","loadableManifest","loadableManifestPath","middlewareloadableManifestPath","loadMiddlewareManifest","getMiddlewareManifest","deleteMiddlewareManifest","mergeMiddlewareManifests","version","middleware","sortedMiddleware","functions","instrumentation","undefined","updateFunctionDefinition","fun","files","value","concat","matcher","matchers","regexp","originalSource","delimiter","sensitive","strict","source","replaceAll","writeMiddlewareManifest","middlewareManifest","middlewareManifestPath","loadPagesManifest","writePagesManifest","pagesManifest","pagesManifestPath","writeManifests"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}