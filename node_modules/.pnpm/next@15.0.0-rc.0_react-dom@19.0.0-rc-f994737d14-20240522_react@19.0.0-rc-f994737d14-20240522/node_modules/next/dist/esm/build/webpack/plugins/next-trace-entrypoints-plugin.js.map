{"version":3,"sources":["../../../../src/build/webpack/plugins/next-trace-entrypoints-plugin.ts"],"sourcesContent":["import nodePath from 'path'\nimport crypto from 'crypto'\nimport type { Span } from '../../../trace'\nimport { spans } from './profiling-plugin'\nimport isError from '../../../lib/is-error'\nimport { nodeFileTrace } from 'next/dist/compiled/@vercel/nft'\nimport type { NodeFileTraceReasons } from 'next/dist/compiled/@vercel/nft'\nimport {\n  CLIENT_REFERENCE_MANIFEST,\n  TRACE_OUTPUT_VERSION,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  type CompilerNameValues,\n} from '../../../shared/lib/constants'\nimport { webpack, sources } from 'next/dist/compiled/webpack/webpack'\nimport {\n  NODE_ESM_RESOLVE_OPTIONS,\n  NODE_RESOLVE_OPTIONS,\n} from '../../webpack-config'\nimport type { NextConfigComplete } from '../../../server/config-shared'\nimport { loadBindings } from '../../swc'\nimport picomatch from 'next/dist/compiled/picomatch'\nimport { getModuleBuildInfo } from '../loaders/get-module-build-info'\nimport { getPageFilePath } from '../../entries'\nimport { resolveExternal } from '../../handle-externals'\n\nconst PLUGIN_NAME = 'TraceEntryPointsPlugin'\nexport const TRACE_IGNORES = [\n  '**/*/next/dist/server/next.js',\n  '**/*/next/dist/bin/next',\n]\n\nconst NOT_TRACEABLE = [\n  '.wasm',\n  '.png',\n  '.jpg',\n  '.jpeg',\n  '.gif',\n  '.webp',\n  '.avif',\n  '.ico',\n  '.bmp',\n  '.svg',\n]\n\nfunction getModuleFromDependency(\n  compilation: any,\n  dep: any\n): webpack.Module & { resource?: string; request?: string } {\n  return compilation.moduleGraph.getModule(dep)\n}\n\nexport function getFilesMapFromReasons(\n  fileList: Set<string>,\n  reasons: NodeFileTraceReasons,\n  ignoreFn?: (file: string, parent?: string) => Boolean\n) {\n  // this uses the reasons tree to collect files specific to a\n  // certain parent allowing us to not have to trace each parent\n  // separately\n  const parentFilesMap = new Map<string, Map<string, { ignored: boolean }>>()\n\n  function propagateToParents(\n    parents: Set<string>,\n    file: string,\n    seen = new Set<string>()\n  ) {\n    for (const parent of parents || []) {\n      if (!seen.has(parent)) {\n        seen.add(parent)\n        let parentFiles = parentFilesMap.get(parent)\n\n        if (!parentFiles) {\n          parentFiles = new Map()\n          parentFilesMap.set(parent, parentFiles)\n        }\n        const ignored = Boolean(ignoreFn?.(file, parent))\n        parentFiles.set(file, { ignored })\n\n        const parentReason = reasons.get(parent)\n\n        if (parentReason?.parents) {\n          propagateToParents(parentReason.parents, file, seen)\n        }\n      }\n    }\n  }\n\n  for (const file of fileList!) {\n    const reason = reasons!.get(file)\n    const isInitial =\n      reason?.type.length === 1 && reason.type.includes('initial')\n\n    if (\n      !reason ||\n      !reason.parents ||\n      (isInitial && reason.parents.size === 0)\n    ) {\n      continue\n    }\n    propagateToParents(reason.parents, file)\n  }\n  return parentFilesMap\n}\n\nexport interface TurbotraceAction {\n  action: 'print' | 'annotate'\n  input: string[]\n  contextDirectory: string\n  processCwd: string\n  logLevel?: NonNullable<\n    NextConfigComplete['experimental']['turbotrace']\n  >['logLevel']\n  showAll?: boolean\n  memoryLimit?: number\n}\n\nexport interface BuildTraceContext {\n  entriesTrace?: {\n    action: TurbotraceAction\n    appDir: string\n    outputPath: string\n    depModArray: string[]\n    entryNameMap: Record<string, string>\n  }\n  chunksTrace?: {\n    action: TurbotraceAction\n    outputPath: string\n    entryNameFilesMap: Record<string, Array<string>>\n  }\n}\n\nexport function getHash(content: string | Buffer): string {\n  return crypto.createHash('sha1').update(content).digest('hex')\n}\n\nexport class TraceEntryPointsPlugin implements webpack.WebpackPluginInstance {\n  public buildTraceContext: BuildTraceContext = {}\n\n  private rootDir: string\n  private appDir: string | undefined\n  private pagesDir: string | undefined\n  private optOutBundlingPackages: string[]\n  private appDirEnabled?: boolean\n  private tracingRoot: string\n  private entryTraces: Map<string, Map<string, { bundled: boolean }>>\n  private traceIgnores: string[]\n  private esmExternals?: NextConfigComplete['experimental']['esmExternals']\n  private turbotrace?: NextConfigComplete['experimental']['turbotrace']\n  private traceHashes: Map<string, string>\n  private flyingShuttle?: boolean\n  private compilerType: CompilerNameValues\n\n  constructor({\n    rootDir,\n    appDir,\n    pagesDir,\n    compilerType,\n    optOutBundlingPackages,\n    appDirEnabled,\n    traceIgnores,\n    esmExternals,\n    outputFileTracingRoot,\n    turbotrace,\n    flyingShuttle,\n  }: {\n    rootDir: string\n    compilerType: CompilerNameValues\n    flyingShuttle?: boolean\n    appDir: string | undefined\n    pagesDir: string | undefined\n    optOutBundlingPackages: string[]\n    appDirEnabled?: boolean\n    traceIgnores?: string[]\n    outputFileTracingRoot?: string\n    esmExternals?: NextConfigComplete['experimental']['esmExternals']\n    turbotrace?: NextConfigComplete['experimental']['turbotrace']\n  }) {\n    this.rootDir = rootDir\n    this.appDir = appDir\n    this.pagesDir = pagesDir\n    this.entryTraces = new Map()\n    this.esmExternals = esmExternals\n    this.appDirEnabled = appDirEnabled\n    this.traceIgnores = traceIgnores || []\n    this.tracingRoot = outputFileTracingRoot || rootDir\n    this.turbotrace = turbotrace\n    this.optOutBundlingPackages = optOutBundlingPackages\n    this.flyingShuttle = flyingShuttle\n    this.traceHashes = new Map()\n    this.compilerType = compilerType\n  }\n\n  // Here we output all traced assets and webpack chunks to a\n  // ${page}.js.nft.json file\n  async createTraceAssets(\n    compilation: webpack.Compilation,\n    assets: any,\n    span: Span\n  ) {\n    const outputPath = compilation.outputOptions.path || ''\n\n    await span.traceChild('create-trace-assets').traceAsyncFn(async () => {\n      const entryFilesMap = new Map<any, Set<string>>()\n      const chunksToTrace = new Set<string>()\n      const entryNameFilesMap = new Map<string, Array<string>>()\n\n      const isTraceable = (file: string) =>\n        !NOT_TRACEABLE.some((suffix) => {\n          return file.endsWith(suffix)\n        })\n\n      for (const entrypoint of compilation.entrypoints.values()) {\n        const entryFiles = new Set<string>()\n\n        for (const chunk of entrypoint\n          .getEntrypointChunk()\n          .getAllReferencedChunks()) {\n          for (const file of chunk.files) {\n            if (isTraceable(file)) {\n              const filePath = nodePath.join(outputPath, file)\n              chunksToTrace.add(filePath)\n              entryFiles.add(filePath)\n            }\n          }\n          for (const file of chunk.auxiliaryFiles) {\n            if (isTraceable(file)) {\n              const filePath = nodePath.join(outputPath, file)\n              chunksToTrace.add(filePath)\n              entryFiles.add(filePath)\n            }\n          }\n        }\n        entryFilesMap.set(entrypoint, entryFiles)\n        entryNameFilesMap.set(entrypoint.name || '', [...entryFiles])\n      }\n\n      // startTrace existed and callable\n      this.buildTraceContext.chunksTrace = {\n        action: {\n          action: 'annotate',\n          input: [...chunksToTrace],\n          contextDirectory:\n            this.turbotrace?.contextDirectory ?? this.tracingRoot,\n          processCwd: this.turbotrace?.processCwd ?? this.rootDir,\n          showAll: this.turbotrace?.logAll,\n          logLevel: this.turbotrace?.logLevel,\n        },\n        outputPath,\n        entryNameFilesMap: Object.fromEntries(entryNameFilesMap),\n      }\n      const distDir = nodePath.join(\n        outputPath,\n        this.compilerType === 'server' ? '../..' : '../'\n      )\n\n      // server compiler outputs to `server/chunks` so we traverse up\n      // one, but edge-server does not so don't for that one\n      const outputPrefix = this.compilerType === 'server' ? '../' : ''\n\n      for (const [entrypoint, entryFiles] of entryFilesMap) {\n        const traceOutputName = `${outputPrefix}${entrypoint.name}.js.nft.json`\n        const traceOutputPath = nodePath.dirname(\n          nodePath.join(outputPath, traceOutputName)\n        )\n\n        // don't include the entry itself in the trace\n        entryFiles.delete(\n          nodePath.join(outputPath, `${outputPrefix}${entrypoint.name}.js`)\n        )\n\n        if (entrypoint.name.startsWith('app/')) {\n          // include the client reference manifest\n          const clientManifestsForPage =\n            entrypoint.name.endsWith('/page') ||\n            entrypoint.name === UNDERSCORE_NOT_FOUND_ROUTE_ENTRY\n              ? nodePath.join(\n                  outputPath,\n                  outputPrefix,\n                  entrypoint.name.replace(/%5F/g, '_') +\n                    '_' +\n                    CLIENT_REFERENCE_MANIFEST +\n                    '.js'\n                )\n              : null\n\n          if (clientManifestsForPage !== null) {\n            entryFiles.add(clientManifestsForPage)\n          }\n        }\n\n        const finalFiles: string[] = []\n        const readFile = (path: string): Promise<Buffer | string> => {\n          return new Promise((resolve, reject) => {\n            compilation.inputFileSystem.readFile(path, (err, result) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(result || '')\n            })\n          })\n        }\n        const fileHashes: Record<string, string> = {}\n\n        await Promise.all(\n          [\n            ...new Set([\n              ...entryFiles,\n              ...(this.entryTraces.get(entrypoint.name)?.keys() || []),\n            ]),\n          ].map(async (file) => {\n            const fileInfo = this.entryTraces.get(entrypoint.name)?.get(file)\n\n            const relativeFile = nodePath\n              .relative(traceOutputPath, file)\n              .replace(/\\\\/g, '/')\n\n            if (file) {\n              if (!file.startsWith(distDir) && this.flyingShuttle) {\n                let hash = this.traceHashes.get(file)\n\n                // file isn't read during tracing so calculate hash now\n                if (!hash) {\n                  hash = getHash(await readFile(file))\n                  this.traceHashes.set(file, hash)\n                }\n                fileHashes[relativeFile] = hash\n              }\n\n              if (!fileInfo?.bundled) {\n                finalFiles.push(relativeFile)\n              }\n            }\n          })\n        )\n\n        assets[traceOutputName] = new sources.RawSource(\n          JSON.stringify({\n            version: TRACE_OUTPUT_VERSION,\n            files: finalFiles,\n\n            ...(this.flyingShuttle\n              ? {\n                  fileHashes,\n                }\n              : {}),\n          })\n        )\n      }\n    })\n  }\n\n  tapfinishModules(\n    compilation: webpack.Compilation,\n    traceEntrypointsPluginSpan: Span,\n    doResolve: (\n      request: string,\n      parent: string,\n      job: import('@vercel/nft/out/node-file-trace').Job,\n      isEsmRequested: boolean\n    ) => Promise<string>,\n    readlink: any,\n    stat: any\n  ) {\n    async function getOriginalHash(path: string): Promise<string> {\n      return new Promise((resolve, reject) => {\n        if (path.includes('?')) {\n          path = path.substring(0, path.indexOf('?'))\n        }\n        compilation.inputFileSystem.readFile(path, (err, result) => {\n          if (err) {\n            return reject(err)\n          }\n          resolve(getHash(result || ''))\n        })\n      })\n    }\n\n    compilation.hooks.finishModules.tapAsync(\n      PLUGIN_NAME,\n      async (_stats: any, callback: any) => {\n        const finishModulesSpan =\n          traceEntrypointsPluginSpan.traceChild('finish-modules')\n        await finishModulesSpan\n          .traceAsyncFn(async () => {\n            // we create entry -> module maps so that we can\n            // look them up faster instead of having to iterate\n            // over the compilation modules list\n            const entryNameMap = new Map<string, string>()\n            const entryModMap = new Map<string, any>()\n            const additionalEntries = new Map<string, Map<string, any>>()\n\n            const depModMap = new Map<string, any>()\n\n            await finishModulesSpan\n              .traceChild('get-entries')\n              .traceAsyncFn(async () => {\n                for (const [name, entry] of compilation.entries.entries()) {\n                  const normalizedName = name?.replace(/\\\\/g, '/')\n\n                  const isPage = normalizedName.startsWith('pages/')\n                  const isApp =\n                    this.appDirEnabled && normalizedName.startsWith('app/')\n\n                  if (isApp || isPage) {\n                    for (const dep of entry.dependencies) {\n                      if (!dep) continue\n                      const entryMod = getModuleFromDependency(compilation, dep)\n\n                      // Handle case where entry is a loader coming from Next.js.\n                      // For example edge-loader or app-loader.\n                      if (entryMod && entryMod.resource === '') {\n                        const moduleBuildInfo = getModuleBuildInfo(entryMod)\n                        // All loaders that are used to create entries have a `route` property on the buildInfo.\n                        if (moduleBuildInfo.route) {\n                          const absolutePath = getPageFilePath({\n                            absolutePagePath:\n                              moduleBuildInfo.route.absolutePagePath,\n                            rootDir: this.rootDir,\n                            appDir: this.appDir,\n                            pagesDir: this.pagesDir,\n                          })\n\n                          // Ensures we don't handle non-pages.\n                          if (\n                            (this.pagesDir &&\n                              absolutePath.startsWith(this.pagesDir)) ||\n                            (this.appDir &&\n                              absolutePath.startsWith(this.appDir))\n                          ) {\n                            if (this.flyingShuttle) {\n                              this.traceHashes.set(\n                                absolutePath,\n                                await getOriginalHash(absolutePath)\n                              )\n                            }\n                            entryModMap.set(absolutePath, entryMod)\n                            entryNameMap.set(absolutePath, name)\n                          }\n                        }\n\n                        // If there was no `route` property, we can assume that it was something custom instead.\n                        // In order to trace these we add them to the additionalEntries map.\n                        if (entryMod.request) {\n                          let curMap = additionalEntries.get(name)\n\n                          if (!curMap) {\n                            curMap = new Map()\n                            additionalEntries.set(name, curMap)\n                          }\n                          depModMap.set(entryMod.request, entryMod)\n                          curMap.set(entryMod.resource, entryMod)\n                        }\n                      }\n\n                      if (entryMod && entryMod.resource) {\n                        entryNameMap.set(entryMod.resource, name)\n                        entryModMap.set(entryMod.resource, entryMod)\n\n                        let curMap = additionalEntries.get(name)\n\n                        if (!curMap) {\n                          curMap = new Map()\n                          additionalEntries.set(name, curMap)\n                        }\n                        if (this.flyingShuttle) {\n                          this.traceHashes.set(\n                            entryMod.resource,\n                            await getOriginalHash(entryMod.resource)\n                          )\n                        }\n                        depModMap.set(entryMod.resource, entryMod)\n                        curMap.set(entryMod.resource, entryMod)\n                      }\n                    }\n                  }\n                }\n              })\n\n            const readFile = async (\n              path: string\n            ): Promise<Buffer | string | null> => {\n              const mod = depModMap.get(path) || entryModMap.get(path)\n\n              // map the transpiled source when available to avoid\n              // parse errors in node-file-trace\n              const source = mod?.originalSource?.()\n\n              if (source) {\n                return source.buffer()\n              }\n              // we don't want to analyze non-transpiled\n              // files here, that is done against webpack output\n              return ''\n            }\n\n            const entryPaths = Array.from(entryModMap.keys())\n\n            const collectDependencies = async (mod: any) => {\n              if (!mod || !mod.dependencies) return\n\n              for (const dep of mod.dependencies) {\n                const depMod = getModuleFromDependency(compilation, dep)\n\n                if (depMod?.resource && !depModMap.get(depMod.resource)) {\n                  if (this.flyingShuttle) {\n                    this.traceHashes.set(\n                      depMod.resource,\n                      await getOriginalHash(depMod.resource)\n                    )\n                  }\n                  depModMap.set(depMod.resource, depMod)\n                  await collectDependencies(depMod)\n                }\n              }\n            }\n            const entriesToTrace = [...entryPaths]\n\n            for (const entry of entryPaths) {\n              await collectDependencies(entryModMap.get(entry))\n              const entryName = entryNameMap.get(entry)!\n              const curExtraEntries = additionalEntries.get(entryName)\n\n              if (curExtraEntries) {\n                entriesToTrace.push(...curExtraEntries.keys())\n              }\n            }\n\n            const contextDirectory =\n              this.turbotrace?.contextDirectory ?? this.tracingRoot\n            const chunks = [...entriesToTrace]\n\n            this.buildTraceContext.entriesTrace = {\n              action: {\n                action: 'print',\n                input: chunks,\n                contextDirectory,\n                processCwd: this.turbotrace?.processCwd ?? this.rootDir,\n                logLevel: this.turbotrace?.logLevel,\n                showAll: this.turbotrace?.logAll,\n              },\n              appDir: this.rootDir,\n              depModArray: Array.from(depModMap.keys()),\n              entryNameMap: Object.fromEntries(entryNameMap),\n              outputPath: compilation.outputOptions.path!,\n            }\n\n            // if we're using turbotrace we can skip tracing\n            // loader contents as it should be able to capture\n            // fs usage in final chunks instead\n            if (this.turbotrace) {\n              let binding = await loadBindings()\n              if (\n                !binding?.isWasm &&\n                typeof binding.turbo.startTrace === 'function'\n              ) {\n                return\n              }\n            }\n\n            let fileList: Set<string>\n            let reasons: NodeFileTraceReasons\n            const ignores = [\n              ...TRACE_IGNORES,\n              ...this.traceIgnores,\n              '**/node_modules/**',\n            ]\n\n            // pre-compile the ignore matcher to avoid repeating on every ignoreFn call\n            const isIgnoreMatcher = picomatch(ignores, {\n              contains: true,\n              dot: true,\n            })\n            const ignoreFn = (path: string) => {\n              return isIgnoreMatcher(path)\n            }\n\n            await finishModulesSpan\n              .traceChild('node-file-trace-plugin', {\n                traceEntryCount: entriesToTrace.length + '',\n              })\n              .traceAsyncFn(async () => {\n                const result = await nodeFileTrace(entriesToTrace, {\n                  base: this.tracingRoot,\n                  processCwd: this.rootDir,\n                  readFile,\n                  readlink,\n                  stat,\n                  resolve: doResolve\n                    ? async (id, parent, job, isCjs) => {\n                        return doResolve(id, parent, job, !isCjs)\n                      }\n                    : undefined,\n                  ignore: ignoreFn,\n                  mixedModules: true,\n                })\n                // @ts-ignore\n                fileList = result.fileList\n                result.esmFileList.forEach((file) => fileList.add(file))\n                reasons = result.reasons\n              })\n\n            await finishModulesSpan\n              .traceChild('collect-traced-files')\n              .traceAsyncFn(() => {\n                const parentFilesMap = getFilesMapFromReasons(\n                  fileList,\n                  reasons,\n                  (file) => {\n                    // if a file was imported and a loader handled it\n                    // we don't include it in the trace e.g.\n                    // static image imports, CSS imports\n                    file = nodePath.join(this.tracingRoot, file)\n                    const depMod = depModMap.get(file)\n                    const isAsset = reasons\n                      .get(nodePath.relative(this.tracingRoot, file))\n                      ?.type.includes('asset')\n\n                    return (\n                      !isAsset &&\n                      Array.isArray(depMod?.loaders) &&\n                      depMod.loaders.length > 0\n                    )\n                  }\n                )\n\n                for (const entry of entryPaths) {\n                  const entryName = entryNameMap.get(entry)!\n                  const normalizedEntry = nodePath.relative(\n                    this.tracingRoot,\n                    entry\n                  )\n\n                  const curExtraEntries = additionalEntries.get(entryName)\n                  const finalDeps = new Map<string, { bundled: boolean }>()\n\n                  // ensure we include entry source file as well for\n                  // hash comparison\n                  finalDeps.set(entry, {\n                    bundled: true,\n                  })\n\n                  for (const [dep, info] of parentFilesMap\n                    .get(normalizedEntry)\n                    ?.entries() || []) {\n                    finalDeps.set(nodePath.join(this.tracingRoot, dep), {\n                      bundled: info.ignored,\n                    })\n                  }\n\n                  if (curExtraEntries) {\n                    for (const extraEntry of curExtraEntries.keys()) {\n                      const normalizedExtraEntry = nodePath.relative(\n                        this.tracingRoot,\n                        extraEntry\n                      )\n                      finalDeps.set(extraEntry, { bundled: false })\n\n                      for (const [dep, info] of parentFilesMap\n                        .get(normalizedExtraEntry)\n                        ?.entries() || []) {\n                        finalDeps.set(nodePath.join(this.tracingRoot, dep), {\n                          bundled: info.ignored,\n                        })\n                      }\n                    }\n                  }\n                  this.entryTraces.set(entryName, finalDeps)\n                }\n              })\n          })\n          .then(\n            () => callback(),\n            (err) => callback(err)\n          )\n      }\n    )\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {\n      const readlink = async (path: string): Promise<string | null> => {\n        try {\n          return await new Promise((resolve, reject) => {\n            ;(\n              compilation.inputFileSystem\n                .readlink as typeof import('fs').readlink\n            )(path, (err, link) => {\n              if (err) return reject(err)\n              resolve(link)\n            })\n          })\n        } catch (e) {\n          if (\n            isError(e) &&\n            (e.code === 'EINVAL' || e.code === 'ENOENT' || e.code === 'UNKNOWN')\n          ) {\n            return null\n          }\n          throw e\n        }\n      }\n      const stat = async (path: string): Promise<import('fs').Stats | null> => {\n        try {\n          return await new Promise((resolve, reject) => {\n            ;(compilation.inputFileSystem.stat as typeof import('fs').stat)(\n              path,\n              (err, stats) => {\n                if (err) return reject(err)\n                resolve(stats)\n              }\n            )\n          })\n        } catch (e) {\n          if (isError(e) && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) {\n            return null\n          }\n          throw e\n        }\n      }\n\n      const compilationSpan = spans.get(compilation) || spans.get(compiler)!\n      const traceEntrypointsPluginSpan = compilationSpan.traceChild(\n        'next-trace-entrypoint-plugin'\n      )\n      traceEntrypointsPluginSpan.traceFn(() => {\n        compilation.hooks.processAssets.tapAsync(\n          {\n            name: PLUGIN_NAME,\n            stage: webpack.Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE,\n          },\n          (assets: any, callback: any) => {\n            this.createTraceAssets(\n              compilation,\n              assets,\n              traceEntrypointsPluginSpan\n            )\n              .then(() => callback())\n              .catch((err) => callback(err))\n          }\n        )\n\n        let resolver = compilation.resolverFactory.get('normal')\n\n        function getPkgName(name: string) {\n          const segments = name.split('/')\n          if (name[0] === '@' && segments.length > 1)\n            return segments.length > 1 ? segments.slice(0, 2).join('/') : null\n          return segments.length ? segments[0] : null\n        }\n\n        const getResolve = (\n          options: Parameters<typeof resolver.withOptions>[0]\n        ) => {\n          const curResolver = resolver.withOptions(options)\n\n          return (\n            parent: string,\n            request: string,\n            job: import('@vercel/nft/out/node-file-trace').Job\n          ) =>\n            new Promise<[string, boolean]>((resolve, reject) => {\n              const context = nodePath.dirname(parent)\n\n              curResolver.resolve(\n                {},\n                context,\n                request,\n                {\n                  fileDependencies: compilation.fileDependencies,\n                  missingDependencies: compilation.missingDependencies,\n                  contextDependencies: compilation.contextDependencies,\n                },\n                async (err: any, result?, resContext?) => {\n                  if (err) return reject(err)\n\n                  if (!result) {\n                    return reject(new Error('module not found'))\n                  }\n\n                  // webpack resolver doesn't strip loader query info\n                  // from the result so use path instead\n                  if (result.includes('?') || result.includes('!')) {\n                    result = resContext?.path || result\n                  }\n\n                  try {\n                    // we need to collect all parent package.json's used\n                    // as webpack's resolve doesn't expose this and parent\n                    // package.json could be needed for resolving e.g. stylis\n                    // stylis/package.json -> stylis/dist/umd/package.json\n                    if (result.includes('node_modules')) {\n                      let requestPath = result\n                        .replace(/\\\\/g, '/')\n                        .replace(/\\0/g, '')\n\n                      if (\n                        !nodePath.isAbsolute(request) &&\n                        request.includes('/') &&\n                        resContext?.descriptionFileRoot\n                      ) {\n                        requestPath = (\n                          resContext.descriptionFileRoot +\n                          request.slice(getPkgName(request)?.length || 0) +\n                          nodePath.sep +\n                          'package.json'\n                        )\n                          .replace(/\\\\/g, '/')\n                          .replace(/\\0/g, '')\n                      }\n\n                      const rootSeparatorIndex = requestPath.indexOf('/')\n                      let separatorIndex: number\n                      while (\n                        (separatorIndex = requestPath.lastIndexOf('/')) >\n                        rootSeparatorIndex\n                      ) {\n                        requestPath = requestPath.slice(0, separatorIndex)\n                        const curPackageJsonPath = `${requestPath}/package.json`\n                        if (await job.isFile(curPackageJsonPath)) {\n                          await job.emitFile(\n                            await job.realpath(curPackageJsonPath),\n                            'resolve',\n                            parent\n                          )\n                        }\n                      }\n                    }\n                  } catch (_err) {\n                    // we failed to resolve the package.json boundary,\n                    // we don't block emitting the initial asset from this\n                  }\n                  resolve([result, options.dependencyType === 'esm'])\n                }\n              )\n            })\n        }\n\n        const CJS_RESOLVE_OPTIONS = {\n          ...NODE_RESOLVE_OPTIONS,\n          fullySpecified: undefined,\n          modules: undefined,\n          extensions: undefined,\n        }\n        const BASE_CJS_RESOLVE_OPTIONS = {\n          ...CJS_RESOLVE_OPTIONS,\n          alias: false,\n        }\n        const ESM_RESOLVE_OPTIONS = {\n          ...NODE_ESM_RESOLVE_OPTIONS,\n          fullySpecified: undefined,\n          modules: undefined,\n          extensions: undefined,\n        }\n        const BASE_ESM_RESOLVE_OPTIONS = {\n          ...ESM_RESOLVE_OPTIONS,\n          alias: false,\n        }\n\n        const doResolve = async (\n          request: string,\n          parent: string,\n          job: import('@vercel/nft/out/node-file-trace').Job,\n          isEsmRequested: boolean\n        ): Promise<string> => {\n          const context = nodePath.dirname(parent)\n          // When in esm externals mode, and using import, we resolve with\n          // ESM resolving options.\n          const { res } = await resolveExternal(\n            this.rootDir,\n            this.esmExternals,\n            context,\n            request,\n            isEsmRequested,\n            this.optOutBundlingPackages,\n            (options) => (_: string, resRequest: string) => {\n              return getResolve(options)(parent, resRequest, job)\n            },\n            undefined,\n            undefined,\n            ESM_RESOLVE_OPTIONS,\n            CJS_RESOLVE_OPTIONS,\n            BASE_ESM_RESOLVE_OPTIONS,\n            BASE_CJS_RESOLVE_OPTIONS\n          )\n\n          if (!res) {\n            throw new Error(`failed to resolve ${request} from ${parent}`)\n          }\n          return res.replace(/\\0/g, '')\n        }\n\n        this.tapfinishModules(\n          compilation,\n          traceEntrypointsPluginSpan,\n          doResolve,\n          readlink,\n          stat\n        )\n      })\n    })\n  }\n}\n"],"names":["nodePath","crypto","spans","isError","nodeFileTrace","CLIENT_REFERENCE_MANIFEST","TRACE_OUTPUT_VERSION","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","webpack","sources","NODE_ESM_RESOLVE_OPTIONS","NODE_RESOLVE_OPTIONS","loadBindings","picomatch","getModuleBuildInfo","getPageFilePath","resolveExternal","PLUGIN_NAME","TRACE_IGNORES","NOT_TRACEABLE","getModuleFromDependency","compilation","dep","moduleGraph","getModule","getFilesMapFromReasons","fileList","reasons","ignoreFn","parentFilesMap","Map","propagateToParents","parents","file","seen","Set","parent","has","add","parentFiles","get","set","ignored","Boolean","parentReason","reason","isInitial","type","length","includes","size","getHash","content","createHash","update","digest","TraceEntryPointsPlugin","constructor","rootDir","appDir","pagesDir","compilerType","optOutBundlingPackages","appDirEnabled","traceIgnores","esmExternals","outputFileTracingRoot","turbotrace","flyingShuttle","buildTraceContext","entryTraces","tracingRoot","traceHashes","createTraceAssets","assets","span","outputPath","outputOptions","path","traceChild","traceAsyncFn","entryFilesMap","chunksToTrace","entryNameFilesMap","isTraceable","some","suffix","endsWith","entrypoint","entrypoints","values","entryFiles","chunk","getEntrypointChunk","getAllReferencedChunks","files","filePath","join","auxiliaryFiles","name","chunksTrace","action","input","contextDirectory","processCwd","showAll","logAll","logLevel","Object","fromEntries","distDir","outputPrefix","traceOutputName","traceOutputPath","dirname","delete","startsWith","clientManifestsForPage","replace","finalFiles","readFile","Promise","resolve","reject","inputFileSystem","err","result","fileHashes","all","keys","map","fileInfo","relativeFile","relative","hash","bundled","push","RawSource","JSON","stringify","version","tapfinishModules","traceEntrypointsPluginSpan","doResolve","readlink","stat","getOriginalHash","substring","indexOf","hooks","finishModules","tapAsync","_stats","callback","finishModulesSpan","entryNameMap","entryModMap","additionalEntries","depModMap","entry","entries","normalizedName","isPage","isApp","dependencies","entryMod","resource","moduleBuildInfo","route","absolutePath","absolutePagePath","request","curMap","mod","source","originalSource","buffer","entryPaths","Array","from","collectDependencies","depMod","entriesToTrace","entryName","curExtraEntries","chunks","entriesTrace","depModArray","binding","isWasm","turbo","startTrace","ignores","isIgnoreMatcher","contains","dot","traceEntryCount","base","id","job","isCjs","undefined","ignore","mixedModules","esmFileList","forEach","isAsset","isArray","loaders","normalizedEntry","finalDeps","info","extraEntry","normalizedExtraEntry","then","apply","compiler","tap","link","e","code","stats","compilationSpan","traceFn","processAssets","stage","Compilation","PROCESS_ASSETS_STAGE_SUMMARIZE","catch","resolver","resolverFactory","getPkgName","segments","split","slice","getResolve","options","curResolver","withOptions","context","fileDependencies","missingDependencies","contextDependencies","resContext","Error","requestPath","isAbsolute","descriptionFileRoot","sep","rootSeparatorIndex","separatorIndex","lastIndexOf","curPackageJsonPath","isFile","emitFile","realpath","_err","dependencyType","CJS_RESOLVE_OPTIONS","fullySpecified","modules","extensions","BASE_CJS_RESOLVE_OPTIONS","alias","ESM_RESOLVE_OPTIONS","BASE_ESM_RESOLVE_OPTIONS","isEsmRequested","res","_","resRequest"],"rangeMappingsmappings":"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"}