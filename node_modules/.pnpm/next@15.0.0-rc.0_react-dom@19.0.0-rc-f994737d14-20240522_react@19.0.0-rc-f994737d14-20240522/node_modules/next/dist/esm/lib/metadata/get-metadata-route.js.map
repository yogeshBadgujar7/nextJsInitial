{"version":3,"sources":["../../../src/lib/metadata/get-metadata-route.ts"],"sourcesContent":["import { isMetadataRoute, isStaticMetadataRoute } from './is-metadata-route'\nimport path from '../../shared/lib/isomorphic/path'\nimport { interpolateDynamicPath } from '../../server/server-utils'\nimport { getNamedRouteRegex } from '../../shared/lib/router/utils/route-regex'\nimport { djb2Hash } from '../../shared/lib/hash'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { normalizePathSep } from '../../shared/lib/page-path/normalize-path-sep'\n\n/*\n * If there's special convention like (...) or @ in the page path,\n * Give it a unique hash suffix to avoid conflicts\n *\n * e.g.\n * /app/open-graph.tsx -> /open-graph/route\n * /app/(post)/open-graph.tsx -> /open-graph/route-[0-9a-z]{6}\n */\nfunction getMetadataRouteSuffix(page: string) {\n  let suffix = ''\n\n  if ((page.includes('(') && page.includes(')')) || page.includes('@')) {\n    suffix = djb2Hash(page).toString(36).slice(0, 6)\n  }\n  return suffix\n}\n\n/**\n * Fill the dynamic segment in the metadata route\n *\n * Example:\n * fillMetadataSegment('/a/[slug]', { params: { slug: 'b' } }, 'open-graph') -> '/a/b/open-graph'\n *\n */\nexport function fillMetadataSegment(\n  segment: string,\n  params: any,\n  imageSegment: string\n) {\n  const pathname = normalizeAppPath(segment)\n  const routeRegex = getNamedRouteRegex(pathname, false)\n  const route = interpolateDynamicPath(pathname, params, routeRegex)\n  const suffix = getMetadataRouteSuffix(segment)\n  const routeSuffix = suffix ? `-${suffix}` : ''\n\n  const { name, ext } = path.parse(imageSegment)\n\n  return normalizePathSep(path.join(route, `${name}${routeSuffix}${ext}`))\n}\n\n/**\n * Map metadata page key to the corresponding route\n *\n * static file page key:    /app/robots.txt -> /robots.xml -> /robots.txt/route\n * dynamic route page key:  /app/robots.tsx -> /robots -> /robots.txt/route\n *\n * @param page\n * @returns\n */\nexport function normalizeMetadataRoute(page: string) {\n  if (!isMetadataRoute(page)) {\n    return page\n  }\n  let route = page\n  let suffix = ''\n  if (page === '/robots') {\n    route += '.txt'\n  } else if (page === '/manifest') {\n    route += '.webmanifest'\n  }\n  // For sitemap, we don't automatically add the route suffix since it can have sub-routes\n  else if (!page.endsWith('/sitemap')) {\n    // Remove the file extension, e.g. /route-path/robots.txt -> /route-path\n    const pathnamePrefix = page.slice(0, -(path.basename(page).length + 1))\n    suffix = getMetadataRouteSuffix(pathnamePrefix)\n  }\n  // Support both /<metadata-route.ext> and custom routes /<metadata-route>/route.ts.\n  // If it's a metadata file route, we need to append /[id]/route to the page.\n  if (!route.endsWith('/route')) {\n    const { dir, name: baseName, ext } = path.parse(route)\n    const isStaticRoute = isStaticMetadataRoute(page)\n\n    route = path.posix.join(\n      dir,\n      `${baseName}${suffix ? `-${suffix}` : ''}${ext}`,\n      isStaticRoute ? '' : '[[...__metadata_id__]]',\n      'route'\n    )\n  }\n\n  return route\n}\n"],"names":["isMetadataRoute","isStaticMetadataRoute","path","interpolateDynamicPath","getNamedRouteRegex","djb2Hash","normalizeAppPath","normalizePathSep","getMetadataRouteSuffix","page","suffix","includes","toString","slice","fillMetadataSegment","segment","params","imageSegment","pathname","routeRegex","route","routeSuffix","name","ext","parse","join","normalizeMetadataRoute","endsWith","pathnamePrefix","basename","length","dir","baseName","isStaticRoute","posix"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,SAASA,eAAe,EAAEC,qBAAqB,QAAQ,sBAAqB;AAC5E,OAAOC,UAAU,mCAAkC;AACnD,SAASC,sBAAsB,QAAQ,4BAA2B;AAClE,SAASC,kBAAkB,QAAQ,4CAA2C;AAC9E,SAASC,QAAQ,QAAQ,wBAAuB;AAChD,SAASC,gBAAgB,QAAQ,0CAAyC;AAC1E,SAASC,gBAAgB,QAAQ,gDAA+C;AAEhF;;;;;;;CAOC,GACD,SAASC,uBAAuBC,IAAY;IAC1C,IAAIC,SAAS;IAEb,IAAI,AAACD,KAAKE,QAAQ,CAAC,QAAQF,KAAKE,QAAQ,CAAC,QAASF,KAAKE,QAAQ,CAAC,MAAM;QACpED,SAASL,SAASI,MAAMG,QAAQ,CAAC,IAAIC,KAAK,CAAC,GAAG;IAChD;IACA,OAAOH;AACT;AAEA;;;;;;CAMC,GACD,OAAO,SAASI,oBACdC,OAAe,EACfC,MAAW,EACXC,YAAoB;IAEpB,MAAMC,WAAWZ,iBAAiBS;IAClC,MAAMI,aAAaf,mBAAmBc,UAAU;IAChD,MAAME,QAAQjB,uBAAuBe,UAAUF,QAAQG;IACvD,MAAMT,SAASF,uBAAuBO;IACtC,MAAMM,cAAcX,SAAS,CAAC,CAAC,EAAEA,OAAO,CAAC,GAAG;IAE5C,MAAM,EAAEY,IAAI,EAAEC,GAAG,EAAE,GAAGrB,KAAKsB,KAAK,CAACP;IAEjC,OAAOV,iBAAiBL,KAAKuB,IAAI,CAACL,OAAO,CAAC,EAAEE,KAAK,EAAED,YAAY,EAAEE,IAAI,CAAC;AACxE;AAEA;;;;;;;;CAQC,GACD,OAAO,SAASG,uBAAuBjB,IAAY;IACjD,IAAI,CAACT,gBAAgBS,OAAO;QAC1B,OAAOA;IACT;IACA,IAAIW,QAAQX;IACZ,IAAIC,SAAS;IACb,IAAID,SAAS,WAAW;QACtBW,SAAS;IACX,OAAO,IAAIX,SAAS,aAAa;QAC/BW,SAAS;IACX,OAEK,IAAI,CAACX,KAAKkB,QAAQ,CAAC,aAAa;QACnC,wEAAwE;QACxE,MAAMC,iBAAiBnB,KAAKI,KAAK,CAAC,GAAG,CAAEX,CAAAA,KAAK2B,QAAQ,CAACpB,MAAMqB,MAAM,GAAG,CAAA;QACpEpB,SAASF,uBAAuBoB;IAClC;IACA,mFAAmF;IACnF,4EAA4E;IAC5E,IAAI,CAACR,MAAMO,QAAQ,CAAC,WAAW;QAC7B,MAAM,EAAEI,GAAG,EAAET,MAAMU,QAAQ,EAAET,GAAG,EAAE,GAAGrB,KAAKsB,KAAK,CAACJ;QAChD,MAAMa,gBAAgBhC,sBAAsBQ;QAE5CW,QAAQlB,KAAKgC,KAAK,CAACT,IAAI,CACrBM,KACA,CAAC,EAAEC,SAAS,EAAEtB,SAAS,CAAC,CAAC,EAAEA,OAAO,CAAC,GAAG,GAAG,EAAEa,IAAI,CAAC,EAChDU,gBAAgB,KAAK,0BACrB;IAEJ;IAEA,OAAOb;AACT"}