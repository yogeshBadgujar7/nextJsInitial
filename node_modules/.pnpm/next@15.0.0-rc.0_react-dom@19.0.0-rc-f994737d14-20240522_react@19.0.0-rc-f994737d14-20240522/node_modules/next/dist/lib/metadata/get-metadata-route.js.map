{"version":3,"sources":["../../../src/lib/metadata/get-metadata-route.ts"],"sourcesContent":["import { isMetadataRoute, isStaticMetadataRoute } from './is-metadata-route'\nimport path from '../../shared/lib/isomorphic/path'\nimport { interpolateDynamicPath } from '../../server/server-utils'\nimport { getNamedRouteRegex } from '../../shared/lib/router/utils/route-regex'\nimport { djb2Hash } from '../../shared/lib/hash'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { normalizePathSep } from '../../shared/lib/page-path/normalize-path-sep'\n\n/*\n * If there's special convention like (...) or @ in the page path,\n * Give it a unique hash suffix to avoid conflicts\n *\n * e.g.\n * /app/open-graph.tsx -> /open-graph/route\n * /app/(post)/open-graph.tsx -> /open-graph/route-[0-9a-z]{6}\n */\nfunction getMetadataRouteSuffix(page: string) {\n  let suffix = ''\n\n  if ((page.includes('(') && page.includes(')')) || page.includes('@')) {\n    suffix = djb2Hash(page).toString(36).slice(0, 6)\n  }\n  return suffix\n}\n\n/**\n * Fill the dynamic segment in the metadata route\n *\n * Example:\n * fillMetadataSegment('/a/[slug]', { params: { slug: 'b' } }, 'open-graph') -> '/a/b/open-graph'\n *\n */\nexport function fillMetadataSegment(\n  segment: string,\n  params: any,\n  imageSegment: string\n) {\n  const pathname = normalizeAppPath(segment)\n  const routeRegex = getNamedRouteRegex(pathname, false)\n  const route = interpolateDynamicPath(pathname, params, routeRegex)\n  const suffix = getMetadataRouteSuffix(segment)\n  const routeSuffix = suffix ? `-${suffix}` : ''\n\n  const { name, ext } = path.parse(imageSegment)\n\n  return normalizePathSep(path.join(route, `${name}${routeSuffix}${ext}`))\n}\n\n/**\n * Map metadata page key to the corresponding route\n *\n * static file page key:    /app/robots.txt -> /robots.xml -> /robots.txt/route\n * dynamic route page key:  /app/robots.tsx -> /robots -> /robots.txt/route\n *\n * @param page\n * @returns\n */\nexport function normalizeMetadataRoute(page: string) {\n  if (!isMetadataRoute(page)) {\n    return page\n  }\n  let route = page\n  let suffix = ''\n  if (page === '/robots') {\n    route += '.txt'\n  } else if (page === '/manifest') {\n    route += '.webmanifest'\n  }\n  // For sitemap, we don't automatically add the route suffix since it can have sub-routes\n  else if (!page.endsWith('/sitemap')) {\n    // Remove the file extension, e.g. /route-path/robots.txt -> /route-path\n    const pathnamePrefix = page.slice(0, -(path.basename(page).length + 1))\n    suffix = getMetadataRouteSuffix(pathnamePrefix)\n  }\n  // Support both /<metadata-route.ext> and custom routes /<metadata-route>/route.ts.\n  // If it's a metadata file route, we need to append /[id]/route to the page.\n  if (!route.endsWith('/route')) {\n    const { dir, name: baseName, ext } = path.parse(route)\n    const isStaticRoute = isStaticMetadataRoute(page)\n\n    route = path.posix.join(\n      dir,\n      `${baseName}${suffix ? `-${suffix}` : ''}${ext}`,\n      isStaticRoute ? '' : '[[...__metadata_id__]]',\n      'route'\n    )\n  }\n\n  return route\n}\n"],"names":["fillMetadataSegment","normalizeMetadataRoute","getMetadataRouteSuffix","page","suffix","includes","djb2Hash","toString","slice","segment","params","imageSegment","pathname","normalizeAppPath","routeRegex","getNamedRouteRegex","route","interpolateDynamicPath","routeSuffix","name","ext","path","parse","normalizePathSep","join","isMetadataRoute","endsWith","pathnamePrefix","basename","length","dir","baseName","isStaticRoute","isStaticMetadataRoute","posix"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;;;;;IAgCgBA,mBAAmB;eAAnBA;;IAyBAC,sBAAsB;eAAtBA;;;iCAzDuC;6DACtC;6BACsB;4BACJ;sBACV;0BACQ;kCACA;;;;;;AAEjC;;;;;;;CAOC,GACD,SAASC,uBAAuBC,IAAY;IAC1C,IAAIC,SAAS;IAEb,IAAI,AAACD,KAAKE,QAAQ,CAAC,QAAQF,KAAKE,QAAQ,CAAC,QAASF,KAAKE,QAAQ,CAAC,MAAM;QACpED,SAASE,IAAAA,cAAQ,EAACH,MAAMI,QAAQ,CAAC,IAAIC,KAAK,CAAC,GAAG;IAChD;IACA,OAAOJ;AACT;AASO,SAASJ,oBACdS,OAAe,EACfC,MAAW,EACXC,YAAoB;IAEpB,MAAMC,WAAWC,IAAAA,0BAAgB,EAACJ;IAClC,MAAMK,aAAaC,IAAAA,8BAAkB,EAACH,UAAU;IAChD,MAAMI,QAAQC,IAAAA,mCAAsB,EAACL,UAAUF,QAAQI;IACvD,MAAMV,SAASF,uBAAuBO;IACtC,MAAMS,cAAcd,SAAS,CAAC,CAAC,EAAEA,OAAO,CAAC,GAAG;IAE5C,MAAM,EAAEe,IAAI,EAAEC,GAAG,EAAE,GAAGC,aAAI,CAACC,KAAK,CAACX;IAEjC,OAAOY,IAAAA,kCAAgB,EAACF,aAAI,CAACG,IAAI,CAACR,OAAO,CAAC,EAAEG,KAAK,EAAED,YAAY,EAAEE,IAAI,CAAC;AACxE;AAWO,SAASnB,uBAAuBE,IAAY;IACjD,IAAI,CAACsB,IAAAA,gCAAe,EAACtB,OAAO;QAC1B,OAAOA;IACT;IACA,IAAIa,QAAQb;IACZ,IAAIC,SAAS;IACb,IAAID,SAAS,WAAW;QACtBa,SAAS;IACX,OAAO,IAAIb,SAAS,aAAa;QAC/Ba,SAAS;IACX,OAEK,IAAI,CAACb,KAAKuB,QAAQ,CAAC,aAAa;QACnC,wEAAwE;QACxE,MAAMC,iBAAiBxB,KAAKK,KAAK,CAAC,GAAG,CAAEa,CAAAA,aAAI,CAACO,QAAQ,CAACzB,MAAM0B,MAAM,GAAG,CAAA;QACpEzB,SAASF,uBAAuByB;IAClC;IACA,mFAAmF;IACnF,4EAA4E;IAC5E,IAAI,CAACX,MAAMU,QAAQ,CAAC,WAAW;QAC7B,MAAM,EAAEI,GAAG,EAAEX,MAAMY,QAAQ,EAAEX,GAAG,EAAE,GAAGC,aAAI,CAACC,KAAK,CAACN;QAChD,MAAMgB,gBAAgBC,IAAAA,sCAAqB,EAAC9B;QAE5Ca,QAAQK,aAAI,CAACa,KAAK,CAACV,IAAI,CACrBM,KACA,CAAC,EAAEC,SAAS,EAAE3B,SAAS,CAAC,CAAC,EAAEA,OAAO,CAAC,GAAG,GAAG,EAAEgB,IAAI,CAAC,EAChDY,gBAAgB,KAAK,0BACrB;IAEJ;IAEA,OAAOhB;AACT"}