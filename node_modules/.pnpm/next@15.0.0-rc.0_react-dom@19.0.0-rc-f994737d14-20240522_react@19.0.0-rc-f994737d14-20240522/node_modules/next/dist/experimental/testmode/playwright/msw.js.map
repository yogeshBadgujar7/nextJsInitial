{"version":3,"sources":["../../../../src/experimental/testmode/playwright/msw.ts"],"sourcesContent":["import { test as base, defineConfig } from './index'\nimport type { NextFixture } from './next-fixture'\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  type RequestHandler,\n  type MockedResponse,\n  MockedRequest,\n  handleRequest,\n} from 'msw'\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Emitter } from 'strict-event-emitter'\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nexport * from 'msw'\n// eslint-disable-next-line import/no-extraneous-dependencies\nexport * from '@playwright/test'\nexport type { NextFixture }\nexport { defineConfig }\n\nexport interface MswFixture {\n  use: (...handlers: RequestHandler[]) => void\n}\n\nexport const test = base.extend<{\n  msw: MswFixture\n  mswHandlers: RequestHandler[]\n}>({\n  mswHandlers: [[], { option: true }],\n\n  msw: [\n    async ({ next, mswHandlers }, use) => {\n      const handlers: RequestHandler[] = [...mswHandlers]\n      const emitter = new Emitter()\n\n      next.onFetch(async (request) => {\n        const {\n          body,\n          method,\n          headers,\n          credentials,\n          cache,\n          redirect,\n          integrity,\n          keepalive,\n          mode,\n          destination,\n          referrer,\n          referrerPolicy,\n        } = request\n        const mockedRequest = new MockedRequest(new URL(request.url), {\n          body: body ? await request.arrayBuffer() : undefined,\n          method,\n          headers: Object.fromEntries(headers),\n          credentials,\n          cache,\n          redirect,\n          integrity,\n          keepalive,\n          mode,\n          destination,\n          referrer,\n          referrerPolicy,\n        })\n        let isUnhandled = false\n        let isPassthrough = false\n        let mockedResponse: MockedResponse | undefined\n        await handleRequest(\n          mockedRequest,\n          handlers.slice(0),\n          {\n            onUnhandledRequest: () => {\n              isUnhandled = true\n            },\n          },\n          emitter as any,\n          {\n            onPassthroughResponse: () => {\n              isPassthrough = true\n            },\n            onMockedResponse: (r) => {\n              mockedResponse = r\n            },\n          }\n        )\n\n        if (isUnhandled) {\n          return undefined\n        }\n        if (isPassthrough) {\n          return 'continue'\n        }\n\n        if (mockedResponse) {\n          const {\n            status,\n            headers: responseHeaders,\n            body: responseBody,\n            delay,\n          } = mockedResponse\n          if (delay) {\n            await new Promise((resolve) => setTimeout(resolve, delay))\n          }\n          return new Response(responseBody, {\n            status,\n            headers: new Headers(responseHeaders),\n          })\n        }\n\n        return 'abort'\n      })\n\n      await use({\n        use: (...newHandlers) => {\n          handlers.unshift(...newHandlers)\n        },\n      })\n\n      handlers.length = 0\n    },\n    { auto: true },\n  ],\n})\n\nexport default test\n"],"names":["defineConfig","test","base","extend","mswHandlers","option","msw","next","use","handlers","emitter","Emitter","onFetch","request","body","method","headers","credentials","cache","redirect","integrity","keepalive","mode","destination","referrer","referrerPolicy","mockedRequest","MockedRequest","URL","url","arrayBuffer","undefined","Object","fromEntries","isUnhandled","isPassthrough","mockedResponse","handleRequest","slice","onUnhandledRequest","onPassthroughResponse","onMockedResponse","r","status","responseHeaders","responseBody","delay","Promise","resolve","setTimeout","Response","Headers","newHandlers","unshift","length","auto"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;;;;;;IA2HA,OAAmB;eAAnB;;IA1GSA,YAAY;eAAZA,mBAAY;;IAMRC,IAAI;eAAJA;;;;uBAvB8B;kCAQpC;oCAEiB;qBAKV;;;;;;;;;;;;;;AAQP,MAAMA,OAAOC,WAAI,CAACC,MAAM,CAG5B;IACDC,aAAa;QAAC,EAAE;QAAE;YAAEC,QAAQ;QAAK;KAAE;IAEnCC,KAAK;QACH,OAAO,EAAEC,IAAI,EAAEH,WAAW,EAAE,EAAEI;YAC5B,MAAMC,WAA6B;mBAAIL;aAAY;YACnD,MAAMM,UAAU,IAAIC,2BAAO;YAE3BJ,KAAKK,OAAO,CAAC,OAAOC;gBAClB,MAAM,EACJC,IAAI,EACJC,MAAM,EACNC,OAAO,EACPC,WAAW,EACXC,KAAK,EACLC,QAAQ,EACRC,SAAS,EACTC,SAAS,EACTC,IAAI,EACJC,WAAW,EACXC,QAAQ,EACRC,cAAc,EACf,GAAGZ;gBACJ,MAAMa,gBAAgB,IAAIC,kBAAa,CAAC,IAAIC,IAAIf,QAAQgB,GAAG,GAAG;oBAC5Df,MAAMA,OAAO,MAAMD,QAAQiB,WAAW,KAAKC;oBAC3ChB;oBACAC,SAASgB,OAAOC,WAAW,CAACjB;oBAC5BC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;gBACF;gBACA,IAAIS,cAAc;gBAClB,IAAIC,gBAAgB;gBACpB,IAAIC;gBACJ,MAAMC,IAAAA,kBAAa,EACjBX,eACAjB,SAAS6B,KAAK,CAAC,IACf;oBACEC,oBAAoB;wBAClBL,cAAc;oBAChB;gBACF,GACAxB,SACA;oBACE8B,uBAAuB;wBACrBL,gBAAgB;oBAClB;oBACAM,kBAAkB,CAACC;wBACjBN,iBAAiBM;oBACnB;gBACF;gBAGF,IAAIR,aAAa;oBACf,OAAOH;gBACT;gBACA,IAAII,eAAe;oBACjB,OAAO;gBACT;gBAEA,IAAIC,gBAAgB;oBAClB,MAAM,EACJO,MAAM,EACN3B,SAAS4B,eAAe,EACxB9B,MAAM+B,YAAY,EAClBC,KAAK,EACN,GAAGV;oBACJ,IAAIU,OAAO;wBACT,MAAM,IAAIC,QAAQ,CAACC,UAAYC,WAAWD,SAASF;oBACrD;oBACA,OAAO,IAAII,SAASL,cAAc;wBAChCF;wBACA3B,SAAS,IAAImC,QAAQP;oBACvB;gBACF;gBAEA,OAAO;YACT;YAEA,MAAMpC,IAAI;gBACRA,KAAK,CAAC,GAAG4C;oBACP3C,SAAS4C,OAAO,IAAID;gBACtB;YACF;YAEA3C,SAAS6C,MAAM,GAAG;QACpB;QACA;YAAEC,MAAM;QAAK;KACd;AACH;MAEA,WAAetD"}