{"version":3,"sources":["../../../../src/server/lib/server-ipc/request-utils.ts"],"sourcesContent":["import { decorateServerError } from '../../../shared/lib/error-source'\nimport { PageNotFoundError } from '../../../shared/lib/utils'\nimport { invokeRequest } from './invoke-request'\n\nexport const deserializeErr = (serializedErr: any) => {\n  if (\n    !serializedErr ||\n    typeof serializedErr !== 'object' ||\n    !serializedErr.stack\n  ) {\n    return serializedErr\n  }\n  let ErrorType: any = Error\n\n  if (serializedErr.name === 'PageNotFoundError') {\n    ErrorType = PageNotFoundError\n  }\n\n  const err = new ErrorType(serializedErr.message)\n  err.stack = serializedErr.stack\n  err.name = serializedErr.name\n  ;(err as any).digest = serializedErr.digest\n\n  if (\n    process.env.NODE_ENV === 'development' &&\n    process.env.NEXT_RUNTIME !== 'edge'\n  ) {\n    decorateServerError(err, serializedErr.source || 'server')\n  }\n  return err\n}\n\nexport async function invokeIpcMethod({\n  fetchHostname = 'localhost',\n  method,\n  args,\n  ipcPort,\n  ipcKey,\n}: {\n  fetchHostname?: string\n  method: string\n  args: any[]\n  ipcPort?: string\n  ipcKey?: string\n}): Promise<any> {\n  if (ipcPort) {\n    const res = await invokeRequest(\n      `http://${fetchHostname}:${ipcPort}?key=${ipcKey}&method=${\n        method as string\n      }`,\n      {\n        method: 'POST',\n        headers: {},\n      },\n      JSON.stringify(args)\n    )\n    const body = await res.text()\n\n    if (body.startsWith('{') && body.endsWith('}')) {\n      const parsedBody = JSON.parse(body)\n\n      if (\n        parsedBody &&\n        typeof parsedBody === 'object' &&\n        'err' in parsedBody &&\n        'stack' in parsedBody.err\n      ) {\n        throw deserializeErr(parsedBody.err)\n      }\n      return parsedBody\n    }\n  }\n}\n"],"names":["deserializeErr","invokeIpcMethod","serializedErr","stack","ErrorType","Error","name","PageNotFoundError","err","message","digest","process","env","NODE_ENV","NEXT_RUNTIME","decorateServerError","source","fetchHostname","method","args","ipcPort","ipcKey","res","invokeRequest","headers","JSON","stringify","body","text","startsWith","endsWith","parsedBody","parse"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;;;;;IAIaA,cAAc;eAAdA;;IA4BSC,eAAe;eAAfA;;;6BAhCc;uBACF;+BACJ;AAEvB,MAAMD,iBAAiB,CAACE;IAC7B,IACE,CAACA,iBACD,OAAOA,kBAAkB,YACzB,CAACA,cAAcC,KAAK,EACpB;QACA,OAAOD;IACT;IACA,IAAIE,YAAiBC;IAErB,IAAIH,cAAcI,IAAI,KAAK,qBAAqB;QAC9CF,YAAYG,wBAAiB;IAC/B;IAEA,MAAMC,MAAM,IAAIJ,UAAUF,cAAcO,OAAO;IAC/CD,IAAIL,KAAK,GAAGD,cAAcC,KAAK;IAC/BK,IAAIF,IAAI,GAAGJ,cAAcI,IAAI;IAC3BE,IAAYE,MAAM,GAAGR,cAAcQ,MAAM;IAE3C,IACEC,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBACzBF,QAAQC,GAAG,CAACE,YAAY,KAAK,QAC7B;QACAC,IAAAA,gCAAmB,EAACP,KAAKN,cAAcc,MAAM,IAAI;IACnD;IACA,OAAOR;AACT;AAEO,eAAeP,gBAAgB,EACpCgB,gBAAgB,WAAW,EAC3BC,MAAM,EACNC,IAAI,EACJC,OAAO,EACPC,MAAM,EAOP;IACC,IAAID,SAAS;QACX,MAAME,MAAM,MAAMC,IAAAA,4BAAa,EAC7B,CAAC,OAAO,EAAEN,cAAc,CAAC,EAAEG,QAAQ,KAAK,EAAEC,OAAO,QAAQ,EACvDH,OACD,CAAC,EACF;YACEA,QAAQ;YACRM,SAAS,CAAC;QACZ,GACAC,KAAKC,SAAS,CAACP;QAEjB,MAAMQ,OAAO,MAAML,IAAIM,IAAI;QAE3B,IAAID,KAAKE,UAAU,CAAC,QAAQF,KAAKG,QAAQ,CAAC,MAAM;YAC9C,MAAMC,aAAaN,KAAKO,KAAK,CAACL;YAE9B,IACEI,cACA,OAAOA,eAAe,YACtB,SAASA,cACT,WAAWA,WAAWvB,GAAG,EACzB;gBACA,MAAMR,eAAe+B,WAAWvB,GAAG;YACrC;YACA,OAAOuB;QACT;IACF;AACF"}