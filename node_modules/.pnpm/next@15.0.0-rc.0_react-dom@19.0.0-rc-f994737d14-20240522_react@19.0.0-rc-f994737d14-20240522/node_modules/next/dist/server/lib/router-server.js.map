{"version":3,"sources":["../../../src/server/lib/router-server.ts"],"sourcesContent":["// this must come first as it includes require hooks\nimport type { WorkerRequestHandler, WorkerUpgradeHandler } from './types'\nimport type { DevBundler } from './router-utils/setup-dev-bundler'\nimport type { NextUrlWithParsedQuery } from '../request-meta'\nimport type { NextServer } from '../next'\n\n// This is required before other imports to ensure the require hook is setup.\nimport '../node-environment'\nimport '../require-hook'\n\nimport url from 'url'\nimport path from 'path'\nimport loadConfig from '../config'\nimport { serveStatic } from '../serve-static'\nimport setupDebug from 'next/dist/compiled/debug'\nimport { DecodeError } from '../../shared/lib/utils'\nimport { findPagesDir } from '../../lib/find-pages-dir'\nimport { setupFsCheck } from './router-utils/filesystem'\nimport { proxyRequest } from './router-utils/proxy-request'\nimport { isAbortError, pipeToNodeResponse } from '../pipe-readable'\nimport { getResolveRoutes } from './router-utils/resolve-routes'\nimport { getRequestMeta } from '../request-meta'\nimport { pathHasPrefix } from '../../shared/lib/router/utils/path-has-prefix'\nimport { removePathPrefix } from '../../shared/lib/router/utils/remove-path-prefix'\nimport setupCompression from 'next/dist/compiled/compression'\nimport { NoFallbackError } from '../base-server'\nimport { signalFromNodeResponse } from '../web/spec-extension/adapters/next-request'\nimport { isPostpone } from './router-utils/is-postpone'\nimport { parseUrl as parseUrlUtil } from '../../shared/lib/router/utils/parse-url'\n\nimport {\n  PHASE_PRODUCTION_SERVER,\n  PHASE_DEVELOPMENT_SERVER,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../../shared/lib/constants'\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\nimport { DevBundlerService } from './dev-bundler-service'\nimport { type Span, trace } from '../../trace'\nimport { ensureLeadingSlash } from '../../shared/lib/page-path/ensure-leading-slash'\nimport { getNextPathnameInfo } from '../../shared/lib/router/utils/get-next-pathname-info'\nimport { getHostname } from '../../shared/lib/get-hostname'\nimport { detectDomainLocale } from '../../shared/lib/i18n/detect-domain-locale'\nimport { MockedResponse } from './mock-request'\n\nconst debug = setupDebug('next:router-server:main')\nconst isNextFont = (pathname: string | null) =>\n  pathname && /\\/media\\/[^/]+\\.(woff|woff2|eot|ttf|otf)$/.test(pathname)\n\nexport type RenderServer = Pick<\n  typeof import('./render-server'),\n  | 'initialize'\n  | 'deleteCache'\n  | 'clearModuleContext'\n  | 'deleteAppClientCache'\n  | 'propagateServerField'\n>\n\nexport interface LazyRenderServerInstance {\n  instance?: RenderServer\n}\n\nconst requestHandlers: Record<string, WorkerRequestHandler> = {}\n\nexport async function initialize(opts: {\n  dir: string\n  port: number\n  dev: boolean\n  server?: import('http').Server\n  minimalMode?: boolean\n  hostname?: string\n  isNodeDebugging: boolean\n  keepAliveTimeout?: number\n  customServer?: boolean\n  experimentalHttpsServer?: boolean\n  startServerSpan?: Span\n  quiet?: boolean\n}): Promise<[WorkerRequestHandler, WorkerUpgradeHandler, NextServer]> {\n  if (!process.env.NODE_ENV) {\n    // @ts-ignore not readonly\n    process.env.NODE_ENV = opts.dev ? 'development' : 'production'\n  }\n\n  const config = await loadConfig(\n    opts.dev ? PHASE_DEVELOPMENT_SERVER : PHASE_PRODUCTION_SERVER,\n    opts.dir,\n    { silent: false }\n  )\n\n  let compress: ReturnType<typeof setupCompression> | undefined\n\n  if (config?.compress !== false) {\n    compress = setupCompression()\n  }\n\n  const fsChecker = await setupFsCheck({\n    dev: opts.dev,\n    dir: opts.dir,\n    config,\n    minimalMode: opts.minimalMode,\n  })\n\n  const renderServer: LazyRenderServerInstance = {}\n\n  let developmentBundler: DevBundler | undefined\n\n  let devBundlerService: DevBundlerService | undefined\n\n  if (opts.dev) {\n    const { Telemetry } =\n      require('../../telemetry/storage') as typeof import('../../telemetry/storage')\n\n    const telemetry = new Telemetry({\n      distDir: path.join(opts.dir, config.distDir),\n    })\n    const { pagesDir, appDir } = findPagesDir(opts.dir)\n\n    const { setupDevBundler } =\n      require('./router-utils/setup-dev-bundler') as typeof import('./router-utils/setup-dev-bundler')\n\n    const setupDevBundlerSpan = opts.startServerSpan\n      ? opts.startServerSpan.traceChild('setup-dev-bundler')\n      : trace('setup-dev-bundler')\n    developmentBundler = await setupDevBundlerSpan.traceAsyncFn(() =>\n      setupDevBundler({\n        // Passed here but the initialization of this object happens below, doing the initialization before the setupDev call breaks.\n        renderServer,\n        appDir,\n        pagesDir,\n        telemetry,\n        fsChecker,\n        dir: opts.dir,\n        nextConfig: config,\n        isCustomServer: opts.customServer,\n        turbo: !!process.env.TURBOPACK,\n        port: opts.port,\n      })\n    )\n\n    devBundlerService = new DevBundlerService(\n      developmentBundler,\n      // The request handler is assigned below, this allows us to create a lazy\n      // reference to it.\n      (req, res) => {\n        return requestHandlers[opts.dir](req, res)\n      }\n    )\n  }\n\n  renderServer.instance =\n    require('./render-server') as typeof import('./render-server')\n\n  const requestHandlerImpl: WorkerRequestHandler = async (req, res) => {\n    if (\n      !opts.minimalMode &&\n      config.i18n &&\n      config.i18n.localeDetection !== false\n    ) {\n      const urlParts = (req.url || '').split('?', 1)\n      let urlNoQuery = urlParts[0] || ''\n\n      if (config.basePath) {\n        urlNoQuery = removePathPrefix(urlNoQuery, config.basePath)\n      }\n\n      const pathnameInfo = getNextPathnameInfo(urlNoQuery, {\n        nextConfig: config,\n      })\n\n      const domainLocale = detectDomainLocale(\n        config.i18n.domains,\n        getHostname({ hostname: urlNoQuery }, req.headers)\n      )\n\n      const defaultLocale =\n        domainLocale?.defaultLocale || config.i18n.defaultLocale\n\n      const { getLocaleRedirect } =\n        require('../../shared/lib/i18n/get-locale-redirect') as typeof import('../../shared/lib/i18n/get-locale-redirect')\n\n      const parsedUrl = parseUrlUtil((req.url || '')?.replace(/^\\/+/, '/'))\n\n      const redirect = getLocaleRedirect({\n        defaultLocale,\n        domainLocale,\n        headers: req.headers,\n        nextConfig: config,\n        pathLocale: pathnameInfo.locale,\n        urlParsed: {\n          ...parsedUrl,\n          pathname: pathnameInfo.locale\n            ? `/${pathnameInfo.locale}${urlNoQuery}`\n            : urlNoQuery,\n        },\n      })\n\n      if (redirect) {\n        res.setHeader('Location', redirect)\n        res.statusCode = RedirectStatusCode.TemporaryRedirect\n        res.end(redirect)\n        return\n      }\n    }\n\n    if (compress) {\n      // @ts-expect-error not express req/res\n      compress(req, res, () => {})\n    }\n    req.on('error', (_err) => {\n      // TODO: log socket errors?\n    })\n    res.on('error', (_err) => {\n      // TODO: log socket errors?\n    })\n\n    const invokedOutputs = new Set<string>()\n\n    async function invokeRender(\n      parsedUrl: NextUrlWithParsedQuery,\n      invokePath: string,\n      handleIndex: number,\n      additionalInvokeHeaders: Record<string, string> = {}\n    ) {\n      // invokeRender expects /api routes to not be locale prefixed\n      // so normalize here before continuing\n      if (\n        config.i18n &&\n        removePathPrefix(invokePath, config.basePath).startsWith(\n          `/${parsedUrl.query.__nextLocale}/api`\n        )\n      ) {\n        invokePath = fsChecker.handleLocale(\n          removePathPrefix(invokePath, config.basePath)\n        ).pathname\n      }\n\n      if (\n        req.headers['x-nextjs-data'] &&\n        fsChecker.getMiddlewareMatchers()?.length &&\n        removePathPrefix(invokePath, config.basePath) === '/404'\n      ) {\n        res.setHeader('x-nextjs-matched-path', parsedUrl.pathname || '')\n        res.statusCode = 404\n        res.setHeader('content-type', 'application/json')\n        res.end('{}')\n        return null\n      }\n\n      if (!handlers) {\n        throw new Error('Failed to initialize render server')\n      }\n\n      const invokeHeaders: typeof req.headers = {\n        ...req.headers,\n        'x-middleware-invoke': '',\n        'x-invoke-path': invokePath,\n        'x-invoke-query': encodeURIComponent(JSON.stringify(parsedUrl.query)),\n        ...(additionalInvokeHeaders || {}),\n      }\n      Object.assign(req.headers, invokeHeaders)\n\n      debug('invokeRender', req.url, invokeHeaders)\n\n      try {\n        const initResult =\n          await renderServer?.instance?.initialize(renderServerOpts)\n        try {\n          await initResult?.requestHandler(req, res)\n        } catch (err) {\n          if (err instanceof NoFallbackError) {\n            // eslint-disable-next-line\n            await handleRequest(handleIndex + 1)\n            return\n          }\n          throw err\n        }\n        return\n      } catch (e) {\n        // If the client aborts before we can receive a response object (when\n        // the headers are flushed), then we can early exit without further\n        // processing.\n        if (isAbortError(e)) {\n          return\n        }\n        throw e\n      }\n    }\n\n    const handleRequest = async (handleIndex: number) => {\n      if (handleIndex > 5) {\n        throw new Error(`Attempted to handle request too many times ${req.url}`)\n      }\n\n      // handle hot-reloader first\n      if (developmentBundler) {\n        const origUrl = req.url || '/'\n\n        if (config.basePath && pathHasPrefix(origUrl, config.basePath)) {\n          req.url = removePathPrefix(origUrl, config.basePath)\n        }\n        const parsedUrl = url.parse(req.url || '/')\n\n        const hotReloaderResult = await developmentBundler.hotReloader.run(\n          req,\n          res,\n          parsedUrl\n        )\n\n        if (hotReloaderResult.finished) {\n          return hotReloaderResult\n        }\n        req.url = origUrl\n      }\n\n      const {\n        finished,\n        parsedUrl,\n        statusCode,\n        resHeaders,\n        bodyStream,\n        matchedOutput,\n      } = await resolveRoutes({\n        req,\n        res,\n        isUpgradeReq: false,\n        signal: signalFromNodeResponse(res),\n        invokedOutputs,\n      })\n\n      if (res.closed || res.finished) {\n        return\n      }\n\n      if (developmentBundler && matchedOutput?.type === 'devVirtualFsItem') {\n        const origUrl = req.url || '/'\n\n        if (config.basePath && pathHasPrefix(origUrl, config.basePath)) {\n          req.url = removePathPrefix(origUrl, config.basePath)\n        }\n\n        if (resHeaders) {\n          for (const key of Object.keys(resHeaders)) {\n            res.setHeader(key, resHeaders[key])\n          }\n        }\n        const result = await developmentBundler.requestHandler(req, res)\n\n        if (result.finished) {\n          return\n        }\n        // TODO: throw invariant if we resolved to this but it wasn't handled?\n        req.url = origUrl\n      }\n\n      debug('requestHandler!', req.url, {\n        matchedOutput,\n        statusCode,\n        resHeaders,\n        bodyStream: !!bodyStream,\n        parsedUrl: {\n          pathname: parsedUrl.pathname,\n          query: parsedUrl.query,\n        },\n        finished,\n      })\n\n      // apply any response headers from routing\n      for (const key of Object.keys(resHeaders || {})) {\n        res.setHeader(key, resHeaders[key])\n      }\n\n      // handle redirect\n      if (!bodyStream && statusCode && statusCode > 300 && statusCode < 400) {\n        const destination = url.format(parsedUrl)\n        res.statusCode = statusCode\n        res.setHeader('location', destination)\n\n        if (statusCode === RedirectStatusCode.PermanentRedirect) {\n          res.setHeader('Refresh', `0;url=${destination}`)\n        }\n        return res.end(destination)\n      }\n\n      // handle middleware body response\n      if (bodyStream) {\n        res.statusCode = statusCode || 200\n        return await pipeToNodeResponse(bodyStream, res)\n      }\n\n      if (finished && parsedUrl.protocol) {\n        return await proxyRequest(\n          req,\n          res,\n          parsedUrl,\n          undefined,\n          getRequestMeta(req, 'clonableBody')?.cloneBodyStream(),\n          config.experimental.proxyTimeout\n        )\n      }\n\n      if (matchedOutput?.fsPath && matchedOutput.itemPath) {\n        if (\n          opts.dev &&\n          (fsChecker.appFiles.has(matchedOutput.itemPath) ||\n            fsChecker.pageFiles.has(matchedOutput.itemPath))\n        ) {\n          res.statusCode = 500\n          await invokeRender(parsedUrl, '/_error', handleIndex, {\n            'x-invoke-status': '500',\n            'x-invoke-error': JSON.stringify({\n              message: `A conflicting public file and page file was found for path ${matchedOutput.itemPath} https://nextjs.org/docs/messages/conflicting-public-file-page`,\n            }),\n          })\n          return\n        }\n\n        if (\n          !res.getHeader('cache-control') &&\n          matchedOutput.type === 'nextStaticFolder'\n        ) {\n          if (opts.dev && !isNextFont(parsedUrl.pathname)) {\n            res.setHeader('Cache-Control', 'no-store, must-revalidate')\n          } else {\n            res.setHeader(\n              'Cache-Control',\n              'public, max-age=31536000, immutable'\n            )\n          }\n        }\n        if (!(req.method === 'GET' || req.method === 'HEAD')) {\n          res.setHeader('Allow', ['GET', 'HEAD'])\n          res.statusCode = 405\n          return await invokeRender(\n            url.parse('/405', true),\n            '/405',\n            handleIndex,\n            {\n              'x-invoke-status': '405',\n            }\n          )\n        }\n\n        try {\n          return await serveStatic(req, res, matchedOutput.itemPath, {\n            root: matchedOutput.itemsRoot,\n            // Ensures that etags are not generated for static files when disabled.\n            etag: config.generateEtags,\n          })\n        } catch (err: any) {\n          /**\n           * Hardcoded every possible error status code that could be thrown by \"serveStatic\" method\n           * This is done by searching \"this.error\" inside \"send\" module's source code:\n           * https://github.com/pillarjs/send/blob/master/index.js\n           * https://github.com/pillarjs/send/blob/develop/index.js\n           */\n          const POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC = new Set([\n            // send module will throw 500 when header is already sent or fs.stat error happens\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L392\n            // Note: we will use Next.js built-in 500 page to handle 500 errors\n            // 500,\n\n            // send module will throw 404 when file is missing\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L421\n            // Note: we will use Next.js built-in 404 page to handle 404 errors\n            // 404,\n\n            // send module will throw 403 when redirecting to a directory without enabling directory listing\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L484\n            // Note: Next.js throws a different error (without status code) for directory listing\n            // 403,\n\n            // send module will throw 400 when fails to normalize the path\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L520\n            400,\n\n            // send module will throw 412 with conditional GET request\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L632\n            412,\n\n            // send module will throw 416 when range is not satisfiable\n            // https://github.com/pillarjs/send/blob/53f0ab476145670a9bdd3dc722ab2fdc8d358fc6/index.js#L669\n            416,\n          ])\n\n          let validErrorStatus = POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC.has(\n            err.statusCode\n          )\n\n          // normalize non-allowed status codes\n          if (!validErrorStatus) {\n            ;(err as any).statusCode = 400\n          }\n\n          if (typeof err.statusCode === 'number') {\n            const invokePath = `/${err.statusCode}`\n            const invokeStatus = `${err.statusCode}`\n            res.statusCode = err.statusCode\n            return await invokeRender(\n              url.parse(invokePath, true),\n              invokePath,\n              handleIndex,\n              {\n                'x-invoke-status': invokeStatus,\n              }\n            )\n          }\n          throw err\n        }\n      }\n\n      if (matchedOutput) {\n        invokedOutputs.add(matchedOutput.itemPath)\n\n        return await invokeRender(\n          parsedUrl,\n          parsedUrl.pathname || '/',\n          handleIndex,\n          {\n            'x-invoke-output': matchedOutput.itemPath,\n          }\n        )\n      }\n\n      // 404 case\n      res.setHeader(\n        'Cache-Control',\n        'no-cache, no-store, max-age=0, must-revalidate'\n      )\n\n      // Short-circuit favicon.ico serving so that the 404 page doesn't get built as favicon is requested by the browser when loading any route.\n      if (opts.dev && !matchedOutput && parsedUrl.pathname === '/favicon.ico') {\n        res.statusCode = 404\n        res.end('')\n        return null\n      }\n\n      const appNotFound = opts.dev\n        ? developmentBundler?.serverFields.hasAppNotFound\n        : await fsChecker.getItem(UNDERSCORE_NOT_FOUND_ROUTE)\n\n      res.statusCode = 404\n\n      if (appNotFound) {\n        return await invokeRender(\n          parsedUrl,\n          UNDERSCORE_NOT_FOUND_ROUTE,\n          handleIndex,\n          {\n            'x-invoke-status': '404',\n          }\n        )\n      }\n\n      await invokeRender(parsedUrl, '/404', handleIndex, {\n        'x-invoke-status': '404',\n      })\n    }\n\n    try {\n      await handleRequest(0)\n    } catch (err) {\n      try {\n        let invokePath = '/500'\n        let invokeStatus = '500'\n\n        if (err instanceof DecodeError) {\n          invokePath = '/400'\n          invokeStatus = '400'\n        } else {\n          console.error(err)\n        }\n        res.statusCode = Number(invokeStatus)\n        return await invokeRender(url.parse(invokePath, true), invokePath, 0, {\n          'x-invoke-status': invokeStatus,\n        })\n      } catch (err2) {\n        console.error(err2)\n      }\n      res.statusCode = 500\n      res.end('Internal Server Error')\n    }\n  }\n\n  let requestHandler: WorkerRequestHandler = requestHandlerImpl\n  if (config.experimental.testProxy) {\n    // Intercept fetch and other testmode apis.\n    const {\n      wrapRequestHandlerWorker,\n      interceptTestApis,\n    } = require('next/dist/experimental/testmode/server')\n    requestHandler = wrapRequestHandlerWorker(requestHandler)\n    interceptTestApis()\n  }\n  requestHandlers[opts.dir] = requestHandler\n\n  const renderServerOpts: Parameters<RenderServer['initialize']>[0] = {\n    port: opts.port,\n    dir: opts.dir,\n    hostname: opts.hostname,\n    minimalMode: opts.minimalMode,\n    dev: !!opts.dev,\n    server: opts.server,\n    isNodeDebugging: !!opts.isNodeDebugging,\n    serverFields: developmentBundler?.serverFields || {},\n    experimentalTestProxy: !!config.experimental.testProxy,\n    experimentalHttpsServer: !!opts.experimentalHttpsServer,\n    bundlerService: devBundlerService,\n    startServerSpan: opts.startServerSpan,\n    quiet: opts.quiet,\n  }\n  renderServerOpts.serverFields.routerServerHandler = requestHandlerImpl\n\n  // pre-initialize workers\n  const handlers = await renderServer.instance.initialize(renderServerOpts)\n\n  const logError = async (\n    type: 'uncaughtException' | 'unhandledRejection',\n    err: Error | undefined\n  ) => {\n    if (isPostpone(err)) {\n      // React postpones that are unhandled might end up logged here but they're\n      // not really errors. They're just part of rendering.\n      return\n    }\n    await developmentBundler?.logErrorWithOriginalStack(err, type)\n  }\n\n  process.on('uncaughtException', logError.bind(null, 'uncaughtException'))\n  process.on('unhandledRejection', logError.bind(null, 'unhandledRejection'))\n\n  const resolveRoutes = getResolveRoutes(\n    fsChecker,\n    config,\n    opts,\n    renderServer.instance,\n    renderServerOpts,\n    developmentBundler?.ensureMiddleware\n  )\n\n  const upgradeHandler: WorkerUpgradeHandler = async (req, socket, head) => {\n    try {\n      req.on('error', (_err) => {\n        // TODO: log socket errors?\n        // console.error(_err);\n      })\n      socket.on('error', (_err) => {\n        // TODO: log socket errors?\n        // console.error(_err);\n      })\n\n      if (opts.dev && developmentBundler && req.url) {\n        const { basePath, assetPrefix } = config\n\n        const isHMRRequest = req.url.startsWith(\n          ensureLeadingSlash(`${assetPrefix || basePath}/_next/webpack-hmr`)\n        )\n\n        // only handle HMR requests if the basePath in the request\n        // matches the basePath for the handler responding to the request\n        if (isHMRRequest) {\n          return developmentBundler.hotReloader.onHMR(req, socket, head)\n        }\n      }\n\n      const res = new MockedResponse({\n        resWriter: () => {\n          throw new Error(\n            'Invariant: did not expect response writer to be written to for upgrade request'\n          )\n        },\n      })\n      const { matchedOutput, parsedUrl } = await resolveRoutes({\n        req,\n        res,\n        isUpgradeReq: true,\n        signal: signalFromNodeResponse(socket),\n      })\n\n      // TODO: allow upgrade requests to pages/app paths?\n      // this was not previously supported\n      if (matchedOutput) {\n        return socket.end()\n      }\n\n      if (parsedUrl.protocol) {\n        return await proxyRequest(req, socket, parsedUrl, head)\n      }\n\n      // If there's no matched output, we don't handle the request as user's\n      // custom WS server may be listening on the same path.\n    } catch (err) {\n      console.error('Error handling upgrade request', err)\n      socket.end()\n    }\n  }\n\n  return [requestHandler, upgradeHandler, handlers.app]\n}\n"],"names":["initialize","debug","setupDebug","isNextFont","pathname","test","requestHandlers","opts","process","env","NODE_ENV","dev","config","loadConfig","PHASE_DEVELOPMENT_SERVER","PHASE_PRODUCTION_SERVER","dir","silent","compress","setupCompression","fsChecker","setupFsCheck","minimalMode","renderServer","developmentBundler","devBundlerService","Telemetry","require","telemetry","distDir","path","join","pagesDir","appDir","findPagesDir","setupDevBundler","setupDevBundlerSpan","startServerSpan","traceChild","trace","traceAsyncFn","nextConfig","isCustomServer","customServer","turbo","TURBOPACK","port","DevBundlerService","req","res","instance","requestHandlerImpl","i18n","localeDetection","urlParts","url","split","urlNoQuery","basePath","removePathPrefix","pathnameInfo","getNextPathnameInfo","domainLocale","detectDomainLocale","domains","getHostname","hostname","headers","defaultLocale","getLocaleRedirect","parsedUrl","parseUrlUtil","replace","redirect","pathLocale","locale","urlParsed","setHeader","statusCode","RedirectStatusCode","TemporaryRedirect","end","on","_err","invokedOutputs","Set","invokeRender","invokePath","handleIndex","additionalInvokeHeaders","startsWith","query","__nextLocale","handleLocale","getMiddlewareMatchers","length","handlers","Error","invokeHeaders","encodeURIComponent","JSON","stringify","Object","assign","initResult","renderServerOpts","requestHandler","err","NoFallbackError","handleRequest","e","isAbortError","origUrl","pathHasPrefix","parse","hotReloaderResult","hotReloader","run","finished","resHeaders","bodyStream","matchedOutput","resolveRoutes","isUpgradeReq","signal","signalFromNodeResponse","closed","type","key","keys","result","destination","format","PermanentRedirect","pipeToNodeResponse","protocol","getRequestMeta","proxyRequest","undefined","cloneBodyStream","experimental","proxyTimeout","fsPath","itemPath","appFiles","has","pageFiles","message","getHeader","method","serveStatic","root","itemsRoot","etag","generateEtags","POSSIBLE_ERROR_CODE_FROM_SERVE_STATIC","validErrorStatus","invokeStatus","add","appNotFound","serverFields","hasAppNotFound","getItem","UNDERSCORE_NOT_FOUND_ROUTE","DecodeError","console","error","Number","err2","testProxy","wrapRequestHandlerWorker","interceptTestApis","server","isNodeDebugging","experimentalTestProxy","experimentalHttpsServer","bundlerService","quiet","routerServerHandler","logError","isPostpone","logErrorWithOriginalStack","bind","getResolveRoutes","ensureMiddleware","upgradeHandler","socket","head","assetPrefix","isHMRRequest","ensureLeadingSlash","onHMR","MockedResponse","resWriter","app"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}