{"version":3,"sources":["../../../src/server/lib/render-server.ts"],"sourcesContent":["import type { NextServer, RequestHandler } from '../next'\nimport type { DevBundlerService } from './dev-bundler-service'\nimport type { PropagateToWorkersField } from './router-utils/types'\n\nimport next from '../next'\nimport type { Span } from '../../trace'\n\nlet initializations: Record<\n  string,\n  | Promise<{\n      requestHandler: ReturnType<\n        InstanceType<typeof NextServer>['getRequestHandler']\n      >\n      upgradeHandler: ReturnType<\n        InstanceType<typeof NextServer>['getUpgradeHandler']\n      >\n      app: ReturnType<typeof next>\n    }>\n  | undefined\n> = {}\n\nlet sandboxContext: undefined | typeof import('../web/sandbox/context')\nlet requireCacheHotReloader:\n  | undefined\n  | typeof import('../../build/webpack/plugins/nextjs-require-cache-hot-reloader')\n\nif (process.env.NODE_ENV !== 'production') {\n  sandboxContext = require('../web/sandbox/context')\n  requireCacheHotReloader = require('../../build/webpack/plugins/nextjs-require-cache-hot-reloader')\n}\n\nexport function clearAllModuleContexts() {\n  return sandboxContext?.clearAllModuleContexts()\n}\n\nexport function clearModuleContext(target: string) {\n  return sandboxContext?.clearModuleContext(target)\n}\n\nexport function deleteAppClientCache() {\n  return requireCacheHotReloader?.deleteAppClientCache()\n}\n\nexport function deleteCache(filePaths: string[]) {\n  for (const filePath of filePaths) {\n    requireCacheHotReloader?.deleteCache(filePath)\n  }\n}\n\nexport async function propagateServerField(\n  dir: string,\n  field: PropagateToWorkersField,\n  value: any\n) {\n  const initialization = await initializations[dir]\n  if (!initialization) {\n    throw new Error('Invariant cant propagate server field, no app initialized')\n  }\n  const { app } = initialization\n  let appField = (app as any).server\n\n  if (appField) {\n    if (typeof appField[field] === 'function') {\n      await appField[field].apply(\n        (app as any).server,\n        Array.isArray(value) ? value : []\n      )\n    } else {\n      appField[field] = value\n    }\n  }\n}\n\nasync function initializeImpl(opts: {\n  dir: string\n  port: number\n  dev: boolean\n  minimalMode?: boolean\n  hostname?: string\n  isNodeDebugging: boolean\n  keepAliveTimeout?: number\n  serverFields?: any\n  server?: any\n  experimentalTestProxy: boolean\n  experimentalHttpsServer: boolean\n  _ipcPort?: string\n  _ipcKey?: string\n  bundlerService: DevBundlerService | undefined\n  startServerSpan: Span | undefined\n  quiet?: boolean\n}) {\n  const type = process.env.__NEXT_PRIVATE_RENDER_WORKER\n  if (type) {\n    process.title = 'next-render-worker-' + type\n  }\n\n  let requestHandler: RequestHandler\n  let upgradeHandler: any\n\n  const app = next({\n    ...opts,\n    hostname: opts.hostname || 'localhost',\n    customServer: false,\n    httpServer: opts.server,\n    port: opts.port,\n    isNodeDebugging: opts.isNodeDebugging,\n  })\n  requestHandler = app.getRequestHandler()\n  upgradeHandler = app.getUpgradeHandler()\n\n  await app.prepare(opts.serverFields)\n\n  return {\n    requestHandler,\n    upgradeHandler,\n    app,\n  }\n}\n\nexport async function initialize(\n  opts: Parameters<typeof initializeImpl>[0]\n): Promise<{\n  requestHandler: ReturnType<\n    InstanceType<typeof NextServer>['getRequestHandler']\n  >\n  upgradeHandler: ReturnType<\n    InstanceType<typeof NextServer>['getUpgradeHandler']\n  >\n  app: NextServer\n}> {\n  // if we already setup the server return as we only need to do\n  // this on first worker boot\n  if (initializations[opts.dir]) {\n    return initializations[opts.dir]!\n  }\n  return (initializations[opts.dir] = initializeImpl(opts))\n}\n"],"names":["clearAllModuleContexts","clearModuleContext","deleteAppClientCache","deleteCache","initialize","propagateServerField","initializations","sandboxContext","requireCacheHotReloader","process","env","NODE_ENV","require","target","filePaths","filePath","dir","field","value","initialization","Error","app","appField","server","apply","Array","isArray","initializeImpl","opts","type","__NEXT_PRIVATE_RENDER_WORKER","title","requestHandler","upgradeHandler","next","hostname","customServer","httpServer","port","isNodeDebugging","getRequestHandler","getUpgradeHandler","prepare","serverFields"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;;;;;;;;;IA+BgBA,sBAAsB;eAAtBA;;IAIAC,kBAAkB;eAAlBA;;IAIAC,oBAAoB;eAApBA;;IAIAC,WAAW;eAAXA;;IA4EMC,UAAU;eAAVA;;IAtEAC,oBAAoB;eAApBA;;;6DA7CL;;;;;;AAGjB,IAAIC,kBAYA,CAAC;AAEL,IAAIC;AACJ,IAAIC;AAIJ,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;IACzCJ,iBAAiBK,QAAQ;IACzBJ,0BAA0BI,QAAQ;AACpC;AAEO,SAASZ;IACd,OAAOO,kCAAAA,eAAgBP,sBAAsB;AAC/C;AAEO,SAASC,mBAAmBY,MAAc;IAC/C,OAAON,kCAAAA,eAAgBN,kBAAkB,CAACY;AAC5C;AAEO,SAASX;IACd,OAAOM,2CAAAA,wBAAyBN,oBAAoB;AACtD;AAEO,SAASC,YAAYW,SAAmB;IAC7C,KAAK,MAAMC,YAAYD,UAAW;QAChCN,2CAAAA,wBAAyBL,WAAW,CAACY;IACvC;AACF;AAEO,eAAeV,qBACpBW,GAAW,EACXC,KAA8B,EAC9BC,KAAU;IAEV,MAAMC,iBAAiB,MAAMb,eAAe,CAACU,IAAI;IACjD,IAAI,CAACG,gBAAgB;QACnB,MAAM,IAAIC,MAAM;IAClB;IACA,MAAM,EAAEC,GAAG,EAAE,GAAGF;IAChB,IAAIG,WAAW,AAACD,IAAYE,MAAM;IAElC,IAAID,UAAU;QACZ,IAAI,OAAOA,QAAQ,CAACL,MAAM,KAAK,YAAY;YACzC,MAAMK,QAAQ,CAACL,MAAM,CAACO,KAAK,CACzB,AAACH,IAAYE,MAAM,EACnBE,MAAMC,OAAO,CAACR,SAASA,QAAQ,EAAE;QAErC,OAAO;YACLI,QAAQ,CAACL,MAAM,GAAGC;QACpB;IACF;AACF;AAEA,eAAeS,eAAeC,IAiB7B;IACC,MAAMC,OAAOpB,QAAQC,GAAG,CAACoB,4BAA4B;IACrD,IAAID,MAAM;QACRpB,QAAQsB,KAAK,GAAG,wBAAwBF;IAC1C;IAEA,IAAIG;IACJ,IAAIC;IAEJ,MAAMZ,MAAMa,IAAAA,aAAI,EAAC;QACf,GAAGN,IAAI;QACPO,UAAUP,KAAKO,QAAQ,IAAI;QAC3BC,cAAc;QACdC,YAAYT,KAAKL,MAAM;QACvBe,MAAMV,KAAKU,IAAI;QACfC,iBAAiBX,KAAKW,eAAe;IACvC;IACAP,iBAAiBX,IAAImB,iBAAiB;IACtCP,iBAAiBZ,IAAIoB,iBAAiB;IAEtC,MAAMpB,IAAIqB,OAAO,CAACd,KAAKe,YAAY;IAEnC,OAAO;QACLX;QACAC;QACAZ;IACF;AACF;AAEO,eAAejB,WACpBwB,IAA0C;IAU1C,8DAA8D;IAC9D,4BAA4B;IAC5B,IAAItB,eAAe,CAACsB,KAAKZ,GAAG,CAAC,EAAE;QAC7B,OAAOV,eAAe,CAACsB,KAAKZ,GAAG,CAAC;IAClC;IACA,OAAQV,eAAe,CAACsB,KAAKZ,GAAG,CAAC,GAAGW,eAAeC;AACrD"}