{"version":3,"sources":["../../../../src/server/lib/server-ipc/invoke-request.ts"],"sourcesContent":["import type { IncomingMessage } from 'http'\nimport type { Readable } from 'stream'\nimport { filterReqHeaders, ipcForbiddenHeaders } from './utils'\n\nexport const invokeRequest = async (\n  targetUrl: string,\n  requestInit: {\n    headers: IncomingMessage['headers']\n    method: IncomingMessage['method']\n    signal?: AbortSignal\n  },\n  readableBody?: string | Readable | ReadableStream\n) => {\n  const invokeHeaders = filterReqHeaders(\n    {\n      'cache-control': '',\n      ...requestInit.headers,\n    },\n    ipcForbiddenHeaders\n  ) as IncomingMessage['headers']\n\n  return await fetch(targetUrl, {\n    headers: invokeHeaders as any as Headers,\n    method: requestInit.method,\n    redirect: 'manual',\n    signal: requestInit.signal,\n\n    ...(requestInit.method !== 'GET' &&\n    requestInit.method !== 'HEAD' &&\n    readableBody\n      ? {\n          body: readableBody as BodyInit,\n          duplex: 'half',\n        }\n      : {}),\n\n    next: {\n      // @ts-ignore\n      internal: true,\n    },\n  })\n}\n"],"names":["invokeRequest","targetUrl","requestInit","readableBody","invokeHeaders","filterReqHeaders","headers","ipcForbiddenHeaders","fetch","method","redirect","signal","body","duplex","next","internal"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAIaA;;;eAAAA;;;uBAFyC;AAE/C,MAAMA,gBAAgB,OAC3BC,WACAC,aAKAC;IAEA,MAAMC,gBAAgBC,IAAAA,uBAAgB,EACpC;QACE,iBAAiB;QACjB,GAAGH,YAAYI,OAAO;IACxB,GACAC,0BAAmB;IAGrB,OAAO,MAAMC,MAAMP,WAAW;QAC5BK,SAASF;QACTK,QAAQP,YAAYO,MAAM;QAC1BC,UAAU;QACVC,QAAQT,YAAYS,MAAM;QAE1B,GAAIT,YAAYO,MAAM,KAAK,SAC3BP,YAAYO,MAAM,KAAK,UACvBN,eACI;YACES,MAAMT;YACNU,QAAQ;QACV,IACA,CAAC,CAAC;QAENC,MAAM;YACJ,aAAa;YACbC,UAAU;QACZ;IACF;AACF"}