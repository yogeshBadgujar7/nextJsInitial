{"version":3,"sources":["../../src/server/next-fetch.ts"],"sourcesContent":["/**\n * Based on https://github.com/facebook/react/blob/d4e78c42a94be027b4dc7ed2659a5fddfbf9bd4e/packages/react/src/ReactFetch.js\n */\nimport * as React from 'react'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- url is the cache key\nconst getCacheEntries = React.cache((url: string): Array<any> => [])\nconst simpleCacheKey = '[\"GET\",[],null,\"follow\",null,null,null,null]' // generateCacheKey(new Request('https://blank'));\n\nfunction generateCacheKey(request: Request): string {\n  // We pick the fields that goes into the key used to dedupe requests.\n  // We don't include the `cache` field, because we end up using whatever\n  // caching resulted from the first request.\n  // Notably we currently don't consider non-standard (or future) options.\n  // This might not be safe. TODO: warn for non-standard extensions differing.\n  // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.\n  return JSON.stringify([\n    request.method,\n    Array.from(request.headers.entries()),\n    request.mode,\n    request.redirect,\n    request.credentials,\n    request.referrer,\n    request.referrerPolicy,\n    request.integrity,\n  ])\n}\n\nif (typeof fetch === 'function') {\n  const originalFetch = fetch\n  const cachedFetch = function fetch(\n    resource: URL | RequestInfo,\n    options?: RequestInit\n  ) {\n    if (options && options.signal) {\n      // If we're passed a signal, then we assume that\n      // someone else controls the lifetime of this object and opts out of\n      // caching. It's effectively the opt-out mechanism.\n      // Ideally we should be able to check this on the Request but\n      // it always gets initialized with its own signal so we don't\n      // know if it's supposed to override - unless we also override the\n      // Request constructor.\n      return originalFetch(resource, options)\n    }\n    // Normalize the Request\n    let url: string\n    let cacheKey: string\n    if (typeof resource === 'string' && !options) {\n      // Fast path.\n      cacheKey = simpleCacheKey\n      url = resource\n    } else {\n      // Normalize the request.\n      // if resource is not a string or a URL (its an instance of Request)\n      // then do not instantiate a new Request but instead\n      // reuse the request as to not disturb the body in the event it's a ReadableStream.\n      const request =\n        typeof resource === 'string' || resource instanceof URL\n          ? new Request(resource, options)\n          : resource\n      if (\n        (request.method !== 'GET' && request.method !== 'HEAD') ||\n        // $FlowFixMe[prop-missing]: keepalive is real\n        request.keepalive\n      ) {\n        // We currently don't dedupe requests that might have side-effects. Those\n        // have to be explicitly cached. We assume that the request doesn't have a\n        // body if it's GET or HEAD.\n        // keepalive gets treated the same as if you passed a custom cache signal.\n        return originalFetch(resource, options)\n      }\n      cacheKey = generateCacheKey(request)\n      url = request.url\n    }\n\n    const cacheEntries = getCacheEntries(url)\n    let match\n    if (cacheEntries.length === 0) {\n      // We pass the original arguments here in case normalizing the Request\n      // doesn't include all the options in this environment.\n      match = originalFetch(resource, options)\n      cacheEntries.push(cacheKey, match)\n    } else {\n      // We use an array as the inner data structure since it's lighter and\n      // we typically only expect to see one or two entries here.\n      for (let i = 0, l = cacheEntries.length; i < l; i += 2) {\n        const key = cacheEntries[i]\n        const value = cacheEntries[i + 1]\n        if (key === cacheKey) {\n          match = value\n          // I would've preferred a labelled break but lint says no.\n          return match.then((response: Response) => response.clone())\n        }\n      }\n      match = originalFetch(resource, options)\n      cacheEntries.push(cacheKey, match)\n    }\n    // We clone the response so that each time you call this you get a new read\n    // of the body so that it can be read multiple times.\n    return match.then((response) => response.clone())\n  }\n  // We don't expect to see any extra properties on fetch but if there are any,\n  // copy them over. Useful for extended fetch environments or mocks.\n  Object.assign(cachedFetch, originalFetch)\n  try {\n    // @ts-ignore\n    // eslint-disable-next-line no-native-reassign\n    fetch = cachedFetch\n  } catch (error1) {\n    try {\n      // In case assigning it globally fails, try globalThis instead just in case it exists.\n      globalThis.fetch = cachedFetch\n    } catch (error2) {\n      // Log even in production just to make sure this is seen if only prod is frozen.\n      console.warn(\n        'Next.js was unable to patch the fetch() function in this environment. ' +\n          'Suspensey APIs might not work correctly as a result.'\n      )\n    }\n  }\n}\n"],"names":["getCacheEntries","React","cache","url","simpleCacheKey","generateCacheKey","request","JSON","stringify","method","Array","from","headers","entries","mode","redirect","credentials","referrer","referrerPolicy","integrity","fetch","originalFetch","cachedFetch","resource","options","signal","cacheKey","URL","Request","keepalive","cacheEntries","match","length","push","i","l","key","value","then","response","clone","Object","assign","error1","globalThis","error2","console","warn"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}