{"version":3,"sources":["../../../src/server/web/adapter.ts"],"sourcesContent":["import type { RequestData, FetchEventResult } from './types'\nimport type { RequestInit } from './spec-extension/request'\nimport type { PrerenderManifest } from '../../build'\nimport { PageSignatureError } from './error'\nimport { fromNodeOutgoingHttpHeaders, normalizeNextQueryParam } from './utils'\nimport { NextFetchEvent } from './spec-extension/fetch-event'\nimport { NextRequest } from './spec-extension/request'\nimport { NextResponse } from './spec-extension/response'\nimport { relativizeURL } from '../../shared/lib/router/utils/relativize-url'\nimport { waitUntilSymbol } from './spec-extension/fetch-event'\nimport { NextURL } from './next-url'\nimport { stripInternalSearchParams } from '../internal-utils'\nimport { normalizeRscURL } from '../../shared/lib/router/utils/app-paths'\nimport { FLIGHT_PARAMETERS } from '../../client/components/app-router-headers'\nimport { ensureInstrumentationRegistered } from './globals'\nimport {\n  RequestAsyncStorageWrapper,\n  type WrapperRenderOpts,\n} from '../async-storage/request-async-storage-wrapper'\nimport { requestAsyncStorage } from '../../client/components/request-async-storage.external'\nimport { getTracer } from '../lib/trace/tracer'\nimport type { TextMapGetter } from 'next/dist/compiled/@opentelemetry/api'\nimport { MiddlewareSpan } from '../lib/trace/constants'\nimport { CloseController } from './web-on-close'\n\nexport class NextRequestHint extends NextRequest {\n  sourcePage: string\n  fetchMetrics?: FetchEventResult['fetchMetrics']\n\n  constructor(params: {\n    init: RequestInit\n    input: Request | string\n    page: string\n  }) {\n    super(params.input, params.init)\n    this.sourcePage = params.page\n  }\n\n  get request() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n\n  respondWith() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n\n  waitUntil() {\n    throw new PageSignatureError({ page: this.sourcePage })\n  }\n}\n\nconst headersGetter: TextMapGetter<Headers> = {\n  keys: (headers) => Array.from(headers.keys()),\n  get: (headers, key) => headers.get(key) ?? undefined,\n}\n\nexport type AdapterOptions = {\n  handler: (req: NextRequestHint, event: NextFetchEvent) => Promise<Response>\n  page: string\n  request: RequestData\n  IncrementalCache?: typeof import('../lib/incremental-cache').IncrementalCache\n}\n\nlet propagator: <T>(request: NextRequestHint, fn: () => T) => T = (\n  request,\n  fn\n) => {\n  const tracer = getTracer()\n  return tracer.withPropagatedContext(request.headers, fn, headersGetter)\n}\n\nlet testApisIntercepted = false\n\nfunction ensureTestApisIntercepted() {\n  if (!testApisIntercepted) {\n    testApisIntercepted = true\n    if (process.env.NEXT_PRIVATE_TEST_PROXY === 'true') {\n      const {\n        interceptTestApis,\n        wrapRequestHandler,\n      } = require('next/dist/experimental/testmode/server-edge')\n      interceptTestApis()\n      propagator = wrapRequestHandler(propagator)\n    }\n  }\n}\n\nexport async function adapter(\n  params: AdapterOptions\n): Promise<FetchEventResult> {\n  ensureTestApisIntercepted()\n  await ensureInstrumentationRegistered()\n\n  // TODO-APP: use explicit marker for this\n  const isEdgeRendering = typeof self.__BUILD_MANIFEST !== 'undefined'\n  const prerenderManifest: PrerenderManifest | undefined =\n    typeof self.__PRERENDER_MANIFEST === 'string'\n      ? JSON.parse(self.__PRERENDER_MANIFEST)\n      : undefined\n\n  params.request.url = normalizeRscURL(params.request.url)\n\n  const requestUrl = new NextURL(params.request.url, {\n    headers: params.request.headers,\n    nextConfig: params.request.nextConfig,\n  })\n\n  // Iterator uses an index to keep track of the current iteration. Because of deleting and appending below we can't just use the iterator.\n  // Instead we use the keys before iteration.\n  const keys = [...requestUrl.searchParams.keys()]\n  for (const key of keys) {\n    const value = requestUrl.searchParams.getAll(key)\n\n    normalizeNextQueryParam(key, (normalizedKey) => {\n      requestUrl.searchParams.delete(normalizedKey)\n\n      for (const val of value) {\n        requestUrl.searchParams.append(normalizedKey, val)\n      }\n      requestUrl.searchParams.delete(key)\n    })\n  }\n\n  // Ensure users only see page requests, never data requests.\n  const buildId = requestUrl.buildId\n  requestUrl.buildId = ''\n\n  const isDataReq = params.request.headers['x-nextjs-data']\n\n  if (isDataReq && requestUrl.pathname === '/index') {\n    requestUrl.pathname = '/'\n  }\n\n  const requestHeaders = fromNodeOutgoingHttpHeaders(params.request.headers)\n  const flightHeaders = new Map()\n  // Parameters should only be stripped for middleware\n  if (!isEdgeRendering) {\n    for (const param of FLIGHT_PARAMETERS) {\n      const key = param.toString().toLowerCase()\n      const value = requestHeaders.get(key)\n      if (value) {\n        flightHeaders.set(key, requestHeaders.get(key))\n        requestHeaders.delete(key)\n      }\n    }\n  }\n\n  const normalizeUrl = process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE\n    ? new URL(params.request.url)\n    : requestUrl\n\n  const request = new NextRequestHint({\n    page: params.page,\n    // Strip internal query parameters off the request.\n    input: stripInternalSearchParams(normalizeUrl, true).toString(),\n    init: {\n      body: params.request.body,\n      geo: params.request.geo,\n      headers: requestHeaders,\n      ip: params.request.ip,\n      method: params.request.method,\n      nextConfig: params.request.nextConfig,\n      signal: params.request.signal,\n    },\n  })\n\n  /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */\n  if (isDataReq) {\n    Object.defineProperty(request, '__isData', {\n      enumerable: false,\n      value: true,\n    })\n  }\n\n  if (\n    !(globalThis as any).__incrementalCache &&\n    (params as any).IncrementalCache\n  ) {\n    ;(globalThis as any).__incrementalCache = new (\n      params as any\n    ).IncrementalCache({\n      appDir: true,\n      fetchCache: true,\n      minimalMode: process.env.NODE_ENV !== 'development',\n      fetchCacheKeyPrefix: process.env.__NEXT_FETCH_CACHE_KEY_PREFIX,\n      dev: process.env.NODE_ENV === 'development',\n      requestHeaders: params.request.headers as any,\n      requestProtocol: 'https',\n      getPrerenderManifest: () => {\n        return {\n          version: -1 as any, // letting us know this doesn't conform to spec\n          routes: {},\n          dynamicRoutes: {},\n          notFoundRoutes: [],\n          preview: {\n            previewModeId: 'development-id',\n          } as any, // `preview` is special case read in next-dev-server\n        }\n      },\n    })\n  }\n\n  const event = new NextFetchEvent({ request, page: params.page })\n  let response\n  let cookiesFromResponse\n\n  response = await propagator(request, () => {\n    // we only care to make async storage available for middleware\n    const isMiddleware =\n      params.page === '/middleware' || params.page === '/src/middleware'\n\n    if (isMiddleware) {\n      // if we're in an edge function, we only get a subset of `nextConfig` (no `experimental`),\n      // so we have to inject it via DefinePlugin.\n      // in `next start` this will be passed normally (see `NextNodeServer.runMiddleware`).\n      const isAfterEnabled =\n        params.request.nextConfig?.experimental?.after ??\n        !!process.env.__NEXT_AFTER\n\n      let waitUntil: WrapperRenderOpts['waitUntil'] = undefined\n      let closeController: CloseController | undefined = undefined\n\n      if (isAfterEnabled) {\n        waitUntil = event.waitUntil.bind(event)\n        closeController = new CloseController()\n      }\n\n      return getTracer().trace(\n        MiddlewareSpan.execute,\n        {\n          spanName: `middleware ${request.method} ${request.nextUrl.pathname}`,\n          attributes: {\n            'http.target': request.nextUrl.pathname,\n            'http.method': request.method,\n          },\n        },\n        async () => {\n          try {\n            return await RequestAsyncStorageWrapper.wrap(\n              requestAsyncStorage,\n              {\n                req: request,\n                renderOpts: {\n                  onUpdateCookies: (cookies) => {\n                    cookiesFromResponse = cookies\n                  },\n                  // @ts-expect-error TODO: investigate why previewProps isn't on RenderOpts\n                  previewProps: prerenderManifest?.preview || {\n                    previewModeId: 'development-id',\n                    previewModeEncryptionKey: '',\n                    previewModeSigningKey: '',\n                  },\n                  waitUntil,\n                  onClose: closeController\n                    ? closeController.onClose.bind(closeController)\n                    : undefined,\n                  experimental: {\n                    after: isAfterEnabled,\n                  },\n                },\n              },\n              () => params.handler(request, event)\n            )\n          } finally {\n            // middleware cannot stream, so we can consider the response closed\n            // as soon as the handler returns.\n            if (closeController) {\n              // we can delay running it until a bit later --\n              // if it's needed, we'll have a `waitUntil` lock anyway.\n              setTimeout(() => {\n                closeController!.dispatchClose()\n              }, 0)\n            }\n          }\n        }\n      )\n    }\n    return params.handler(request, event)\n  })\n\n  // check if response is a Response object\n  if (response && !(response instanceof Response)) {\n    throw new TypeError('Expected an instance of Response to be returned')\n  }\n\n  if (response && cookiesFromResponse) {\n    response.headers.set('set-cookie', cookiesFromResponse)\n  }\n\n  /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */\n  const rewrite = response?.headers.get('x-middleware-rewrite')\n  if (response && rewrite) {\n    const rewriteUrl = new NextURL(rewrite, {\n      forceLocale: true,\n      headers: params.request.headers,\n      nextConfig: params.request.nextConfig,\n    })\n\n    if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n      if (rewriteUrl.host === request.nextUrl.host) {\n        rewriteUrl.buildId = buildId || rewriteUrl.buildId\n        response.headers.set('x-middleware-rewrite', String(rewriteUrl))\n      }\n    }\n\n    /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */\n    const relativizedRewrite = relativizeURL(\n      String(rewriteUrl),\n      String(requestUrl)\n    )\n\n    if (\n      isDataReq &&\n      // if the rewrite is external and external rewrite\n      // resolving config is enabled don't add this header\n      // so the upstream app can set it instead\n      !(\n        process.env.__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE &&\n        relativizedRewrite.match(/http(s)?:\\/\\//)\n      )\n    ) {\n      response.headers.set('x-nextjs-rewrite', relativizedRewrite)\n    }\n  }\n\n  /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */\n  const redirect = response?.headers.get('Location')\n  if (response && redirect && !isEdgeRendering) {\n    const redirectURL = new NextURL(redirect, {\n      forceLocale: false,\n      headers: params.request.headers,\n      nextConfig: params.request.nextConfig,\n    })\n\n    /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */\n    response = new Response(response.body, response)\n\n    if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n      if (redirectURL.host === request.nextUrl.host) {\n        redirectURL.buildId = buildId || redirectURL.buildId\n        response.headers.set('Location', String(redirectURL))\n      }\n    }\n\n    /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */\n    if (isDataReq) {\n      response.headers.delete('Location')\n      response.headers.set(\n        'x-nextjs-redirect',\n        relativizeURL(String(redirectURL), String(requestUrl))\n      )\n    }\n  }\n\n  const finalResponse = response ? response : NextResponse.next()\n\n  // Flight headers are not overridable / removable so they are applied at the end.\n  const middlewareOverrideHeaders = finalResponse.headers.get(\n    'x-middleware-override-headers'\n  )\n  const overwrittenHeaders: string[] = []\n  if (middlewareOverrideHeaders) {\n    for (const [key, value] of flightHeaders) {\n      finalResponse.headers.set(`x-middleware-request-${key}`, value)\n      overwrittenHeaders.push(key)\n    }\n\n    if (overwrittenHeaders.length > 0) {\n      finalResponse.headers.set(\n        'x-middleware-override-headers',\n        middlewareOverrideHeaders + ',' + overwrittenHeaders.join(',')\n      )\n    }\n  }\n\n  return {\n    response: finalResponse,\n    waitUntil: Promise.all(event[waitUntilSymbol]),\n    fetchMetrics: request.fetchMetrics,\n  }\n}\n"],"names":["NextRequestHint","adapter","NextRequest","constructor","params","input","init","sourcePage","page","request","PageSignatureError","respondWith","waitUntil","headersGetter","keys","headers","Array","from","get","key","undefined","propagator","fn","tracer","getTracer","withPropagatedContext","testApisIntercepted","ensureTestApisIntercepted","process","env","NEXT_PRIVATE_TEST_PROXY","interceptTestApis","wrapRequestHandler","require","ensureInstrumentationRegistered","isEdgeRendering","self","__BUILD_MANIFEST","prerenderManifest","__PRERENDER_MANIFEST","JSON","parse","url","normalizeRscURL","requestUrl","NextURL","nextConfig","searchParams","value","getAll","normalizeNextQueryParam","normalizedKey","delete","val","append","buildId","isDataReq","pathname","requestHeaders","fromNodeOutgoingHttpHeaders","flightHeaders","Map","param","FLIGHT_PARAMETERS","toString","toLowerCase","set","normalizeUrl","__NEXT_NO_MIDDLEWARE_URL_NORMALIZE","URL","stripInternalSearchParams","body","geo","ip","method","signal","Object","defineProperty","enumerable","globalThis","__incrementalCache","IncrementalCache","appDir","fetchCache","minimalMode","NODE_ENV","fetchCacheKeyPrefix","__NEXT_FETCH_CACHE_KEY_PREFIX","dev","requestProtocol","getPrerenderManifest","version","routes","dynamicRoutes","notFoundRoutes","preview","previewModeId","event","NextFetchEvent","response","cookiesFromResponse","isMiddleware","isAfterEnabled","experimental","after","__NEXT_AFTER","closeController","bind","CloseController","trace","MiddlewareSpan","execute","spanName","nextUrl","attributes","RequestAsyncStorageWrapper","wrap","requestAsyncStorage","req","renderOpts","onUpdateCookies","cookies","previewProps","previewModeEncryptionKey","previewModeSigningKey","onClose","handler","setTimeout","dispatchClose","Response","TypeError","rewrite","rewriteUrl","forceLocale","host","String","relativizedRewrite","relativizeURL","__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE","match","redirect","redirectURL","finalResponse","NextResponse","next","middlewareOverrideHeaders","overwrittenHeaders","push","length","join","Promise","all","waitUntilSymbol","fetchMetrics"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}